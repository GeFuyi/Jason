{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createTextVNode as _createTextVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-container\"\n};\nconst _hoisted_2 = {\n  class: \"user-list\"\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  class: \"chat-box\"\n};\nconst _hoisted_5 = {\n  class: \"messages\"\n};\nconst _hoisted_6 = {\n  class: \"from\"\n};\nconst _hoisted_7 = {\n  class: \"content\"\n};\nconst _hoisted_8 = {\n  class: \"time\"\n};\nconst _hoisted_9 = {\n  class: \"input-area\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[4] || (_cache[4] = _createElementVNode(\"h3\", null, \"在线用户\", -1 /* CACHED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.users, user => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: user.id,\n      class: _normalizeClass({\n        active: $data.selectedUserId === user.id\n      }),\n      onClick: $event => $options.selectUser(user.id)\n    }, _toDisplayString(user.username), 11 /* TEXT, CLASS, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => $options.selectUser(null)),\n    class: \"group-btn\"\n  }, \"群聊\")]), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, msg => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: msg.id + msg.createTime,\n      class: _normalizeClass(['message', msg.fromUserId === $data.userId ? 'mine' : 'other'])\n    }, [_createElementVNode(\"span\", _hoisted_6, _toDisplayString(msg.fromUserId === $data.userId ? '我' : msg.fromUserId), 1 /* TEXT */), _cache[5] || (_cache[5] = _createTextVNode(\"： \", -1 /* CACHED */)), _createElementVNode(\"span\", _hoisted_7, _toDisplayString(msg.content), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_8, _toDisplayString($options.formatTime(msg.createTime)), 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_9, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.inputMessage = $event),\n    placeholder: \"请输入消息\",\n    onKeyup: _cache[2] || (_cache[2] = _withKeys((...args) => $options.sendChatMessage && $options.sendChatMessage(...args), [\"enter\"]))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.inputMessage]]), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.sendChatMessage && $options.sendChatMessage(...args))\n  }, \"发送\")])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","users","user","key","id","_normalizeClass","active","selectedUserId","onClick","$event","$options","selectUser","username","_hoisted_3","_cache","_hoisted_4","_hoisted_5","messages","msg","createTime","fromUserId","userId","_hoisted_6","_toDisplayString","_hoisted_7","content","_hoisted_8","formatTime","_hoisted_9","type","inputMessage","placeholder","onKeyup","_withKeys","args","sendChatMessage"],"sources":["D:\\Final\\springboot_egg\\egg-web\\src\\user\\ChatRoom.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <div class=\"user-list\">\r\n      <h3>在线用户</h3>\r\n      <ul>\r\n        <li\r\n            v-for=\"user in users\"\r\n            :key=\"user.id\"\r\n            :class=\"{ active: selectedUserId === user.id }\"\r\n            @click=\"selectUser(user.id)\"\r\n        >\r\n          {{ user.username }}\r\n        </li>\r\n      </ul>\r\n      <button @click=\"selectUser(null)\" class=\"group-btn\">群聊</button>\r\n    </div>\r\n\r\n    <div class=\"chat-box\">\r\n      <div class=\"messages\">\r\n        <div\r\n            v-for=\"msg in messages\"\r\n            :key=\"msg.id + msg.createTime\"\r\n            :class=\"['message', msg.fromUserId === userId ? 'mine' : 'other']\"\r\n        >\r\n          <span class=\"from\">{{ msg.fromUserId === userId ? '我' : msg.fromUserId }}</span>：\r\n          <span class=\"content\">{{ msg.content }}</span>\r\n          <span class=\"time\">{{ formatTime(msg.createTime) }}</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"input-area\">\r\n        <input\r\n            type=\"text\"\r\n            v-model=\"inputMessage\"\r\n            placeholder=\"请输入消息\"\r\n            @keyup.enter=\"sendChatMessage\"\r\n        />\r\n        <button @click=\"sendChatMessage\">发送</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { connect, sendMessage } from '@/utils/ws'\r\n\r\nexport default {\r\n  name: 'ChatRoom',\r\n  data() {\r\n    return {\r\n      userId: null,             // 当前登录用户ID\r\n      users: [],                // 在线用户列表（可从后端获取）\r\n      selectedUserId: null,     // 选中的聊天对象，null 表示群聊\r\n      messages: [],             // 消息列表\r\n      inputMessage: ''          // 输入框内容\r\n    }\r\n  },\r\n  created() {\r\n    // 从 sessionStorage 获取 userId\r\n    this.userId = sessionStorage.getItem('userId')\r\n\r\n    if (!this.userId) {\r\n      this.$message.error('请先登录')\r\n      this.$router.push('/login')\r\n      return\r\n    }\r\n\r\n    // 建立 WebSocket 连接\r\n    connect(this.userId, this.onMessageReceived)\r\n\r\n    // TODO: 可通过 API 拉取在线用户列表\r\n    // this.fetchOnlineUsers()\r\n  },\r\n  methods: {\r\n    onMessageReceived(msg) {\r\n      this.messages.push(msg)\r\n      this.$nextTick(() => {\r\n        const container = this.$el.querySelector('.messages')\r\n        container.scrollTop = container.scrollHeight\r\n      })\r\n    },\r\n    selectUser(userId) {\r\n      this.selectedUserId = userId\r\n    },\r\n    sendChatMessage() {\r\n      if (!this.inputMessage.trim()) return\r\n\r\n      const message = this.inputMessage.trim()\r\n\r\n      // 调用工具方法发送\r\n      sendMessage(this.userId, this.selectedUserId, message)\r\n\r\n      // 清空输入框\r\n      this.inputMessage = ''\r\n    },\r\n    formatTime(datetime) {\r\n      const d = new Date(datetime)\r\n      return d.toLocaleTimeString()\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container {\r\n  display: flex;\r\n  height: 90vh;\r\n  border: 1px solid #ccc;\r\n}\r\n\r\n.user-list {\r\n  width: 200px;\r\n  border-right: 1px solid #ccc;\r\n  padding: 10px;\r\n}\r\n\r\n.user-list ul {\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n\r\n.user-list li {\r\n  padding: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.user-list li.active {\r\n  background-color: #e6f7ff;\r\n}\r\n\r\n.group-btn {\r\n  margin-top: 10px;\r\n  width: 100%;\r\n}\r\n\r\n.chat-box {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.messages {\r\n  flex: 1;\r\n  padding: 10px;\r\n  overflow-y: auto;\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n.message {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.message.mine {\r\n  text-align: right;\r\n}\r\n\r\n.message .from {\r\n  font-weight: bold;\r\n}\r\n\r\n.message .time {\r\n  font-size: 12px;\r\n  color: #888;\r\n  margin-left: 5px;\r\n}\r\n\r\n.input-area {\r\n  display: flex;\r\n  padding: 10px;\r\n  border-top: 1px solid #ccc;\r\n}\r\n\r\n.input-area input {\r\n  flex: 1;\r\n  padding: 5px;\r\n  margin-right: 5px;\r\n}\r\n\r\n.input-area button {\r\n  padding: 5px 10px;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;EACpBA,KAAK,EAAC;AAAW;;;EAejBA,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC;AAAU;;EAMXA,KAAK,EAAC;AAAM;;EACZA,KAAK,EAAC;AAAS;;EACfA,KAAK,EAAC;AAAM;;EAIjBA,KAAK,EAAC;AAAY;;uBA7B3BC,mBAAA,CAuCM,OAvCNC,UAuCM,GAtCJC,mBAAA,CAaM,OAbNC,UAaM,G,0BAZJD,mBAAA,CAAa,YAAT,MAAI,qBACRA,mBAAA,CASK,c,kBARHF,mBAAA,CAOKI,SAAA,QAAAC,WAAA,CANcC,KAAA,CAAAC,KAAK,EAAbC,IAAI;yBADfR,mBAAA,CAOK;MALAS,GAAG,EAAED,IAAI,CAACE,EAAE;MACZX,KAAK,EAAAY,eAAA;QAAAC,MAAA,EAAYN,KAAA,CAAAO,cAAc,KAAKL,IAAI,CAACE;MAAE;MAC3CI,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,UAAU,CAACT,IAAI,CAACE,EAAE;wBAEzBF,IAAI,CAACU,QAAQ,gCAAAC,UAAA;oCAGpBjB,mBAAA,CAA+D;IAAtDY,OAAK,EAAAM,MAAA,QAAAA,MAAA,MAAAL,MAAA,IAAEC,QAAA,CAAAC,UAAU;IAAQlB,KAAK,EAAC;KAAY,IAAE,E,GAGxDG,mBAAA,CAsBM,OAtBNmB,UAsBM,GArBJnB,mBAAA,CAUM,OAVNoB,UAUM,I,kBATJtB,mBAAA,CAQMI,SAAA,QAAAC,WAAA,CAPYC,KAAA,CAAAiB,QAAQ,EAAfC,GAAG;yBADdxB,mBAAA,CAQM;MANDS,GAAG,EAAEe,GAAG,CAACd,EAAE,GAAGc,GAAG,CAACC,UAAU;MAC5B1B,KAAK,EAAAY,eAAA,aAAca,GAAG,CAACE,UAAU,KAAKpB,KAAA,CAAAqB,MAAM;QAE/CzB,mBAAA,CAAgF,QAAhF0B,UAAgF,EAAAC,gBAAA,CAA1DL,GAAG,CAACE,UAAU,KAAKpB,KAAA,CAAAqB,MAAM,SAASH,GAAG,CAACE,UAAU,kB,2CAAU,IAChF,qBAAAxB,mBAAA,CAA8C,QAA9C4B,UAA8C,EAAAD,gBAAA,CAArBL,GAAG,CAACO,OAAO,kBACpC7B,mBAAA,CAA0D,QAA1D8B,UAA0D,EAAAH,gBAAA,CAApCb,QAAA,CAAAiB,UAAU,CAACT,GAAG,CAACC,UAAU,kB;oCAInDvB,mBAAA,CAQM,OARNgC,UAQM,G,gBAPJhC,mBAAA,CAKE;IAJEiC,IAAI,EAAC,MAAM;+DACF7B,KAAA,CAAA8B,YAAY,GAAArB,MAAA;IACrBsB,WAAW,EAAC,OAAO;IAClBC,OAAK,EAAAlB,MAAA,QAAAA,MAAA,MAAAmB,SAAA,KAAAC,IAAA,KAAQxB,QAAA,CAAAyB,eAAA,IAAAzB,QAAA,CAAAyB,eAAA,IAAAD,IAAA,CAAe;iEAFpBlC,KAAA,CAAA8B,YAAY,E,GAIzBlC,mBAAA,CAA4C;IAAnCY,OAAK,EAAAM,MAAA,QAAAA,MAAA,UAAAoB,IAAA,KAAExB,QAAA,CAAAyB,eAAA,IAAAzB,QAAA,CAAAyB,eAAA,IAAAD,IAAA,CAAe;KAAE,IAAE,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}