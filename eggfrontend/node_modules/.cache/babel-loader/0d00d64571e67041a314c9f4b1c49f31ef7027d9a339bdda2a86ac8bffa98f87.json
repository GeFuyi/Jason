{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nlet stompClient = null;\nlet isConnected = false;\nlet reconnectTimeout = null;\nlet pendingMessages = []; // 掉线期间未发送的消息缓存\n\nexport function connect(userId, onMessageReceived) {\n  console.log('[chat.js] 开始连接 STOMP，userId=', userId);\n  const socket = new SockJS('http://localhost/ws-chat');\n  const token = localStorage.getItem('token'); // 从本地取 token\n\n  stompClient = new Client({\n    webSocketFactory: () => socket,\n    connectHeaders: {\n      userId: String(userId)\n    },\n    debug: str => console.log('[STOMP DEBUG]', str),\n    reconnectDelay: 0\n  });\n  stompClient.onConnect = () => {\n    console.log('[chat.js] STOMP connected');\n    isConnected = true;\n\n    // 订阅群聊\n    stompClient.subscribe('/topic/group', msg => {\n      const message = JSON.parse(msg.body);\n      console.log('[STOMP] 收到群聊消息:', message);\n      onMessageReceived(message);\n    });\n\n    // 订阅私聊\n    stompClient.subscribe(`/topic/private-${userId}`, msg => {\n      const message = JSON.parse(msg.body);\n      console.log('[STOMP] 收到私聊消息:', message);\n      onMessageReceived(message);\n    });\n    console.log('[chat.js] 已订阅: /topic/group 和 /topic/private-' + userId);\n    flushPendingMessages();\n  };\n  stompClient.onStompError = frame => {\n    console.error('[STOMP ERROR] broker error: ' + frame.headers['message']);\n    console.error('[STOMP ERROR] details: ' + frame.body);\n  };\n  stompClient.onWebSocketError = ev => console.error('[STOMP ERROR] WebSocket error', ev);\n  stompClient.onWebSocketClose = ev => {\n    console.warn('[STOMP] WebSocket closed', ev);\n    isConnected = false;\n    if (reconnectTimeout) clearTimeout(reconnectTimeout);\n    reconnectTimeout = setTimeout(() => {\n      console.log('[STOMP] 尝试重连...');\n      connect(userId, onMessageReceived);\n    }, 3000);\n  };\n  stompClient.activate();\n}\nexport function sendMessage(fromUserId, toUserId, content, tempId) {\n  const payload = {\n    fromUserId,\n    toUserId,\n    content,\n    tempId\n  };\n  console.log('[chat.js] 准备发送消息 payload:', payload);\n  if (!stompClient || !isConnected) {\n    console.warn('[chat.js] STOMP 未连接，缓存消息');\n    pendingMessages.push(payload);\n    return;\n  }\n  stompClient.publish({\n    destination: '/app/chat.send',\n    body: JSON.stringify(payload)\n  });\n  console.log('[chat.js] 消息已发送:', payload);\n}\nfunction flushPendingMessages() {\n  if (!pendingMessages.length || !stompClient || !isConnected) return;\n  console.log('[chat.js] 发送缓存消息', pendingMessages.length);\n  pendingMessages.forEach(msg => {\n    stompClient.publish({\n      destination: '/app/chat.send',\n      body: JSON.stringify(msg)\n    });\n    console.log('[chat.js] 已发送缓存消息:', msg);\n  });\n  pendingMessages = [];\n}\nexport function isStompConnected() {\n  return isConnected;\n}\nexport function disconnect() {\n  if (stompClient) {\n    stompClient.deactivate();\n    console.log('[chat.js] STOMP disconnected');\n    isConnected = false;\n  }\n}","map":{"version":3,"names":["Client","SockJS","stompClient","isConnected","reconnectTimeout","pendingMessages","connect","userId","onMessageReceived","console","log","socket","token","localStorage","getItem","webSocketFactory","connectHeaders","String","debug","str","reconnectDelay","onConnect","subscribe","msg","message","JSON","parse","body","flushPendingMessages","onStompError","frame","error","headers","onWebSocketError","ev","onWebSocketClose","warn","clearTimeout","setTimeout","activate","sendMessage","fromUserId","toUserId","content","tempId","payload","push","publish","destination","stringify","length","forEach","isStompConnected","disconnect","deactivate"],"sources":["D:/Final/springboot_egg/egg-web/src/utils/chat.js"],"sourcesContent":["import { Client } from '@stomp/stompjs'\r\nimport SockJS from 'sockjs-client'\r\n\r\nlet stompClient = null\r\nlet isConnected = false\r\nlet reconnectTimeout = null\r\nlet pendingMessages = [] // 掉线期间未发送的消息缓存\r\n\r\nexport function connect(userId, onMessageReceived) {\r\n    console.log('[chat.js] 开始连接 STOMP，userId=', userId)\r\n\r\n    const socket = new SockJS('http://localhost/ws-chat')\r\n\r\n    const token = localStorage.getItem('token')  // 从本地取 token\r\n\r\n    stompClient = new Client({\r\n        webSocketFactory: () => socket,\r\n        connectHeaders: {\r\n            userId: String(userId)\r\n            \r\n        },\r\n        debug: str => console.log('[STOMP DEBUG]', str),\r\n        reconnectDelay: 0\r\n    })\r\n\r\n    stompClient.onConnect = () => {\r\n        console.log('[chat.js] STOMP connected')\r\n        isConnected = true\r\n\r\n        // 订阅群聊\r\n        stompClient.subscribe('/topic/group', msg => {\r\n            const message = JSON.parse(msg.body)\r\n            console.log('[STOMP] 收到群聊消息:', message)\r\n            onMessageReceived(message)\r\n        })\r\n\r\n        // 订阅私聊\r\n        stompClient.subscribe(`/topic/private-${userId}`, msg => {\r\n            const message = JSON.parse(msg.body)\r\n            console.log('[STOMP] 收到私聊消息:', message)\r\n            onMessageReceived(message)\r\n        })\r\n\r\n        console.log('[chat.js] 已订阅: /topic/group 和 /topic/private-' + userId)\r\n\r\n        flushPendingMessages()\r\n    }\r\n\r\n    stompClient.onStompError = frame => {\r\n        console.error('[STOMP ERROR] broker error: ' + frame.headers['message'])\r\n        console.error('[STOMP ERROR] details: ' + frame.body)\r\n    }\r\n\r\n    stompClient.onWebSocketError = ev => console.error('[STOMP ERROR] WebSocket error', ev)\r\n\r\n    stompClient.onWebSocketClose = ev => {\r\n        console.warn('[STOMP] WebSocket closed', ev)\r\n        isConnected = false\r\n        if (reconnectTimeout) clearTimeout(reconnectTimeout)\r\n        reconnectTimeout = setTimeout(() => {\r\n            console.log('[STOMP] 尝试重连...')\r\n            connect(userId, onMessageReceived)\r\n        }, 3000)\r\n    }\r\n\r\n    stompClient.activate()\r\n}\r\n\r\nexport function sendMessage(fromUserId, toUserId, content, tempId) {\r\n    const payload = { fromUserId, toUserId, content, tempId }\r\n    console.log('[chat.js] 准备发送消息 payload:', payload)\r\n\r\n    if (!stompClient || !isConnected) {\r\n        console.warn('[chat.js] STOMP 未连接，缓存消息')\r\n        pendingMessages.push(payload)\r\n        return\r\n    }\r\n\r\n    stompClient.publish({\r\n        destination: '/app/chat.send',\r\n        body: JSON.stringify(payload)\r\n    })\r\n    console.log('[chat.js] 消息已发送:', payload)\r\n}\r\n\r\nfunction flushPendingMessages() {\r\n    if (!pendingMessages.length || !stompClient || !isConnected) return\r\n    console.log('[chat.js] 发送缓存消息', pendingMessages.length)\r\n    pendingMessages.forEach(msg => {\r\n        stompClient.publish({\r\n            destination: '/app/chat.send',\r\n            body: JSON.stringify(msg)\r\n        })\r\n        console.log('[chat.js] 已发送缓存消息:', msg)\r\n    })\r\n    pendingMessages = []\r\n}\r\n\r\nexport function isStompConnected() { return isConnected }\r\n\r\nexport function disconnect() {\r\n    if (stompClient) {\r\n        stompClient.deactivate()\r\n        console.log('[chat.js] STOMP disconnected')\r\n        isConnected = false\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}