{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport axios from 'axios';\nconst BASE_URL = 'http://localhost:8090'; // 后端完整地址\n\nexport default {\n  name: 'UserList',\n  setup() {\n    const criteria = ref({\n      username: '',\n      email: '',\n      age: '',\n      gender: ''\n    });\n    const usernameList = ref([]);\n    const emailList = ref([]);\n    const ageList = ref([]);\n    const genderList = ref([true, false]);\n    const pagedUsers = ref([]);\n    const users = ref([]); // 全量用户\n    const page = ref(1);\n    const pageSize = ref(10);\n    const totalPages = ref(1);\n\n    // ---------- 预加载所有用户，初始化缓存 ----------\n    const fetchAllUsers = async () => {\n      try {\n        const res = await axios.get(`${BASE_URL}/user`);\n        users.value = res.data;\n      } catch (err) {\n        alert('获取全部用户失败: ' + err);\n      }\n    };\n\n    // ---------- 获取下拉选项 ----------\n    const fetchOptions = async () => {\n      try {\n        const [uRes, eRes, aRes] = await Promise.all([axios.get(`${BASE_URL}/user/options/username`), axios.get(`${BASE_URL}/user/options/email`), axios.get(`${BASE_URL}/user/options/age`)]);\n        usernameList.value = uRes.data;\n        emailList.value = eRes.data;\n        ageList.value = aRes.data;\n        // genderList 固定 [true,false]\n      } catch (err) {\n        alert('获取下拉选项失败: ' + err);\n      }\n    };\n\n    // ---------- 条件查询 + 分页 ----------\n    const fetchUsers = async () => {\n      try {\n        const params = {\n          username: criteria.value.username,\n          email: criteria.value.email,\n          age: criteria.value.age,\n          gender: criteria.value.gender,\n          page: page.value,\n          pageSize: pageSize.value\n        };\n        const res = await axios.get(`${BASE_URL}/user/query`, {\n          params\n        });\n        pagedUsers.value = res.data.data;\n        totalPages.value = Math.ceil(res.data.total / pageSize.value);\n      } catch (err) {\n        alert('查询用户失败: ' + err);\n      }\n    };\n    const changePage = p => {\n      if (p < 1 || p > totalPages.value) return;\n      page.value = p;\n      fetchUsers();\n    };\n    onMounted(async () => {\n      await fetchAllUsers(); // 先加载全部用户，保证缓存\n      await fetchOptions(); // 再加载下拉选项\n      await fetchUsers(); // 默认展示第一页\n    });\n    return {\n      criteria,\n      usernameList,\n      emailList,\n      ageList,\n      genderList,\n      pagedUsers,\n      page,\n      pageSize,\n      totalPages,\n      fetchUsers,\n      changePage\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","BASE_URL","name","setup","criteria","username","email","age","gender","usernameList","emailList","ageList","genderList","pagedUsers","users","page","pageSize","totalPages","fetchAllUsers","res","get","value","data","err","alert","fetchOptions","uRes","eRes","aRes","Promise","all","fetchUsers","params","Math","ceil","total","changePage","p"],"sources":["D:\\Final\\springboot_egg\\egg-web\\src\\user\\UserList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>用户列表</h2>\r\n\r\n    <!-- 条件筛选 -->\r\n    <div class=\"filters\">\r\n      <select v-model=\"criteria.username\">\r\n        <option value=\"\">全部用户名</option>\r\n        <option v-for=\"u in usernameList\" :key=\"u\" :value=\"u\">{{ u }}</option>\r\n      </select>\r\n\r\n      <select v-model=\"criteria.email\">\r\n        <option value=\"\">全部邮箱</option>\r\n        <option v-for=\"e in emailList\" :key=\"e\" :value=\"e\">{{ e }}</option>\r\n      </select>\r\n\r\n      <select v-model=\"criteria.age\">\r\n        <option value=\"\">全部年龄</option>\r\n        <option v-for=\"a in ageList\" :key=\"a\" :value=\"a\">{{ a }}</option>\r\n      </select>\r\n\r\n      <select v-model=\"criteria.gender\">\r\n        <option value=\"\">全部性别</option>\r\n        <option v-for=\"g in genderList\" :key=\"g\" :value=\"g\">{{ g ? '男' : '女' }}</option>\r\n      </select>\r\n\r\n      <button @click=\"fetchUsers\">查询</button>\r\n    </div>\r\n\r\n    <!-- 用户表 -->\r\n    <table>\r\n      <thead>\r\n      <tr>\r\n        <th>ID</th>\r\n        <th>用户名</th>\r\n        <th>邮箱</th>\r\n        <th>年龄</th>\r\n        <th>性别</th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr v-for=\"user in pagedUsers\" :key=\"user.id\">\r\n        <td>{{ user.id }}</td>\r\n        <td>{{ user.username }}</td>\r\n        <td>{{ user.email }}</td>\r\n        <td>{{ user.age }}</td>\r\n        <td>{{ user.gender ? '男' : '女' }}</td>\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- 分页 -->\r\n    <div class=\"pagination\">\r\n      <button @click=\"changePage(page - 1)\" :disabled=\"page === 1\">上一页</button>\r\n      <span>{{ page }} / {{ totalPages }}</span>\r\n      <button @click=\"changePage(page + 1)\" :disabled=\"page === totalPages\">下一页</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from 'vue';\r\nimport axios from 'axios';\r\n\r\nconst BASE_URL = 'http://localhost:8090'; // 后端完整地址\r\n\r\nexport default {\r\n  name: 'UserList',\r\n  setup() {\r\n    const criteria = ref({\r\n      username: '',\r\n      email: '',\r\n      age: '',\r\n      gender: ''\r\n    });\r\n\r\n    const usernameList = ref([]);\r\n    const emailList = ref([]);\r\n    const ageList = ref([]);\r\n    const genderList = ref([true, false]);\r\n\r\n    const pagedUsers = ref([]);\r\n    const users = ref([]); // 全量用户\r\n    const page = ref(1);\r\n    const pageSize = ref(10);\r\n    const totalPages = ref(1);\r\n\r\n    // ---------- 预加载所有用户，初始化缓存 ----------\r\n    const fetchAllUsers = async () => {\r\n      try {\r\n        const res = await axios.get(`${BASE_URL}/user`);\r\n        users.value = res.data;\r\n      } catch (err) {\r\n        alert('获取全部用户失败: ' + err);\r\n      }\r\n    };\r\n\r\n    // ---------- 获取下拉选项 ----------\r\n    const fetchOptions = async () => {\r\n      try {\r\n        const [uRes, eRes, aRes] = await Promise.all([\r\n          axios.get(`${BASE_URL}/user/options/username`),\r\n          axios.get(`${BASE_URL}/user/options/email`),\r\n          axios.get(`${BASE_URL}/user/options/age`)\r\n        ]);\r\n        usernameList.value = uRes.data;\r\n        emailList.value = eRes.data;\r\n        ageList.value = aRes.data;\r\n        // genderList 固定 [true,false]\r\n      } catch (err) {\r\n        alert('获取下拉选项失败: ' + err);\r\n      }\r\n    };\r\n\r\n    // ---------- 条件查询 + 分页 ----------\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const params = {\r\n          username: criteria.value.username,\r\n          email: criteria.value.email,\r\n          age: criteria.value.age,\r\n          gender: criteria.value.gender,\r\n          page: page.value,\r\n          pageSize: pageSize.value\r\n        };\r\n        const res = await axios.get(`${BASE_URL}/user/query`, { params });\r\n        pagedUsers.value = res.data.data;\r\n        totalPages.value = Math.ceil(res.data.total / pageSize.value);\r\n      } catch (err) {\r\n        alert('查询用户失败: ' + err);\r\n      }\r\n    };\r\n\r\n    const changePage = (p) => {\r\n      if (p < 1 || p > totalPages.value) return;\r\n      page.value = p;\r\n      fetchUsers();\r\n    };\r\n\r\n    onMounted(async () => {\r\n      await fetchAllUsers(); // 先加载全部用户，保证缓存\r\n      await fetchOptions();  // 再加载下拉选项\r\n      await fetchUsers();    // 默认展示第一页\r\n    });\r\n\r\n    return {\r\n      criteria,\r\n      usernameList,\r\n      emailList,\r\n      ageList,\r\n      genderList,\r\n      pagedUsers,\r\n      page,\r\n      pageSize,\r\n      totalPages,\r\n      fetchUsers,\r\n      changePage\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.filters select {\r\n  margin-right: 10px;\r\n}\r\n.pagination {\r\n  margin-top: 10px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}