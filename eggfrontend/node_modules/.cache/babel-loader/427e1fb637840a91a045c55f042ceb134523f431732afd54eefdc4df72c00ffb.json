{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\n\n// 创建 axios 实例\nconst egg = axios.create({\n  baseURL: 'http://localhost:8090',\n  timeout: 10000\n});\n\n// 请求拦截器：自动带 token\negg.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = 'Bearer ' + token;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// 响应拦截器：自动解封装 Result + 全局错误弹窗\negg.interceptors.response.use(response => {\n  const res = response.data;\n  if (res.success) {\n    return res.data;\n  } else {\n    ElMessage.error('业务异常: ' + (res.message || '未知错误'));\n    return Promise.reject(new Error(res.message || 'Error'));\n  }\n}, error => {\n  // 如果是后端返回的 4xx / 5xx\n  if (error.response && error.response.data) {\n    const msg = error.response.data.message || error.response.statusText;\n    ElMessage.error('业务异常: ' + msg);\n    return Promise.reject(new Error(msg));\n  } else {\n    ElMessage.error('系统内部异常或网络错误: ' + (error.message || '未知错误'));\n    return Promise.reject(error);\n  }\n});\nexport default egg;","map":{"version":3,"names":["axios","ElMessage","egg","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","response","res","data","success","message","Error","msg","statusText"],"sources":["D:/Final/springboot_egg/egg-web/src/utils/egg.js"],"sourcesContent":["import axios from 'axios'\r\nimport { ElMessage } from 'element-plus'\r\n\r\n// 创建 axios 实例\r\nconst egg = axios.create({\r\n    baseURL: 'http://localhost:8090',\r\n    timeout: 10000\r\n})\r\n\r\n// 请求拦截器：自动带 token\r\negg.interceptors.request.use(\r\n    config => {\r\n        const token = localStorage.getItem('token')\r\n        if (token) {\r\n            config.headers['Authorization'] = 'Bearer ' + token\r\n        }\r\n        return config\r\n    },\r\n    error => Promise.reject(error)\r\n)\r\n\r\n// 响应拦截器：自动解封装 Result + 全局错误弹窗\r\negg.interceptors.response.use(\r\n    response => {\r\n        const res = response.data\r\n        if (res.success) {\r\n            return res.data\r\n        } else {\r\n            ElMessage.error('业务异常: ' + (res.message || '未知错误'))\r\n            return Promise.reject(new Error(res.message || 'Error'))\r\n        }\r\n    },\r\n    error => {\r\n        // 如果是后端返回的 4xx / 5xx\r\n        if (error.response && error.response.data) {\r\n            const msg = error.response.data.message || error.response.statusText\r\n            ElMessage.error('业务异常: ' + msg)\r\n            return Promise.reject(new Error(msg))\r\n        } else {\r\n            ElMessage.error('系统内部异常或网络错误: ' + (error.message || '未知错误'))\r\n            return Promise.reject(error)\r\n        }\r\n    }\r\n)\r\n\r\nexport default egg\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,cAAc;;AAExC;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACxBC,MAAM,IAAI;EACN,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGH,KAAK;EACvD;EACA,OAAOD,MAAM;AACjB,CAAC,EACDK,KAAK,IAAIC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CACzBS,QAAQ,IAAI;EACR,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACzB,IAAID,GAAG,CAACE,OAAO,EAAE;IACb,OAAOF,GAAG,CAACC,IAAI;EACnB,CAAC,MAAM;IACHlB,SAAS,CAACa,KAAK,CAAC,QAAQ,IAAII,GAAG,CAACG,OAAO,IAAI,MAAM,CAAC,CAAC;IACnD,OAAON,OAAO,CAACC,MAAM,CAAC,IAAIM,KAAK,CAACJ,GAAG,CAACG,OAAO,IAAI,OAAO,CAAC,CAAC;EAC5D;AACJ,CAAC,EACDP,KAAK,IAAI;EACL;EACA,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACE,IAAI,EAAE;IACvC,MAAMI,GAAG,GAAGT,KAAK,CAACG,QAAQ,CAACE,IAAI,CAACE,OAAO,IAAIP,KAAK,CAACG,QAAQ,CAACO,UAAU;IACpEvB,SAAS,CAACa,KAAK,CAAC,QAAQ,GAAGS,GAAG,CAAC;IAC/B,OAAOR,OAAO,CAACC,MAAM,CAAC,IAAIM,KAAK,CAACC,GAAG,CAAC,CAAC;EACzC,CAAC,MAAM;IACHtB,SAAS,CAACa,KAAK,CAAC,eAAe,IAAIA,KAAK,CAACO,OAAO,IAAI,MAAM,CAAC,CAAC;IAC5D,OAAON,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;EAChC;AACJ,CACJ,CAAC;AAED,eAAeZ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}