{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, withKeys as _withKeys, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-container\"\n};\nconst _hoisted_2 = {\n  class: \"user-list\"\n};\nconst _hoisted_3 = {\n  class: \"user-card\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = {\n  class: \"chat-main\"\n};\nconst _hoisted_6 = {\n  class: \"messages\",\n  ref: \"messageContainer\"\n};\nconst _hoisted_7 = {\n  class: \"from\"\n};\nconst _hoisted_8 = {\n  class: \"bubble\"\n};\nconst _hoisted_9 = {\n  class: \"content\"\n};\nconst _hoisted_10 = {\n  class: \"time\"\n};\nconst _hoisted_11 = {\n  class: \"input-area\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_scrollbar = _resolveComponent(\"el-scrollbar\");\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 左侧用户列表 \"), _createElementVNode(\"aside\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[2] || (_cache[2] = _createElementVNode(\"h3\", null, \"聊天列表\", -1 /* CACHED */)), _createVNode(_component_el_scrollbar, {\n    class: \"user-scroll\"\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"div\", {\n      class: _normalizeClass([\"user-item\", {\n        active: $data.selectedUserId === null\n      }]),\n      onClick: _cache[0] || (_cache[0] = $event => $options.selectUser(null))\n    }, \"群聊\", 2 /* CLASS */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.users, user => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        class: _normalizeClass([\"user-item\", {\n          active: $data.selectedUserId === user.id\n        }]),\n        key: user.id,\n        onClick: $event => $options.selectUser(user.id)\n      }, _toDisplayString(user.username), 11 /* TEXT, CLASS, PROPS */, _hoisted_4);\n    }), 128 /* KEYED_FRAGMENT */))]),\n    _: 1 /* STABLE */\n  })])]), _createCommentVNode(\" 右侧聊天区 \"), _createElementVNode(\"main\", _hoisted_5, [_createCommentVNode(\" 消息显示区域 \"), _createElementVNode(\"div\", _hoisted_6, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredMessages, msg => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: msg.id || msg.tempId,\n      class: _normalizeClass(['message', msg.fromUserId === Number($data.userId) ? 'mine' : 'other'])\n    }, [_createElementVNode(\"span\", _hoisted_7, _toDisplayString(msg.fromUserId === Number($data.userId) ? '我' : $options.getUsername(msg.fromUserId)), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"span\", _hoisted_9, _toDisplayString(msg.content), 1 /* TEXT */)]), _createElementVNode(\"span\", _hoisted_10, _toDisplayString($options.formatTime(msg.createTime)), 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), _createCommentVNode(\" 输入框区域 \"), _createElementVNode(\"div\", _hoisted_11, [_createVNode(_component_el_input, {\n    modelValue: $data.inputMessage,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.inputMessage = $event),\n    placeholder: \"请输入消息\",\n    onKeyup: _withKeys($options.sendChatMessage, [\"enter\"]),\n    class: \"input-box\",\n    clearable: \"\"\n  }, null, 8 /* PROPS */, [\"modelValue\", \"onKeyup\"]), _createVNode(_component_el_button, {\n    type: \"primary\",\n    onClick: $options.sendChatMessage\n  }, {\n    default: _withCtx(() => _cache[3] || (_cache[3] = [_createTextVNode(\"发送\", -1 /* CACHED */)])),\n    _: 1 /* STABLE */,\n    __: [3]\n  }, 8 /* PROPS */, [\"onClick\"])])])]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_hoisted_3","_createVNode","_component_el_scrollbar","_normalizeClass","active","$data","selectedUserId","onClick","_cache","$event","$options","selectUser","_Fragment","_renderList","users","user","id","key","username","_hoisted_4","_hoisted_5","_hoisted_6","filteredMessages","msg","tempId","fromUserId","Number","userId","_hoisted_7","_toDisplayString","getUsername","_hoisted_8","_hoisted_9","content","_hoisted_10","formatTime","createTime","_hoisted_11","_component_el_input","inputMessage","placeholder","onKeyup","_withKeys","sendChatMessage","clearable","_component_el_button","type"],"sources":["D:\\Final\\springboot_egg\\egg-web\\src\\user\\ChatRoom.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <!-- 左侧用户列表 -->\r\n    <aside class=\"user-list\">\r\n      <div class=\"user-card\">\r\n        <h3>聊天列表</h3>\r\n        <el-scrollbar class=\"user-scroll\">\r\n          <div\r\n              class=\"user-item\"\r\n              :class=\"{ active: selectedUserId === null }\"\r\n              @click=\"selectUser(null)\"\r\n          >群聊</div>\r\n\r\n          <div\r\n              class=\"user-item\"\r\n              v-for=\"user in users\"\r\n              :key=\"user.id\"\r\n              :class=\"{ active: selectedUserId === user.id }\"\r\n              @click=\"selectUser(user.id)\"\r\n          >\r\n            {{ user.username }}\r\n          </div>\r\n        </el-scrollbar>\r\n      </div>\r\n    </aside>\r\n\r\n    <!-- 右侧聊天区 -->\r\n    <main class=\"chat-main\">\r\n      <!-- 消息显示区域 -->\r\n      <div class=\"messages\" ref=\"messageContainer\">\r\n        <div\r\n            v-for=\"msg in filteredMessages\"\r\n            :key=\"msg.id || msg.tempId\"\r\n            :class=\"['message', msg.fromUserId === Number(userId) ? 'mine' : 'other']\"\r\n        >\r\n          <span class=\"from\">\r\n            {{ msg.fromUserId === Number(userId) ? '我' : getUsername(msg.fromUserId) }}\r\n          </span>\r\n          <div class=\"bubble\">\r\n            <span class=\"content\">{{ msg.content }}</span>\r\n          </div>\r\n          <span class=\"time\">{{ formatTime(msg.createTime) }}</span>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 输入框区域 -->\r\n      <div class=\"input-area\">\r\n        <el-input\r\n            v-model=\"inputMessage\"\r\n            placeholder=\"请输入消息\"\r\n            @keyup.enter=\"sendChatMessage\"\r\n            class=\"input-box\"\r\n            clearable\r\n        ></el-input>\r\n        <el-button type=\"primary\" @click=\"sendChatMessage\">发送</el-button>\r\n      </div>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { connect, sendMessage } from '@/utils/chat'\r\nimport egg from '@/utils/egg'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'ChatRoom',\r\n  data() {\r\n    return {\r\n      userId: null,\r\n      users: [],\r\n      selectedUserId: null,\r\n      messages: [],\r\n      inputMessage: '',\r\n      pendingTempIds: new Set()\r\n    }\r\n  },\r\n  computed: {\r\n    filteredMessages() {\r\n      return this.messages.filter(msg => {\r\n        if (this.selectedUserId === null) return !msg.toUserId\r\n        return (\r\n            (msg.fromUserId === this.selectedUserId && msg.toUserId === Number(this.userId)) ||\r\n            (msg.fromUserId === Number(this.userId) && msg.toUserId === this.selectedUserId)\r\n        )\r\n      })\r\n    }\r\n  },\r\n  mounted() {\r\n    this.userId = sessionStorage.getItem('userId')\r\n    if (!this.userId) {\r\n      ElMessage.error('请先登录')\r\n      this.$router.push('/login')\r\n      return\r\n    }\r\n\r\n    // 读取本地消息\r\n    this.loadMessagesFromLocal()\r\n\r\n    connect(Number(this.userId), this.onMessageReceived)\r\n    this.fetchOnlineUsers()\r\n    this.scrollToBottom()\r\n  },\r\n  methods: {\r\n    // localStorage key\r\n    getStorageKey() {\r\n      return `chat_messages_user_${this.userId}`\r\n    },\r\n\r\n    saveMessagesToLocal() {\r\n      // 按会话分组存储\r\n      const grouped = {}\r\n      this.messages.forEach(msg => {\r\n        const sessionId = msg.toUserId === null ? 'group' : (msg.fromUserId === Number(this.userId) ? msg.toUserId : msg.fromUserId)\r\n        if (!grouped[sessionId]) grouped[sessionId] = []\r\n        grouped[sessionId].push(msg)\r\n      })\r\n      localStorage.setItem(this.getStorageKey(), JSON.stringify(grouped))\r\n    },\r\n\r\n    loadMessagesFromLocal() {\r\n      const stored = localStorage.getItem(this.getStorageKey())\r\n      if (stored) {\r\n        const grouped = JSON.parse(stored)\r\n        const allMsgs = []\r\n        Object.values(grouped).forEach(arr => allMsgs.push(...arr))\r\n        this.messages = allMsgs\r\n      }\r\n    },\r\n\r\n    scrollToBottom() {\r\n      this.$nextTick(() => {\r\n        const container = this.$refs.messageContainer\r\n        if (container) container.scrollTop = container.scrollHeight\r\n      })\r\n    },\r\n\r\n    onMessageReceived(msg) {\r\n      if (msg.tempId && this.pendingTempIds.has(msg.tempId)) {\r\n        const index = this.messages.findIndex(m => m.tempId === msg.tempId)\r\n        if (index !== -1) this.messages.splice(index, 1, msg)\r\n        this.pendingTempIds.delete(msg.tempId)\r\n      } else {\r\n        this.messages.push(msg)\r\n      }\r\n      this.saveMessagesToLocal()\r\n      this.scrollToBottom()\r\n    },\r\n\r\n    selectUser(userId) {\r\n      this.selectedUserId = userId\r\n      this.scrollToBottom()\r\n    },\r\n\r\n    sendChatMessage() {\r\n      const content = this.inputMessage.trim()\r\n      if (!content) return\r\n\r\n      const tempId = Date.now()\r\n      const payload = {\r\n        fromUserId: Number(this.userId),\r\n        toUserId: this.selectedUserId,\r\n        content\r\n      }\r\n\r\n      if (payload.toUserId !== null) {\r\n        const tempMsg = { ...payload, tempId, createTime: new Date().toISOString(), failed: false }\r\n        this.messages.push(tempMsg)\r\n        this.pendingTempIds.add(tempId)\r\n        this.saveMessagesToLocal()\r\n        this.scrollToBottom()\r\n      }\r\n\r\n      this.inputMessage = ''\r\n\r\n      try {\r\n        sendMessage(payload.fromUserId, payload.toUserId, payload.content, tempId)\r\n      } catch (e) {\r\n        if (payload.toUserId !== null) {\r\n          const index = this.messages.findIndex(m => m.tempId === tempId)\r\n          if (index !== -1) this.messages[index].failed = true\r\n          this.pendingTempIds.delete(tempId)\r\n        }\r\n        console.error('消息发送失败', e)\r\n      }\r\n    },\r\n\r\n    formatTime(datetime) {\r\n      return datetime ? new Date(datetime).toLocaleTimeString() : ''\r\n    },\r\n\r\n    fetchOnlineUsers() {\r\n      egg.get('/user')\r\n          .then(res => this.users = res.data)\r\n          .catch(err => {\r\n            console.error(err)\r\n            ElMessage.error('获取用户列表失败')\r\n          })\r\n    },\r\n\r\n    getUsername(id) {\r\n      const user = this.users.find(u => u.id === id)\r\n      return user ? user.username : '未知'\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 整个页面全屏 */\r\n.chat-container {\r\n  display: flex;\r\n  height: 100vh;\r\n  width: 100vw;\r\n}\r\n\r\n/* 左侧用户列表 */\r\n.user-list {\r\n  width: 20%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n  background-color: #fafafa;\r\n  box-sizing: border-box;\r\n  height: 100%;\r\n}\r\n\r\n.user-card {\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1;\r\n  height: 100%;\r\n}\r\n\r\n.user-scroll {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  margin-top: 10px;\r\n}\r\n\r\n.user-item {\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  background-color: #fff;\r\n  margin-bottom: 6px;\r\n}\r\n\r\n.user-item.active {\r\n  background-color: #bae7ff;\r\n  border-color: #91d5ff;\r\n}\r\n\r\n/* 右侧聊天区 */\r\n.chat-main {\r\n  width: 80%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n  box-sizing: border-box;\r\n  background-color: #f0f2f5;\r\n  height: 100%;\r\n}\r\n\r\n/* 消息显示区域固定高度 */\r\n.messages {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 10px;\r\n  background-color: #ffffff;\r\n  border-radius: 8px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\n/* 输入框固定在底部 */\r\n.input-area {\r\n  display: flex;\r\n  gap: 10px;\r\n  padding-top: 10px;\r\n  height: 50px;\r\n  border-top: 1px solid #ddd;\r\n}\r\n\r\n.input-box {\r\n  flex: 1;\r\n}\r\n\r\n/* 消息样式 */\r\n.message {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.message.mine {\r\n  align-items: flex-end;\r\n}\r\n\r\n.message.other {\r\n  align-items: flex-start;\r\n}\r\n\r\n.bubble {\r\n  max-width: 70%;\r\n  padding: 10px 14px;\r\n  border-radius: 16px;\r\n  word-wrap: break-word;\r\n  position: relative;\r\n  background-color: #e6f7ff;\r\n}\r\n\r\n.message.mine .bubble {\r\n  background-color: #91d5ff;\r\n  color: #000;\r\n}\r\n\r\n.message.mine .bubble::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  right: -8px;\r\n  top: 10px;\r\n  border-width: 8px 0 8px 8px;\r\n  border-style: solid;\r\n  border-color: transparent transparent transparent #91d5ff;\r\n}\r\n\r\n.message.other .bubble::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  left: -8px;\r\n  top: 10px;\r\n  border-width: 8px 8px 8px 0;\r\n  border-style: solid;\r\n  border-color: transparent #e6f7ff transparent transparent;\r\n}\r\n\r\n/* 时间显示在气泡下方，小字体，对齐微信风格 */\r\n.time {\r\n  font-size: 12px;\r\n  color: #999;\r\n  margin-top: 2px;\r\n}\r\n\r\n.message.mine .time {\r\n  text-align: right;\r\n}\r\n\r\n.message.other .time {\r\n  text-align: left;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;EAElBA,KAAK,EAAC;AAAW;;EACjBA,KAAK,EAAC;AAAW;;;EAuBlBA,KAAK,EAAC;AAAW;;EAEhBA,KAAK,EAAC,UAAU;EAACC,GAAG,EAAC;;;EAMhBD,KAAK,EAAC;AAAM;;EAGbA,KAAK,EAAC;AAAQ;;EACXA,KAAK,EAAC;AAAS;;EAEjBA,KAAK,EAAC;AAAM;;EAKjBA,KAAK,EAAC;AAAY;;;;;uBA7C3BE,mBAAA,CAwDM,OAxDNC,UAwDM,GAvDJC,mBAAA,YAAe,EACfC,mBAAA,CAqBQ,SArBRC,UAqBQ,GApBND,mBAAA,CAmBM,OAnBNE,UAmBM,G,0BAlBJF,mBAAA,CAAa,YAAT,MAAI,qBACRG,YAAA,CAgBeC,uBAAA;IAhBDT,KAAK,EAAC;EAAa;sBAC/B,MAIS,CAJTK,mBAAA,CAIS;MAHLL,KAAK,EAAAU,eAAA,EAAC,WAAW;QAAAC,MAAA,EACCC,KAAA,CAAAC,cAAc;MAAA;MAC/BC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAC,UAAU;OACrB,IAAE,mB,kBAEHhB,mBAAA,CAQMiB,SAAA,QAAAC,WAAA,CANaR,KAAA,CAAAS,KAAK,EAAbC,IAAI;2BAFfpB,mBAAA,CAQM;QAPFF,KAAK,EAAAU,eAAA,EAAC,WAAW;UAAAC,MAAA,EAGCC,KAAA,CAAAC,cAAc,KAAKS,IAAI,CAACC;QAAE;QAD3CC,GAAG,EAAEF,IAAI,CAACC,EAAE;QAEZT,OAAK,EAAAE,MAAA,IAAEC,QAAA,CAAAC,UAAU,CAACI,IAAI,CAACC,EAAE;0BAEzBD,IAAI,CAACG,QAAQ,gCAAAC,UAAA;;;UAMxBtB,mBAAA,WAAc,EACdC,mBAAA,CA6BO,QA7BPsB,UA6BO,GA5BLvB,mBAAA,YAAe,EACfC,mBAAA,CAcM,OAdNuB,UAcM,I,kBAbJ1B,mBAAA,CAYMiB,SAAA,QAAAC,WAAA,CAXYH,QAAA,CAAAY,gBAAgB,EAAvBC,GAAG;yBADd5B,mBAAA,CAYM;MAVDsB,GAAG,EAAEM,GAAG,CAACP,EAAE,IAAIO,GAAG,CAACC,MAAM;MACzB/B,KAAK,EAAAU,eAAA,aAAcoB,GAAG,CAACE,UAAU,KAAKC,MAAM,CAACrB,KAAA,CAAAsB,MAAM;QAEtD7B,mBAAA,CAEO,QAFP8B,UAEO,EAAAC,gBAAA,CADFN,GAAG,CAACE,UAAU,KAAKC,MAAM,CAACrB,KAAA,CAAAsB,MAAM,UAAUjB,QAAA,CAAAoB,WAAW,CAACP,GAAG,CAACE,UAAU,mBAEzE3B,mBAAA,CAEM,OAFNiC,UAEM,GADJjC,mBAAA,CAA8C,QAA9CkC,UAA8C,EAAAH,gBAAA,CAArBN,GAAG,CAACU,OAAO,iB,GAEtCnC,mBAAA,CAA0D,QAA1DoC,WAA0D,EAAAL,gBAAA,CAApCnB,QAAA,CAAAyB,UAAU,CAACZ,GAAG,CAACa,UAAU,kB;0DAInDvC,mBAAA,WAAc,EACdC,mBAAA,CASM,OATNuC,WASM,GARJpC,YAAA,CAMYqC,mBAAA;gBALCjC,KAAA,CAAAkC,YAAY;+DAAZlC,KAAA,CAAAkC,YAAY,GAAA9B,MAAA;IACrB+B,WAAW,EAAC,OAAO;IAClBC,OAAK,EAAAC,SAAA,CAAQhC,QAAA,CAAAiC,eAAe;IAC7BlD,KAAK,EAAC,WAAW;IACjBmD,SAAS,EAAT;sDAEJ3C,YAAA,CAAiE4C,oBAAA;IAAtDC,IAAI,EAAC,SAAS;IAAEvC,OAAK,EAAEG,QAAA,CAAAiC;;sBAAiB,MAAEnC,MAAA,QAAAA,MAAA,O,iBAAF,IAAE,mB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}