{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, withKeys as _withKeys } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-container\"\n};\nconst _hoisted_2 = {\n  class: \"user-list\"\n};\nconst _hoisted_3 = {\n  class: \"user-card\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = {\n  class: \"chat-main\"\n};\nconst _hoisted_6 = {\n  class: \"messages\",\n  ref: \"messageContainer\"\n};\nconst _hoisted_7 = {\n  class: \"from\"\n};\nconst _hoisted_8 = {\n  class: \"bubble\"\n};\nconst _hoisted_9 = {\n  class: \"content\"\n};\nconst _hoisted_10 = {\n  class: \"time\"\n};\nconst _hoisted_11 = {\n  class: \"input-area\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_scrollbar = _resolveComponent(\"el-scrollbar\");\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 左侧用户列表 \"), _createElementVNode(\"aside\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[3] || (_cache[3] = _createElementVNode(\"h3\", null, \"聊天列表\", -1 /* CACHED */)), _createVNode(_component_el_scrollbar, {\n    class: \"user-scroll\"\n  }, {\n    default: _withCtx(() => [_createCommentVNode(\" 群聊 \"), _createElementVNode(\"div\", {\n      class: _normalizeClass([\"user-item\", {\n        active: $data.selectedUserId === null\n      }]),\n      onClick: _cache[0] || (_cache[0] = $event => $options.selectUser(null))\n    }, _cache[2] || (_cache[2] = [_createTextVNode(\" 群聊 \", -1 /* CACHED */), _createElementVNode(\"span\", {\n      class: \"status-dot online\"\n    }, null, -1 /* CACHED */)]), 2 /* CLASS */), _createCommentVNode(\" 用户列表 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.users, user => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        class: _normalizeClass([\"user-item\", {\n          active: $data.selectedUserId === user.id\n        }]),\n        key: user.id,\n        onClick: $event => $options.selectUser(user.id)\n      }, [_createTextVNode(_toDisplayString(user.username) + \" \", 1 /* TEXT */), _createElementVNode(\"span\", {\n        class: _normalizeClass([\"status-dot\", user.online ? 'online' : 'offline'])\n      }, null, 2 /* CLASS */)], 10 /* CLASS, PROPS */, _hoisted_4);\n    }), 128 /* KEYED_FRAGMENT */))]),\n    _: 1 /* STABLE */\n  })])]), _createCommentVNode(\" 右侧聊天区 \"), _createElementVNode(\"main\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredMessages, msg => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: msg.id || msg.tempId,\n      class: _normalizeClass(['message', msg.fromUserId === Number($data.userId) ? 'mine' : 'other'])\n    }, [_createElementVNode(\"span\", _hoisted_7, _toDisplayString(msg.fromUserId === Number($data.userId) ? '我' : $options.getUsername(msg.fromUserId)), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"span\", _hoisted_9, _toDisplayString(msg.content), 1 /* TEXT */)]), _createElementVNode(\"span\", _hoisted_10, _toDisplayString($options.formatTime(msg.createTime)), 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), _createCommentVNode(\" 输入框区域 \"), _createElementVNode(\"div\", _hoisted_11, [_createVNode(_component_el_input, {\n    modelValue: $data.inputMessage,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.inputMessage = $event),\n    placeholder: \"请输入消息\",\n    onKeyup: _withKeys($options.sendChatMessage, [\"enter\"]),\n    class: \"input-box\",\n    clearable: \"\"\n  }, null, 8 /* PROPS */, [\"modelValue\", \"onKeyup\"]), _createVNode(_component_el_button, {\n    type: \"primary\",\n    onClick: $options.sendChatMessage\n  }, {\n    default: _withCtx(() => _cache[4] || (_cache[4] = [_createTextVNode(\"发送\", -1 /* CACHED */)])),\n    _: 1 /* STABLE */,\n    __: [4]\n  }, 8 /* PROPS */, [\"onClick\"])])])]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_hoisted_3","_createVNode","_component_el_scrollbar","_normalizeClass","active","$data","selectedUserId","onClick","_cache","$event","$options","selectUser","_Fragment","_renderList","users","user","id","key","username","online","_hoisted_5","_hoisted_6","filteredMessages","msg","tempId","fromUserId","Number","userId","_hoisted_7","_toDisplayString","getUsername","_hoisted_8","_hoisted_9","content","_hoisted_10","formatTime","createTime","_hoisted_11","_component_el_input","inputMessage","placeholder","onKeyup","_withKeys","sendChatMessage","clearable","_component_el_button","type"],"sources":["D:\\Final\\springboot_egg\\egg-web\\src\\user\\ChatRoom.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <!-- 左侧用户列表 -->\r\n    <aside class=\"user-list\">\r\n      <div class=\"user-card\">\r\n        <h3>聊天列表</h3>\r\n        <el-scrollbar class=\"user-scroll\">\r\n          <!-- 群聊 -->\r\n          <div\r\n              class=\"user-item\"\r\n              :class=\"{ active: selectedUserId === null }\"\r\n              @click=\"selectUser(null)\"\r\n          >\r\n            群聊\r\n            <span class=\"status-dot online\"></span>\r\n          </div>\r\n\r\n          <!-- 用户列表 -->\r\n          <div\r\n              class=\"user-item\"\r\n              v-for=\"user in users\"\r\n              :key=\"user.id\"\r\n              :class=\"{ active: selectedUserId === user.id }\"\r\n              @click=\"selectUser(user.id)\"\r\n          >\r\n            {{ user.username }}\r\n            <span class=\"status-dot\" :class=\"user.online ? 'online' : 'offline'\"></span>\r\n          </div>\r\n        </el-scrollbar>\r\n      </div>\r\n    </aside>\r\n\r\n    <!-- 右侧聊天区 -->\r\n    <main class=\"chat-main\">\r\n      <div class=\"messages\" ref=\"messageContainer\">\r\n        <div\r\n            v-for=\"msg in filteredMessages\"\r\n            :key=\"msg.id || msg.tempId\"\r\n            :class=\"['message', msg.fromUserId === Number(userId) ? 'mine' : 'other']\"\r\n        >\r\n          <span class=\"from\">\r\n            {{ msg.fromUserId === Number(userId) ? '我' : getUsername(msg.fromUserId) }}\r\n          </span>\r\n          <div class=\"bubble\">\r\n            <span class=\"content\">{{ msg.content }}</span>\r\n          </div>\r\n          <span class=\"time\">{{ formatTime(msg.createTime) }}</span>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 输入框区域 -->\r\n      <div class=\"input-area\">\r\n        <el-input\r\n            v-model=\"inputMessage\"\r\n            placeholder=\"请输入消息\"\r\n            @keyup.enter=\"sendChatMessage\"\r\n            class=\"input-box\"\r\n            clearable\r\n        ></el-input>\r\n        <el-button type=\"primary\" @click=\"sendChatMessage\">发送</el-button>\r\n      </div>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { connect, sendMessage } from '@/utils/chat'\r\nimport egg from '@/utils/egg'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'ChatRoom',\r\n  data() {\r\n    return {\r\n      userId: null,\r\n      users: [],\r\n      selectedUserId: null,\r\n      messages: [],\r\n      inputMessage: ''\r\n    }\r\n  },\r\n  computed: {\r\n    filteredMessages() {\r\n      return this.messages\r\n          .filter(msg => {\r\n            if (this.selectedUserId === null) return !msg.toUserId\r\n            return (\r\n                (msg.fromUserId === this.selectedUserId && msg.toUserId === Number(this.userId)) ||\r\n                (msg.fromUserId === Number(this.userId) && msg.toUserId === this.selectedUserId)\r\n            )\r\n          })\r\n          .sort((a, b) => new Date(a.createTime) - new Date(b.createTime))\r\n    }\r\n  },\r\n  async mounted() {\r\n    this.userId = Number(sessionStorage.getItem('userId'))\r\n    if (!this.userId) {\r\n      ElMessage.error('请先登录')\r\n      this.$router.push('/login')\r\n      return\r\n    }\r\n\r\n    // 拉取全部用户并标记在线状态\r\n    await this.fetchAllUsers()\r\n\r\n    // 加载本地缓存（仅私聊消息，包括自己发给自己的）\r\n    this.loadMessagesFromLocal()\r\n\r\n    // 拉取群聊消息（每次登录都拉取）\r\n    try {\r\n      const groupRes = await egg.get('/chat/group-msg')\r\n      this.mergeMessages(groupRes.data)\r\n    } catch (e) {\r\n      console.error('拉取群聊消息失败', e)\r\n    }\r\n\r\n    // 拉取私聊离线消息\r\n    try {\r\n      const offlineRes = await egg.get('/user/offline-msg', { params: { userId: this.userId } })\r\n      this.mergeMessages(offlineRes.data)\r\n    } catch (e) {\r\n      console.error('拉取离线消息失败', e)\r\n    }\r\n\r\n    // 保存合并后的消息到 localStorage（仅私聊）\r\n    this.saveMessagesToLocal()\r\n\r\n    // 连接 WebSocket\r\n    connect(this.userId, this.onMessageReceived)\r\n\r\n    // 滚动到底部\r\n    this.scrollToBottom()\r\n  },\r\n  methods: {\r\n    getStorageKey() {\r\n      return `chat_messages_user_${this.userId}`\r\n    },\r\n\r\n    // 缓存私聊消息，包括自己发给自己的\r\n    saveMessagesToLocal() {\r\n      const grouped = {}\r\n      this.messages.forEach(msg => {\r\n        if (!msg.toUserId) return // 只忽略群聊\r\n\r\n        const sessionId = msg.fromUserId === this.userId ? msg.toUserId : msg.fromUserId\r\n        if (!grouped[sessionId]) grouped[sessionId] = []\r\n\r\n        if (!grouped[sessionId].some(m => (m.id && m.id === msg.id) || (m.tempId && m.tempId === msg.tempId))) {\r\n          grouped[sessionId].push(msg)\r\n        }\r\n      })\r\n      localStorage.setItem(this.getStorageKey(), JSON.stringify(grouped))\r\n    },\r\n\r\n    loadMessagesFromLocal() {\r\n      const key = this.getStorageKey()\r\n      const grouped = JSON.parse(localStorage.getItem(key) || '{}')\r\n      const loaded = []\r\n      Object.values(grouped).forEach(arr => {\r\n        arr.forEach(msg => {\r\n          const exists = loaded.find(\r\n              m => (m.id && m.id === msg.id) || (m.tempId && m.tempId === msg.tempId)\r\n          )\r\n          if (!exists) loaded.push(msg)\r\n        })\r\n      })\r\n      this.messages = loaded\r\n    },\r\n\r\n    mergeMessages(newMsgs) {\r\n      newMsgs.forEach(msg => {\r\n        const key = msg.id\r\n            ? `id_${msg.id}`\r\n            : msg.tempId\r\n                ? `temp_${msg.tempId}`\r\n                : `key_${msg.fromUserId}_${msg.toUserId || 'group'}_${msg.content}`\r\n\r\n        const exists = this.messages.find(m => {\r\n          const mKey = m.id\r\n              ? `id_${m.id}`\r\n              : m.tempId\r\n                  ? `temp_${m.tempId}`\r\n                  : `key_${m.fromUserId}_${m.toUserId || 'group'}_${m.content}`\r\n          return mKey === key\r\n        })\r\n\r\n        if (!exists) {\r\n          this.messages.push(msg)\r\n        } else if (!exists.id && msg.id) {\r\n          const index = this.messages.indexOf(exists)\r\n          this.$set(this.messages, index, { ...msg })\r\n        }\r\n      })\r\n    },\r\n\r\n    scrollToBottom() {\r\n      this.$nextTick(() => {\r\n        const container = this.$refs.messageContainer\r\n        if (container) container.scrollTop = container.scrollHeight\r\n      })\r\n    },\r\n\r\n    // 统一去重逻辑，群聊/私聊/自己发自己都适用\r\n    onMessageReceived(msg) {\r\n      const existing = this.messages.find(\r\n          m => (m.tempId && m.tempId === msg.tempId) || (m.id && m.id === msg.id)\r\n      )\r\n      if (existing) {\r\n        const index = this.messages.indexOf(existing)\r\n        this.$set(this.messages, index, { ...existing, ...msg })\r\n      } else {\r\n        this.messages.push(msg)\r\n      }\r\n\r\n      this.saveMessagesToLocal() // 缓存私聊消息\r\n      this.scrollToBottom()\r\n    },\r\n\r\n    selectUser(userId) {\r\n      this.selectedUserId = userId\r\n      this.scrollToBottom()\r\n    },\r\n\r\n    // 不再在前端临时 push，等待服务器广播\r\n    sendChatMessage() {\r\n      const content = this.inputMessage.trim()\r\n      if (!content) return\r\n\r\n      const tempId = Date.now() + '_' + Math.random().toString(16).slice(2)\r\n      const payload = {\r\n        fromUserId: this.userId,\r\n        toUserId: this.selectedUserId,\r\n        content,\r\n        tempId\r\n      }\r\n\r\n      this.inputMessage = ''\r\n      sendMessage(payload.fromUserId, payload.toUserId, payload.content, tempId)\r\n    },\r\n\r\n    formatTime(datetime) {\r\n      return datetime ? new Date(datetime).toLocaleTimeString() : ''\r\n    },\r\n\r\n    async fetchAllUsers() {\r\n      try {\r\n        const res = await egg.get('/user')\r\n        this.users = res.data.map(u => ({ ...u, online: false }))\r\n\r\n        const onlineRes = await egg.get('/user/online')\r\n        const onlineSet = new Set(onlineRes.data.map(id => Number(id)))\r\n\r\n        this.users.forEach(u => {\r\n          if (u.id === this.userId) {\r\n            u.online = true // 自己总是在线\r\n          } else {\r\n            u.online = onlineSet.has(u.id)\r\n          }\r\n        })\r\n      } catch (err) {\r\n        console.error('获取用户列表失败', err)\r\n        ElMessage.error('获取用户列表失败')\r\n      }\r\n    },\r\n\r\n    getUsername(id) {\r\n      const user = this.users.find(u => u.id === id)\r\n      return user ? user.username : '未知'\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container {\r\n  display: flex;\r\n  height: 100vh;\r\n  width: 100vw;\r\n}\r\n\r\n/* 左侧用户列表 */\r\n.user-list {\r\n  width: 20%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n  background-color: #fafafa;\r\n  box-sizing: border-box;\r\n  height: 100%;\r\n}\r\n\r\n.user-card {\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1;\r\n  height: 100%;\r\n}\r\n\r\n.user-scroll {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  margin-top: 10px;\r\n}\r\n\r\n.user-item {\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  background-color: #fff;\r\n  margin-bottom: 6px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.user-item.active {\r\n  background-color: #bae7ff;\r\n  border-color: #91d5ff;\r\n}\r\n\r\n.status-dot {\r\n  width: 10px;\r\n  height: 10px;\r\n  border-radius: 50%;\r\n  display: inline-block;\r\n}\r\n\r\n.status-dot.online {\r\n  background-color: #52c41a;\r\n}\r\n\r\n.status-dot.offline {\r\n  background-color: #f5222d;\r\n}\r\n\r\n/* 右侧聊天区 */\r\n.chat-main {\r\n  width: 80%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n  box-sizing: border-box;\r\n  background-color: #f0f2f5;\r\n  height: 100%;\r\n}\r\n\r\n.messages {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 10px;\r\n  background-color: #ffffff;\r\n  border-radius: 8px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\n.input-area {\r\n  display: flex;\r\n  gap: 10px;\r\n  padding-top: 10px;\r\n  height: 50px;\r\n  border-top: 1px solid #ddd;\r\n}\r\n\r\n.input-box {\r\n  flex: 1;\r\n}\r\n\r\n.message {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.message.mine {\r\n  align-items: flex-end;\r\n}\r\n\r\n.message.other {\r\n  align-items: flex-start;\r\n}\r\n\r\n.bubble {\r\n  max-width: 70%;\r\n  padding: 10px 14px;\r\n  border-radius: 16px;\r\n  word-wrap: break-word;\r\n  position: relative;\r\n  background-color: #e6f7ff;\r\n}\r\n\r\n.message.mine .bubble {\r\n  background-color: #91d5ff;\r\n  color: #000;\r\n}\r\n\r\n.message.mine .bubble::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  right: -8px;\r\n  top: 10px;\r\n  border-width: 8px 0 8px 8px;\r\n  border-style: solid;\r\n  border-color: transparent transparent transparent #91d5ff;\r\n}\r\n\r\n.message.other .bubble::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  left: -8px;\r\n  top: 10px;\r\n  border-width: 8px 8px 8px 0;\r\n  border-style: solid;\r\n  border-color: transparent #e6f7ff transparent transparent;\r\n}\r\n\r\n.time {\r\n  font-size: 12px;\r\n  color: #999;\r\n  margin-top: 2px;\r\n}\r\n\r\n.message.mine .time {\r\n  text-align: right;\r\n}\r\n\r\n.message.other .time {\r\n  text-align: left;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}