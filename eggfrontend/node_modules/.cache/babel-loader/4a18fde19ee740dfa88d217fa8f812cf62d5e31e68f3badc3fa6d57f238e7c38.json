{"ast":null,"code":"import { ref, reactive, onMounted } from \"vue\";\nimport axios from \"axios\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\nconst BASE_URL = \"http://localhost:8090\";\nexport default {\n  name: \"UserList\",\n  setup() {\n    const criteria = reactive({\n      username: null,\n      email: null,\n      age: null,\n      gender: null\n    });\n    const usernameList = ref([]);\n    const emailList = ref([]);\n    const ageList = ref([]);\n    const allUsers = ref([]);\n    const pagedUsers = ref([]);\n    const page = ref(1);\n    const pageSize = ref(10);\n    const total = ref(0);\n    const totalPages = ref(1);\n    const dialogVisible = ref(0);\n    const dialogTitle = ref(\"新增用户\");\n    const formUser = reactive({\n      id: null,\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      age: null,\n      gender: 1\n    });\n    const buildQueryParams = () => {\n      const params = {\n        page: page.value,\n        pageSize: pageSize.value\n      };\n      if (criteria.username) params.username = criteria.username;\n      if (criteria.email) params.email = criteria.email;\n      if (criteria.age) params.age = criteria.age;\n      if (criteria.gender !== null && criteria.gender !== \"\") params.gender = criteria.gender; // Boolean\n      return params;\n    };\n    const fetchOptions = async () => {\n      try {\n        const [uRes, eRes, aRes] = await Promise.all([axios.get(`${BASE_URL}/user/options/username`), axios.get(`${BASE_URL}/user/options/email`), axios.get(`${BASE_URL}/user/options/age`)]);\n        usernameList.value = Array.isArray(uRes.data) ? uRes.data : [];\n        emailList.value = Array.isArray(eRes.data) ? eRes.data : [];\n        ageList.value = Array.isArray(aRes.data) ? aRes.data : [];\n      } catch (err) {\n        ElMessage.error(\"获取下拉选项失败: \" + err.message);\n      }\n    };\n    const fetchAllOnce = async () => {\n      try {\n        let res;\n        try {\n          res = await axios.get(`${BASE_URL}/user/all`);\n        } catch {\n          res = await axios.get(`${BASE_URL}/user/query`, {\n            params: {\n              page: 1,\n              pageSize: 100000\n            }\n          });\n        }\n        allUsers.value = Array.isArray(res.data) ? res.data : res.data.data || [];\n        total.value = allUsers.value.length;\n        totalPages.value = Math.max(1, Math.ceil(total.value / pageSize.value));\n        pagedUsers.value = allUsers.value.slice(0, pageSize.value);\n      } catch (err) {\n        ElMessage.error(\"首次加载用户失败: \" + err.message);\n      }\n    };\n    const fetchUsers = async () => {\n      try {\n        const res = await axios.get(`${BASE_URL}/user/query`, {\n          params: buildQueryParams()\n        });\n        pagedUsers.value = Array.isArray(res.data.data) ? res.data.data : [];\n        total.value = res.data.total || 0;\n        totalPages.value = Math.max(1, Math.ceil(total.value / pageSize.value));\n      } catch (err) {\n        ElMessage.error(\"查询用户失败: \" + err.message);\n      }\n    };\n    const onQuery = async () => {\n      page.value = 1;\n      await fetchUsers();\n    };\n    const changePage = async p => {\n      page.value = p;\n      await fetchUsers();\n    };\n    const openDialog = (type, user = null) => {\n      dialogTitle.value = type === \"add\" ? \"新增用户\" : \"编辑用户\";\n      if (user) {\n        formUser.id = user.id;\n        formUser.username = user.username;\n        formUser.email = user.email;\n        formUser.password = \"\";\n        formUser.age = user.age;\n        formUser.gender = user.gender; // Boolean\n      } else {\n        formUser.id = null;\n        formUser.username = \"\";\n        formUser.email = \"\";\n        formUser.password = \"\";\n        formUser.age = null;\n        formUser.gender = 1;\n      }\n      dialogVisible.value = 1;\n    };\n    const saveUser = async () => {\n      try {\n        if (formUser.id) {\n          await axios.put(`${BASE_URL}/user/${formUser.id}`, {\n            ...formUser\n          });\n          ElMessage.success(\"更新成功\");\n        } else {\n          await axios.post(`${BASE_URL}/user`, {\n            ...formUser\n          });\n          ElMessage.success(\"新增成功\");\n        }\n        dialogVisible.value = 0;\n        await fetchOptions();\n        await fetchUsers();\n      } catch (err) {\n        ElMessage.error(\"保存失败: \" + err.message);\n      }\n    };\n    const confirmDelete = async id => {\n      try {\n        await ElMessageBox.confirm(\"确定要删除该用户吗？\", \"删除确认\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        });\n        await axios.delete(`${BASE_URL}/user/${id}`);\n        ElMessage.success(\"删除成功\");\n        await fetchOptions();\n        await fetchUsers();\n      } catch (err) {\n        if (err !== \"cancel\") ElMessage.error(\"删除失败: \" + err.message);\n      }\n    };\n    onMounted(async () => {\n      await fetchOptions();\n      await fetchAllOnce();\n    });\n    return {\n      criteria,\n      usernameList,\n      emailList,\n      ageList,\n      pagedUsers,\n      page,\n      pageSize,\n      total,\n      totalPages,\n      dialogVisible,\n      dialogTitle,\n      formUser,\n      onQuery,\n      changePage,\n      openDialog,\n      saveUser,\n      confirmDelete\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","axios","ElMessage","ElMessageBox","BASE_URL","name","setup","criteria","username","email","age","gender","usernameList","emailList","ageList","allUsers","pagedUsers","page","pageSize","total","totalPages","dialogVisible","dialogTitle","formUser","id","password","buildQueryParams","params","value","fetchOptions","uRes","eRes","aRes","Promise","all","get","Array","isArray","data","err","error","message","fetchAllOnce","res","length","Math","max","ceil","slice","fetchUsers","onQuery","changePage","p","openDialog","type","user","saveUser","put","success","post","confirmDelete","confirm","confirmButtonText","cancelButtonText","delete"],"sources":["D:\\Final\\springboot_egg\\egg-web\\src\\user\\UserList.vue"],"sourcesContent":["<template>\r\n  <div class=\"user-list\">\r\n    <el-card shadow=\"hover\">\r\n      <h2>用户管理</h2>\r\n\r\n      <!-- 条件筛选 -->\r\n      <div class=\"filters\">\r\n        <el-select class=\"filter-item\" v-model=\"criteria.username\" placeholder=\"全部用户名\" clearable>\r\n          <el-option v-for=\"u in usernameList\" :key=\"u\" :label=\"u\" :value=\"u\"></el-option>\r\n        </el-select>\r\n\r\n        <el-select class=\"filter-item\" v-model=\"criteria.email\" placeholder=\"全部邮箱\" clearable>\r\n          <el-option v-for=\"e in emailList\" :key=\"e\" :label=\"e\" :value=\"e\"></el-option>\r\n        </el-select>\r\n\r\n        <el-select class=\"filter-item\" v-model=\"criteria.age\" placeholder=\"全部年龄\" clearable>\r\n          <el-option v-for=\"a in ageList\" :key=\"a\" :label=\"a\" :value=\"a\"></el-option>\r\n        </el-select>\r\n\r\n        <!-- 性别筛选 -->\r\n        <el-select class=\"filter-item\" v-model=\"criteria.gender\" placeholder=\"全部性别\" clearable>\r\n          <el-option label=\"男\" :value=\"1\"></el-option>\r\n          <el-option label=\"女\" :value=\"0\"></el-option>\r\n        </el-select>\r\n\r\n        <el-button class=\"filter-item\" type=\"primary\" @click=\"onQuery\">查询</el-button>\r\n        <el-button class=\"filter-item\" type=\"success\" @click=\"openDialog('add')\">新增用户</el-button>\r\n      </div>\r\n\r\n      <!-- 用户表格 -->\r\n      <el-table :data=\"pagedUsers\" style=\"width: 100%\" stripe>\r\n        <el-table-column prop=\"id\" label=\"ID\" width=\"60\" />\r\n        <el-table-column prop=\"username\" label=\"用户名\" />\r\n        <el-table-column prop=\"email\" label=\"邮箱\" />\r\n        <el-table-column prop=\"age\" label=\"年龄\" width=\"80\" />\r\n        <el-table-column prop=\"gender\" label=\"性别\" width=\"80\">\r\n          <template #default=\"scope\">\r\n            {{ scope.row.gender ? '男' : '女' }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\" width=\"220\">\r\n          <template #default=\"scope\">\r\n            <el-button type=\"primary\" size=\"mini\" @click=\"openDialog('edit', scope.row)\">编辑</el-button>\r\n            <el-button type=\"danger\" size=\"mini\" @click=\"confirmDelete(scope.row.id)\">删除</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n      <!-- 分页 -->\r\n      <div class=\"pagination-info\">\r\n        当前页: {{ page }} / {{ totalPages }} ，总条数: {{ total }}\r\n      </div>\r\n      <el-pagination\r\n          background\r\n          layout=\"prev, pager, next\"\r\n          :page-size=\"pageSize\"\r\n          :current-page=\"page\"\r\n          :total=\"total\"\r\n          @current-change=\"changePage\"\r\n      ></el-pagination>\r\n    </el-card>\r\n\r\n    <!-- 新增/编辑用户弹窗 -->\r\n    <el-dialog :title=\"dialogTitle\" v-model=\"dialogVisible\">\r\n      <el-form :model=\"formUser\" label-width=\"80px\">\r\n        <el-form-item label=\"用户名\">\r\n          <el-input v-model=\"formUser.username\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"邮箱\">\r\n          <el-input v-model=\"formUser.email\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"密码\">\r\n          <el-input v-model=\"formUser.password\" type=\"password\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"年龄\">\r\n          <el-input v-model.number=\"formUser.age\" type=\"number\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"性别\">\r\n          <el-select v-model=\"formUser.gender\">\r\n            <el-option label=\"男\" :value=\"1\"></el-option>\r\n            <el-option label=\"女\" :value=\"0\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n      </el-form>\r\n\r\n      <template #footer>\r\n        <el-button @click=\"dialogVisible = 0\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"saveUser\">保存</el-button>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, onMounted } from \"vue\";\r\nimport axios from \"axios\";\r\nimport { ElMessage, ElMessageBox } from \"element-plus\";\r\n\r\nconst BASE_URL = \"http://localhost:8090\";\r\n\r\nexport default {\r\n  name: \"UserList\",\r\n  setup() {\r\n    const criteria = reactive({ username: null, email: null, age: null, gender: null });\r\n    const usernameList = ref([]);\r\n    const emailList = ref([]);\r\n    const ageList = ref([]);\r\n\r\n    const allUsers = ref([]);\r\n    const pagedUsers = ref([]);\r\n    const page = ref(1);\r\n    const pageSize = ref(10);\r\n    const total = ref(0);\r\n    const totalPages = ref(1);\r\n\r\n    const dialogVisible = ref(0);\r\n    const dialogTitle = ref(\"新增用户\");\r\n    const formUser = reactive({ id: null, username: \"\", email: \"\", password: \"\", age: null, gender: 1 });\r\n\r\n    const buildQueryParams = () => {\r\n      const params = { page: page.value, pageSize: pageSize.value };\r\n      if (criteria.username) params.username = criteria.username;\r\n      if (criteria.email) params.email = criteria.email;\r\n      if (criteria.age) params.age = criteria.age;\r\n      if (criteria.gender !== null && criteria.gender !== \"\") params.gender = criteria.gender; // Boolean\r\n      return params;\r\n    };\r\n\r\n    const fetchOptions = async () => {\r\n      try {\r\n        const [uRes, eRes, aRes] = await Promise.all([\r\n          axios.get(`${BASE_URL}/user/options/username`),\r\n          axios.get(`${BASE_URL}/user/options/email`),\r\n          axios.get(`${BASE_URL}/user/options/age`),\r\n        ]);\r\n        usernameList.value = Array.isArray(uRes.data) ? uRes.data : [];\r\n        emailList.value = Array.isArray(eRes.data) ? eRes.data : [];\r\n        ageList.value = Array.isArray(aRes.data) ? aRes.data : [];\r\n      } catch (err) {\r\n        ElMessage.error(\"获取下拉选项失败: \" + err.message);\r\n      }\r\n    };\r\n\r\n    const fetchAllOnce = async () => {\r\n      try {\r\n        let res;\r\n        try {\r\n          res = await axios.get(`${BASE_URL}/user/all`);\r\n        } catch {\r\n          res = await axios.get(`${BASE_URL}/user/query`, { params: { page: 1, pageSize: 100000 } });\r\n        }\r\n        allUsers.value = Array.isArray(res.data) ? res.data : res.data.data || [];\r\n        total.value = allUsers.value.length;\r\n        totalPages.value = Math.max(1, Math.ceil(total.value / pageSize.value));\r\n        pagedUsers.value = allUsers.value.slice(0, pageSize.value);\r\n      } catch (err) {\r\n        ElMessage.error(\"首次加载用户失败: \" + err.message);\r\n      }\r\n    };\r\n\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const res = await axios.get(`${BASE_URL}/user/query`, { params: buildQueryParams() });\r\n        pagedUsers.value = Array.isArray(res.data.data) ? res.data.data : [];\r\n        total.value = res.data.total || 0;\r\n        totalPages.value = Math.max(1, Math.ceil(total.value / pageSize.value));\r\n      } catch (err) {\r\n        ElMessage.error(\"查询用户失败: \" + err.message);\r\n      }\r\n    };\r\n\r\n    const onQuery = async () => {\r\n      page.value = 1;\r\n      await fetchUsers();\r\n    };\r\n\r\n    const changePage = async (p) => {\r\n      page.value = p;\r\n      await fetchUsers();\r\n    };\r\n\r\n    const openDialog = (type, user = null) => {\r\n      dialogTitle.value = type === \"add\" ? \"新增用户\" : \"编辑用户\";\r\n      if (user) {\r\n        formUser.id = user.id;\r\n        formUser.username = user.username;\r\n        formUser.email = user.email;\r\n        formUser.password = \"\";\r\n        formUser.age = user.age;\r\n        formUser.gender = user.gender; // Boolean\r\n      } else {\r\n        formUser.id = null;\r\n        formUser.username = \"\";\r\n        formUser.email = \"\";\r\n        formUser.password = \"\";\r\n        formUser.age = null;\r\n        formUser.gender = 1;\r\n      }\r\n      dialogVisible.value = 1;\r\n    };\r\n\r\n    const saveUser = async () => {\r\n      try {\r\n        if (formUser.id) {\r\n          await axios.put(`${BASE_URL}/user/${formUser.id}`, { ...formUser });\r\n          ElMessage.success(\"更新成功\");\r\n        } else {\r\n          await axios.post(`${BASE_URL}/user`, { ...formUser });\r\n          ElMessage.success(\"新增成功\");\r\n        }\r\n        dialogVisible.value = 0;\r\n        await fetchOptions();\r\n        await fetchUsers();\r\n      } catch (err) {\r\n        ElMessage.error(\"保存失败: \" + err.message);\r\n      }\r\n    };\r\n\r\n    const confirmDelete = async (id) => {\r\n      try {\r\n        await ElMessageBox.confirm(\"确定要删除该用户吗？\", \"删除确认\", {\r\n          confirmButtonText: \"确定\",\r\n          cancelButtonText: \"取消\",\r\n          type: \"warning\",\r\n        });\r\n        await axios.delete(`${BASE_URL}/user/${id}`);\r\n        ElMessage.success(\"删除成功\");\r\n        await fetchOptions();\r\n        await fetchUsers();\r\n      } catch (err) {\r\n        if (err !== \"cancel\") ElMessage.error(\"删除失败: \" + err.message);\r\n      }\r\n    };\r\n\r\n    onMounted(async () => {\r\n      await fetchOptions();\r\n      await fetchAllOnce();\r\n    });\r\n\r\n    return {\r\n      criteria,\r\n      usernameList,\r\n      emailList,\r\n      ageList,\r\n      pagedUsers,\r\n      page,\r\n      pageSize,\r\n      total,\r\n      totalPages,\r\n      dialogVisible,\r\n      dialogTitle,\r\n      formUser,\r\n      onQuery,\r\n      changePage,\r\n      openDialog,\r\n      saveUser,\r\n      confirmDelete,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.user-list { padding: 20px; }\r\n\r\n.filters {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 16px;\r\n  align-items: center;\r\n}\r\n\r\n.filter-item {\r\n  flex: 1 1 220px;\r\n  max-width: 300px;\r\n}\r\n\r\n.el-select,\r\n.el-input {\r\n  width: 100% !important;\r\n  height: 40px;\r\n}\r\n\r\n.el-table th, .el-table td { text-align: center; }\r\n\r\n.pagination-info {\r\n  margin: 10px 0;\r\n  text-align: right;\r\n  font-weight: bold;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}