{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport { connect, sendMessage } from '@/utils/chat';\nimport egg from '@/utils/egg';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'ChatRoom',\n  data() {\n    return {\n      userId: null,\n      users: [],\n      selectedUserId: null,\n      messages: [],\n      inputMessage: ''\n    };\n  },\n  mounted() {\n    this.userId = sessionStorage.getItem('userId');\n    if (!this.userId) {\n      ElMessage.error('请先登录');\n      this.$router.push('/login');\n      return;\n    }\n\n    // 建立 WebSocket 连接\n    connect(Number(this.userId), this.onMessageReceived);\n\n    // 获取在线用户列表\n    this.fetchOnlineUsers();\n  },\n  methods: {\n    // 收到消息\n    onMessageReceived(msg) {\n      // 如果是当前选中聊天室的消息才显示\n      if (this.selectedUserId === null && !msg.toUserId) {\n        this.messages.push(msg);\n      } else if (this.selectedUserId === msg.fromUserId || this.selectedUserId === msg.toUserId) {\n        this.messages.push(msg);\n      }\n      this.$nextTick(() => {\n        const container = this.$refs.messageContainer;\n        container.scrollTop = container.scrollHeight;\n      });\n      if (msg.fromUserId === Number(this.userId)) {\n        ElMessage.success('消息发送成功');\n      }\n    },\n    // 选择聊天对象\n    selectUser(userId) {\n      this.selectedUserId = userId;\n      this.messages = []; // 切换聊天室时清空消息，可改为拉取历史消息\n    },\n    // 发送消息\n    sendChatMessage() {\n      const content = this.inputMessage.trim();\n      if (!content) return;\n      const payload = {\n        fromUserId: Number(this.userId),\n        toUserId: this.selectedUserId ? Number(this.selectedUserId) : null,\n        content,\n        tempId: Date.now() // 临时 id\n      };\n      sendMessage(payload.fromUserId, payload.toUserId, payload.content);\n      this.messages.push(payload); // 前端立即显示\n      this.inputMessage = '';\n    },\n    // 格式化时间\n    formatTime(datetime) {\n      if (!datetime) return '';\n      const d = new Date(datetime);\n      return d.toLocaleTimeString();\n    },\n    // 获取在线用户\n    fetchOnlineUsers() {\n      egg.get('/user').then(res => {\n        this.users = res.data; // 不过滤自己\n      }).catch(err => {\n        console.error(err);\n        ElMessage.error('获取用户列表失败');\n      });\n    },\n    // 根据 userId 获取用户名\n    getUsername(id) {\n      const user = this.users.find(u => u.id === id);\n      return user ? user.username : '未知';\n    }\n  }\n};","map":{"version":3,"names":["connect","sendMessage","egg","ElMessage","name","data","userId","users","selectedUserId","messages","inputMessage","mounted","sessionStorage","getItem","error","$router","push","Number","onMessageReceived","fetchOnlineUsers","methods","msg","toUserId","fromUserId","$nextTick","container","$refs","messageContainer","scrollTop","scrollHeight","success","selectUser","sendChatMessage","content","trim","payload","tempId","Date","now","formatTime","datetime","d","toLocaleTimeString","get","then","res","catch","err","console","getUsername","id","user","find","u","username"],"sources":["D:\\Final\\springboot_egg\\egg-web\\src\\user\\ChatRoom.vue"],"sourcesContent":["<template>\r\n  <el-container class=\"chat-container\">\r\n    <!-- 左侧用户列表 -->\r\n    <el-aside width=\"220px\" class=\"user-list\">\r\n      <el-card class=\"user-card\">\r\n        <h3>聊天列表</h3>\r\n        <el-scrollbar class=\"user-scroll\">\r\n          <el-list>\r\n            <!-- 群聊 -->\r\n            <el-list-item\r\n                :class=\"{ active: selectedUserId === null }\"\r\n                @click=\"selectUser(null)\"\r\n            >\r\n              群聊\r\n            </el-list-item>\r\n\r\n            <!-- 在线用户列表 -->\r\n            <el-list-item\r\n                v-for=\"user in users\"\r\n                :key=\"user.id\"\r\n                :class=\"{ active: selectedUserId === user.id }\"\r\n                @click=\"selectUser(user.id)\"\r\n            >\r\n              {{ user.username }}\r\n            </el-list-item>\r\n          </el-list>\r\n        </el-scrollbar>\r\n      </el-card>\r\n    </el-aside>\r\n\r\n    <!-- 右侧聊天框 -->\r\n    <el-main class=\"chat-main\">\r\n      <el-card class=\"chat-card\">\r\n        <div class=\"messages\" ref=\"messageContainer\">\r\n          <div\r\n              v-for=\"msg in messages\"\r\n              :key=\"msg.id || msg.tempId\"\r\n              :class=\"['message', msg.fromUserId === Number(userId) ? 'mine' : 'other']\"\r\n          >\r\n            <span class=\"from\">\r\n              {{ msg.fromUserId === Number(userId) ? '我' : getUsername(msg.fromUserId) }}\r\n            </span>：\r\n            <span class=\"content\">{{ msg.content }}</span>\r\n            <span class=\"time\">{{ formatTime(msg.createTime) }}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"input-area\">\r\n          <el-input\r\n              v-model=\"inputMessage\"\r\n              placeholder=\"请输入消息\"\r\n              @keyup.enter=\"sendChatMessage\"\r\n              clearable\r\n          ></el-input>\r\n          <el-button type=\"primary\" @click=\"sendChatMessage\">发送</el-button>\r\n        </div>\r\n      </el-card>\r\n    </el-main>\r\n  </el-container>\r\n</template>\r\n\r\n<script>\r\nimport { connect, sendMessage } from '@/utils/chat'\r\nimport egg from '@/utils/egg'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'ChatRoom',\r\n  data() {\r\n    return {\r\n      userId: null,\r\n      users: [],\r\n      selectedUserId: null,\r\n      messages: [],\r\n      inputMessage: ''\r\n    }\r\n  },\r\n  mounted() {\r\n    this.userId = sessionStorage.getItem('userId')\r\n    if (!this.userId) {\r\n      ElMessage.error('请先登录')\r\n      this.$router.push('/login')\r\n      return\r\n    }\r\n\r\n    // 建立 WebSocket 连接\r\n    connect(Number(this.userId), this.onMessageReceived)\r\n\r\n    // 获取在线用户列表\r\n    this.fetchOnlineUsers()\r\n  },\r\n  methods: {\r\n    // 收到消息\r\n    onMessageReceived(msg) {\r\n      // 如果是当前选中聊天室的消息才显示\r\n      if (this.selectedUserId === null && !msg.toUserId) {\r\n        this.messages.push(msg)\r\n      } else if (this.selectedUserId === msg.fromUserId || this.selectedUserId === msg.toUserId) {\r\n        this.messages.push(msg)\r\n      }\r\n      this.$nextTick(() => {\r\n        const container = this.$refs.messageContainer\r\n        container.scrollTop = container.scrollHeight\r\n      })\r\n      if (msg.fromUserId === Number(this.userId)) {\r\n        ElMessage.success('消息发送成功')\r\n      }\r\n    },\r\n\r\n    // 选择聊天对象\r\n    selectUser(userId) {\r\n      this.selectedUserId = userId\r\n      this.messages = [] // 切换聊天室时清空消息，可改为拉取历史消息\r\n    },\r\n\r\n    // 发送消息\r\n    sendChatMessage() {\r\n      const content = this.inputMessage.trim()\r\n      if (!content) return\r\n\r\n      const payload = {\r\n        fromUserId: Number(this.userId),\r\n        toUserId: this.selectedUserId ? Number(this.selectedUserId) : null,\r\n        content,\r\n        tempId: Date.now() // 临时 id\r\n      }\r\n\r\n      sendMessage(payload.fromUserId, payload.toUserId, payload.content)\r\n      this.messages.push(payload) // 前端立即显示\r\n      this.inputMessage = ''\r\n    },\r\n\r\n    // 格式化时间\r\n    formatTime(datetime) {\r\n      if (!datetime) return ''\r\n      const d = new Date(datetime)\r\n      return d.toLocaleTimeString()\r\n    },\r\n\r\n    // 获取在线用户\r\n    fetchOnlineUsers() {\r\n      egg.get('/user')\r\n          .then(res => {\r\n            this.users = res.data // 不过滤自己\r\n          })\r\n          .catch(err => {\r\n            console.error(err)\r\n            ElMessage.error('获取用户列表失败')\r\n          })\r\n    },\r\n\r\n    // 根据 userId 获取用户名\r\n    getUsername(id) {\r\n      const user = this.users.find(u => u.id === id)\r\n      return user ? user.username : '未知'\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container {\r\n  height: 90vh;\r\n  display: flex;\r\n}\r\n\r\n.user-list {\r\n  padding: 10px;\r\n}\r\n\r\n.user-card {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.user-scroll {\r\n  max-height: 80vh;\r\n  margin-top: 10px;\r\n}\r\n\r\n.el-list-item {\r\n  padding: 8px;\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.el-list-item.active {\r\n  background-color: #e6f7ff;\r\n}\r\n\r\n.chat-main {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n  flex: 1;\r\n}\r\n\r\n.chat-card {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n}\r\n\r\n.messages {\r\n  flex: 1;\r\n  padding: 10px;\r\n  overflow-y: auto;\r\n  background-color: #f9f9f9;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.message {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.message.mine {\r\n  text-align: right;\r\n}\r\n\r\n.message .from {\r\n  font-weight: bold;\r\n  margin-right: 5px;\r\n}\r\n\r\n.message .time {\r\n  font-size: 12px;\r\n  color: #888;\r\n  margin-left: 5px;\r\n}\r\n\r\n.input-area {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}