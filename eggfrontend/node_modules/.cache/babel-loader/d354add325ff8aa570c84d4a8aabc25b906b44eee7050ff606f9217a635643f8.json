{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { connect, sendMessage } from '@/utils/chat';\nimport axios from 'axios';\nexport default {\n  name: 'ChatRoom',\n  data() {\n    return {\n      userId: null,\n      users: [],\n      selectedUserId: null,\n      messages: [],\n      inputMessage: ''\n    };\n  },\n  created() {\n    this.userId = sessionStorage.getItem('userId');\n    if (!this.userId) {\n      this.$message.error('请先登录');\n      this.$router.push('/login');\n      return;\n    }\n\n    // 建立 WebSocket 连接\n    connect(this.userId, this.onMessageReceived);\n\n    // 获取在线用户列表\n    this.fetchOnlineUsers();\n  },\n  methods: {\n    onMessageReceived(msg) {\n      this.messages.push(msg);\n      this.$nextTick(() => {\n        const container = this.$el.querySelector('.messages');\n        container.scrollTop = container.scrollHeight;\n      });\n    },\n    selectUser(userId) {\n      this.selectedUserId = userId;\n    },\n    sendChatMessage() {\n      if (!this.inputMessage.trim()) return;\n      const message = this.inputMessage.trim();\n\n      // 调用工具方法发送\n      sendMessage(this.userId, this.selectedUserId, message);\n\n      // 清空输入框\n      this.inputMessage = '';\n    },\n    formatTime(datetime) {\n      if (!datetime) return '';\n      const d = new Date(datetime);\n      return d.toLocaleTimeString();\n    },\n    fetchOnlineUsers() {\n      axios.get('/user').then(res => {\n        this.users = res.data.filter(u => u.id != this.userId);\n      }).catch(err => {\n        console.error('获取用户列表失败', err);\n      });\n    }\n  }\n};","map":{"version":3,"names":["connect","sendMessage","axios","name","data","userId","users","selectedUserId","messages","inputMessage","created","sessionStorage","getItem","$message","error","$router","push","onMessageReceived","fetchOnlineUsers","methods","msg","$nextTick","container","$el","querySelector","scrollTop","scrollHeight","selectUser","sendChatMessage","trim","message","formatTime","datetime","d","Date","toLocaleTimeString","get","then","res","filter","u","id","catch","err","console"],"sources":["D:\\Final\\springboot_egg\\egg-web\\src\\user\\ChatRoom.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <div class=\"user-list\">\r\n      <h3>在线用户</h3>\r\n      <ul>\r\n        <li\r\n            v-for=\"user in users\"\r\n            :key=\"user.id\"\r\n            :class=\"{ active: selectedUserId === user.id }\"\r\n            @click=\"selectUser(user.id)\"\r\n        >\r\n          {{ user.username }}\r\n        </li>\r\n      </ul>\r\n      <button @click=\"selectUser(null)\" class=\"group-btn\">群聊</button>\r\n    </div>\r\n\r\n    <div class=\"chat-box\">\r\n      <div class=\"messages\">\r\n        <div\r\n            v-for=\"msg in messages\"\r\n            :key=\"msg.id + msg.createTime\"\r\n            :class=\"['message', msg.fromUserId === userId ? 'mine' : 'other']\"\r\n        >\r\n          <span class=\"from\">{{ msg.fromUserId === userId ? '我' : msg.fromUserId }}</span>：\r\n          <span class=\"content\">{{ msg.content }}</span>\r\n          <span class=\"time\">{{ formatTime(msg.createTime) }}</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"input-area\">\r\n        <input\r\n            type=\"text\"\r\n            v-model=\"inputMessage\"\r\n            placeholder=\"请输入消息\"\r\n            @keyup.enter=\"sendChatMessage\"\r\n        />\r\n        <button @click=\"sendChatMessage\">发送</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { connect, sendMessage } from '@/utils/chat'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  name: 'ChatRoom',\r\n  data() {\r\n    return {\r\n      userId: null,\r\n      users: [],\r\n      selectedUserId: null,\r\n      messages: [],\r\n      inputMessage: ''\r\n    }\r\n  },\r\n  created() {\r\n    this.userId = sessionStorage.getItem('userId')\r\n    if (!this.userId) {\r\n      this.$message.error('请先登录')\r\n      this.$router.push('/login')\r\n      return\r\n    }\r\n\r\n    // 建立 WebSocket 连接\r\n    connect(this.userId, this.onMessageReceived)\r\n\r\n    // 获取在线用户列表\r\n    this.fetchOnlineUsers()\r\n  },\r\n  methods: {\r\n    onMessageReceived(msg) {\r\n      this.messages.push(msg)\r\n      this.$nextTick(() => {\r\n        const container = this.$el.querySelector('.messages')\r\n        container.scrollTop = container.scrollHeight\r\n      })\r\n    },\r\n    selectUser(userId) {\r\n      this.selectedUserId = userId\r\n    },\r\n    sendChatMessage() {\r\n      if (!this.inputMessage.trim()) return\r\n\r\n      const message = this.inputMessage.trim()\r\n\r\n      // 调用工具方法发送\r\n      sendMessage(this.userId, this.selectedUserId, message)\r\n\r\n      // 清空输入框\r\n      this.inputMessage = ''\r\n    },\r\n    formatTime(datetime) {\r\n      if (!datetime) return ''\r\n      const d = new Date(datetime)\r\n      return d.toLocaleTimeString()\r\n    },\r\n    fetchOnlineUsers() {\r\n      axios.get('/user').then(res => {\r\n        this.users = res.data.filter(u => u.id != this.userId)\r\n      }).catch(err => {\r\n        console.error('获取用户列表失败', err)\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container {\r\n  display: flex;\r\n  height: 90vh;\r\n  border: 1px solid #ccc;\r\n}\r\n\r\n.user-list {\r\n  width: 200px;\r\n  border-right: 1px solid #ccc;\r\n  padding: 10px;\r\n}\r\n\r\n.user-list ul {\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n\r\n.user-list li {\r\n  padding: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.user-list li.active {\r\n  background-color: #e6f7ff;\r\n}\r\n\r\n.group-btn {\r\n  margin-top: 10px;\r\n  width: 100%;\r\n}\r\n\r\n.chat-box {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.messages {\r\n  flex: 1;\r\n  padding: 10px;\r\n  overflow-y: auto;\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n.message {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.message.mine {\r\n  text-align: right;\r\n}\r\n\r\n.message .from {\r\n  font-weight: bold;\r\n}\r\n\r\n.message .time {\r\n  font-size: 12px;\r\n  color: #888;\r\n  margin-left: 5px;\r\n}\r\n\r\n.input-area {\r\n  display: flex;\r\n  padding: 10px;\r\n  border-top: 1px solid #ccc;\r\n}\r\n\r\n.input-area input {\r\n  flex: 1;\r\n  padding: 5px;\r\n  margin-right: 5px;\r\n}\r\n\r\n.input-area button {\r\n  padding: 5px 10px;\r\n}\r\n</style>\r\n"],"mappings":";;;AA4CA,SAASA,OAAO,EAAEC,WAAU,QAAS,cAAa;AAClD,OAAOC,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,IAAI;MACZC,KAAK,EAAE,EAAE;MACTC,cAAc,EAAE,IAAI;MACpBC,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAE;IAChB;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACL,MAAK,GAAIM,cAAc,CAACC,OAAO,CAAC,QAAQ;IAC7C,IAAI,CAAC,IAAI,CAACP,MAAM,EAAE;MAChB,IAAI,CAACQ,QAAQ,CAACC,KAAK,CAAC,MAAM;MAC1B,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ;MAC1B;IACF;;IAEA;IACAhB,OAAO,CAAC,IAAI,CAACK,MAAM,EAAE,IAAI,CAACY,iBAAiB;;IAE3C;IACA,IAAI,CAACC,gBAAgB,CAAC;EACxB,CAAC;EACDC,OAAO,EAAE;IACPF,iBAAiBA,CAACG,GAAG,EAAE;MACrB,IAAI,CAACZ,QAAQ,CAACQ,IAAI,CAACI,GAAG;MACtB,IAAI,CAACC,SAAS,CAAC,MAAM;QACnB,MAAMC,SAAQ,GAAI,IAAI,CAACC,GAAG,CAACC,aAAa,CAAC,WAAW;QACpDF,SAAS,CAACG,SAAQ,GAAIH,SAAS,CAACI,YAAW;MAC7C,CAAC;IACH,CAAC;IACDC,UAAUA,CAACtB,MAAM,EAAE;MACjB,IAAI,CAACE,cAAa,GAAIF,MAAK;IAC7B,CAAC;IACDuB,eAAeA,CAAA,EAAG;MAChB,IAAI,CAAC,IAAI,CAACnB,YAAY,CAACoB,IAAI,CAAC,CAAC,EAAE;MAE/B,MAAMC,OAAM,GAAI,IAAI,CAACrB,YAAY,CAACoB,IAAI,CAAC;;MAEvC;MACA5B,WAAW,CAAC,IAAI,CAACI,MAAM,EAAE,IAAI,CAACE,cAAc,EAAEuB,OAAO;;MAErD;MACA,IAAI,CAACrB,YAAW,GAAI,EAAC;IACvB,CAAC;IACDsB,UAAUA,CAACC,QAAQ,EAAE;MACnB,IAAI,CAACA,QAAQ,EAAE,OAAO,EAAC;MACvB,MAAMC,CAAA,GAAI,IAAIC,IAAI,CAACF,QAAQ;MAC3B,OAAOC,CAAC,CAACE,kBAAkB,CAAC;IAC9B,CAAC;IACDjB,gBAAgBA,CAAA,EAAG;MACjBhB,KAAK,CAACkC,GAAG,CAAC,OAAO,CAAC,CAACC,IAAI,CAACC,GAAE,IAAK;QAC7B,IAAI,CAAChC,KAAI,GAAIgC,GAAG,CAAClC,IAAI,CAACmC,MAAM,CAACC,CAAA,IAAKA,CAAC,CAACC,EAAC,IAAK,IAAI,CAACpC,MAAM;MACvD,CAAC,CAAC,CAACqC,KAAK,CAACC,GAAE,IAAK;QACdC,OAAO,CAAC9B,KAAK,CAAC,UAAU,EAAE6B,GAAG;MAC/B,CAAC;IACH;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}