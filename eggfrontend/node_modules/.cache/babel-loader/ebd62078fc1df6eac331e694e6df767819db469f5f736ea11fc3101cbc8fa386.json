{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      allUsers: [],\n      // 页面加载时获取所有用户\n      filtered: [],\n      // 查询后的结果（分页前）\n      pageData: [],\n      // 当前页的数据\n      page: 1,\n      pageSize: 5,\n      criteria: {\n        username: \"\",\n        email: \"\",\n        age: \"\"\n      }\n    };\n  },\n  mounted() {\n    this.loadAllUsers(); // 页面加载时调用\n  },\n  methods: {\n    // 1️⃣ 第一次加载时获取所有用户\n    async loadAllUsers() {\n      try {\n        const res = await axios.get(\"/api/users\"); // 这里换成你的后端接口\n        this.allUsers = res.data; // 假设后端返回一个用户数组\n        this.filtered = [...this.allUsers]; // 默认不过滤\n        this.updatePageData();\n      } catch (err) {\n        console.error(\"加载用户失败\", err);\n      }\n    },\n    // 2️⃣ 点击查询\n    searchUsers() {\n      this.filtered = this.allUsers.filter(u => {\n        let match = true;\n        if (this.criteria.username) {\n          match = match && u.username.includes(this.criteria.username);\n        }\n        if (this.criteria.email) {\n          match = match && u.email.includes(this.criteria.email);\n        }\n        if (this.criteria.age) {\n          match = match && String(u.age) === String(this.criteria.age);\n        }\n        return match;\n      });\n      this.page = 1; // 查询后回到第一页\n      this.updatePageData();\n    },\n    // 3️⃣ 重置查询\n    resetSearch() {\n      this.criteria = {\n        username: \"\",\n        email: \"\",\n        age: \"\"\n      };\n      this.filtered = [...this.allUsers];\n      this.page = 1;\n      this.updatePageData();\n    },\n    // 4️⃣ 更新当前页数据\n    updatePageData() {\n      const start = (this.page - 1) * this.pageSize;\n      const end = this.page * this.pageSize;\n      this.pageData = this.filtered.slice(start, end);\n    },\n    // 5️⃣ 页码切换\n    handlePageChange(newPage) {\n      this.page = newPage;\n      this.updatePageData();\n    }\n  }\n};","map":{"version":3,"names":["axios","data","allUsers","filtered","pageData","page","pageSize","criteria","username","email","age","mounted","loadAllUsers","methods","res","get","updatePageData","err","console","error","searchUsers","filter","u","match","includes","String","resetSearch","start","end","slice","handlePageChange","newPage"],"sources":["D:\\Final\\springboot_egg\\egg-web\\src\\user\\UserList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- 搜索栏 -->\r\n    <el-form :inline=\"true\" size=\"small\" @submit.native.prevent>\r\n      <el-form-item label=\"用户名\">\r\n        <el-input v-model=\"criteria.username\" placeholder=\"输入用户名\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"邮箱\">\r\n        <el-input v-model=\"criteria.email\" placeholder=\"输入邮箱\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"年龄\">\r\n        <el-input v-model=\"criteria.age\" placeholder=\"输入年龄\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <el-button type=\"primary\" @click=\"searchUsers\">查询</el-button>\r\n        <el-button @click=\"resetSearch\">重置</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n\r\n    <!-- 用户表格 -->\r\n    <el-table :data=\"pageData\" border style=\"width: 100%; margin-top: 20px;\">\r\n      <el-table-column prop=\"id\" label=\"ID\" width=\"80\"></el-table-column>\r\n      <el-table-column prop=\"username\" label=\"用户名\"></el-table-column>\r\n      <el-table-column prop=\"email\" label=\"邮箱\"></el-table-column>\r\n      <el-table-column prop=\"age\" label=\"年龄\"></el-table-column>\r\n      <el-table-column prop=\"gender\" label=\"性别\"></el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 分页 -->\r\n    <el-pagination\r\n        style=\"margin-top: 20px; text-align: center;\"\r\n        background\r\n        layout=\"prev, pager, next, jumper\"\r\n        :current-page.sync=\"page\"\r\n        :page-size=\"pageSize\"\r\n        :total=\"filtered.length\"\r\n        @current-change=\"handlePageChange\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      allUsers: [],       // 页面加载时获取所有用户\r\n      filtered: [],       // 查询后的结果（分页前）\r\n      pageData: [],       // 当前页的数据\r\n      page: 1,\r\n      pageSize: 5,\r\n      criteria: {\r\n        username: \"\",\r\n        email: \"\",\r\n        age: \"\"\r\n      }\r\n    };\r\n  },\r\n  mounted() {\r\n    this.loadAllUsers(); // 页面加载时调用\r\n  },\r\n  methods: {\r\n    // 1️⃣ 第一次加载时获取所有用户\r\n    async loadAllUsers() {\r\n      try {\r\n        const res = await axios.get(\"/api/users\"); // 这里换成你的后端接口\r\n        this.allUsers = res.data;  // 假设后端返回一个用户数组\r\n        this.filtered = [...this.allUsers]; // 默认不过滤\r\n        this.updatePageData();\r\n      } catch (err) {\r\n        console.error(\"加载用户失败\", err);\r\n      }\r\n    },\r\n\r\n    // 2️⃣ 点击查询\r\n    searchUsers() {\r\n      this.filtered = this.allUsers.filter(u => {\r\n        let match = true;\r\n        if (this.criteria.username) {\r\n          match = match && u.username.includes(this.criteria.username);\r\n        }\r\n        if (this.criteria.email) {\r\n          match = match && u.email.includes(this.criteria.email);\r\n        }\r\n        if (this.criteria.age) {\r\n          match = match && String(u.age) === String(this.criteria.age);\r\n        }\r\n        return match;\r\n      });\r\n      this.page = 1; // 查询后回到第一页\r\n      this.updatePageData();\r\n    },\r\n\r\n    // 3️⃣ 重置查询\r\n    resetSearch() {\r\n      this.criteria = { username: \"\", email: \"\", age: \"\" };\r\n      this.filtered = [...this.allUsers];\r\n      this.page = 1;\r\n      this.updatePageData();\r\n    },\r\n\r\n    // 4️⃣ 更新当前页数据\r\n    updatePageData() {\r\n      const start = (this.page - 1) * this.pageSize;\r\n      const end = this.page * this.pageSize;\r\n      this.pageData = this.filtered.slice(start, end);\r\n    },\r\n\r\n    // 5️⃣ 页码切换\r\n    handlePageChange(newPage) {\r\n      this.page = newPage;\r\n      this.updatePageData();\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}