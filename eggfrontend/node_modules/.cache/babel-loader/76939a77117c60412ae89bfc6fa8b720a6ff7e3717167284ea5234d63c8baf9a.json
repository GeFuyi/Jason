{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { connect, sendMessage } from '@/utils/chat';\nimport egg from '@/utils/egg';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'ChatRoom',\n  data() {\n    return {\n      userId: null,\n      users: [],\n      selectedUserId: null,\n      messages: [],\n      inputMessage: ''\n    };\n  },\n  computed: {\n    filteredMessages() {\n      return this.messages.filter(msg => {\n        if (this.selectedUserId === null) return !msg.toUserId;\n        return msg.fromUserId === this.selectedUserId && msg.toUserId === Number(this.userId) || msg.fromUserId === Number(this.userId) && msg.toUserId === this.selectedUserId;\n      });\n    }\n  },\n  async mounted() {\n    this.userId = sessionStorage.getItem('userId');\n    if (!this.userId) {\n      ElMessage.error('请先登录');\n      this.$router.push('/login');\n      return;\n    }\n\n    // 1️⃣ 拉取全部用户并标记在线状态\n    await this.fetchAllUsers();\n\n    // 2️⃣ 拉取群聊消息\n    try {\n      const groupRes = await egg.get('/chat/group-msg');\n      this.messages.push(...groupRes.data);\n    } catch (e) {\n      console.error('拉取群聊消息失败', e);\n    }\n\n    // 3️⃣ 拉取私聊离线消息\n    try {\n      const offlineRes = await egg.get('/user/offline-msg', {\n        params: {\n          userId: this.userId\n        }\n      });\n      this.messages.push(...offlineRes.data);\n    } catch (e) {\n      console.error('拉取离线消息失败', e);\n    }\n\n    // 4️⃣ 保存 localStorage\n    this.saveMessagesToLocal();\n\n    // 5️⃣ 连接 WebSocket\n    connect(Number(this.userId), this.onMessageReceived);\n\n    // 6️⃣ 滚动到底部\n    this.scrollToBottom();\n  },\n  methods: {\n    getStorageKey() {\n      return `chat_messages_user_${this.userId}`;\n    },\n    saveMessagesToLocal() {\n      const grouped = {};\n      this.messages.forEach(msg => {\n        const sessionId = msg.toUserId === null ? 'group' : msg.fromUserId === Number(this.userId) ? msg.toUserId : msg.fromUserId;\n        if (!grouped[sessionId]) grouped[sessionId] = [];\n        grouped[sessionId].push(msg);\n      });\n      localStorage.setItem(this.getStorageKey(), JSON.stringify(grouped));\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const container = this.$refs.messageContainer;\n        if (container) container.scrollTop = container.scrollHeight;\n      });\n    },\n    onMessageReceived(msg) {\n      this.messages.push(msg);\n      this.saveMessagesToLocal();\n      this.scrollToBottom();\n    },\n    selectUser(userId) {\n      this.selectedUserId = userId;\n      this.scrollToBottom();\n    },\n    sendChatMessage() {\n      const content = this.inputMessage.trim();\n      if (!content) return;\n      const payload = {\n        fromUserId: Number(this.userId),\n        toUserId: this.selectedUserId,\n        content\n      };\n\n      // 临时消息显示\n      const tempMsg = {\n        ...payload,\n        tempId: Date.now(),\n        createTime: new Date().toISOString()\n      };\n      this.messages.push(tempMsg);\n      this.saveMessagesToLocal();\n      this.scrollToBottom();\n      this.inputMessage = '';\n      sendMessage(payload.fromUserId, payload.toUserId, payload.content, payload.tempId);\n    },\n    formatTime(datetime) {\n      return datetime ? new Date(datetime).toLocaleTimeString() : '';\n    },\n    // ✅ 改好的方法：拉取所有用户并标记在线\n    async fetchAllUsers() {\n      try {\n        const res = await egg.get('/user'); // ✅ 注意：这里改成 /user\n        this.users = res.data.map(u => ({\n          ...u,\n          online: false\n        }));\n        const onlineRes = await egg.get('/user/online');\n        const onlineSet = new Set(onlineRes.data);\n        this.users.forEach(u => u.online = onlineSet.has(String(u.id)));\n      } catch (err) {\n        console.error('获取用户列表失败', err);\n        ElMessage.error('获取用户列表失败');\n      }\n    },\n    getUsername(id) {\n      const user = this.users.find(u => u.id === id);\n      return user ? user.username : '未知';\n    }\n  }\n};","map":{"version":3,"names":["connect","sendMessage","egg","ElMessage","name","data","userId","users","selectedUserId","messages","inputMessage","computed","filteredMessages","filter","msg","toUserId","fromUserId","Number","mounted","sessionStorage","getItem","error","$router","push","fetchAllUsers","groupRes","get","e","console","offlineRes","params","saveMessagesToLocal","onMessageReceived","scrollToBottom","methods","getStorageKey","grouped","forEach","sessionId","localStorage","setItem","JSON","stringify","$nextTick","container","$refs","messageContainer","scrollTop","scrollHeight","selectUser","sendChatMessage","content","trim","payload","tempMsg","tempId","Date","now","createTime","toISOString","formatTime","datetime","toLocaleTimeString","res","map","u","online","onlineRes","onlineSet","Set","has","String","id","err","getUsername","user","find","username"],"sources":["D:\\Final\\springboot_egg\\egg-web\\src\\user\\ChatRoom.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <!-- 左侧用户列表 -->\r\n    <aside class=\"user-list\">\r\n      <div class=\"user-card\">\r\n        <h3>聊天列表</h3>\r\n        <el-scrollbar class=\"user-scroll\">\r\n          <!-- 群聊 -->\r\n          <div\r\n              class=\"user-item\"\r\n              :class=\"{ active: selectedUserId === null }\"\r\n              @click=\"selectUser(null)\"\r\n          >\r\n            群聊\r\n            <span class=\"status-dot online\"></span>\r\n          </div>\r\n\r\n          <!-- 用户列表 -->\r\n          <div\r\n              class=\"user-item\"\r\n              v-for=\"user in users\"\r\n              :key=\"user.id\"\r\n              :class=\"{ active: selectedUserId === user.id }\"\r\n              @click=\"selectUser(user.id)\"\r\n          >\r\n            {{ user.username }}\r\n            <span class=\"status-dot\" :class=\"user.online ? 'online' : 'offline'\"></span>\r\n          </div>\r\n        </el-scrollbar>\r\n      </div>\r\n    </aside>\r\n\r\n    <!-- 右侧聊天区 -->\r\n    <main class=\"chat-main\">\r\n      <div class=\"messages\" ref=\"messageContainer\">\r\n        <div\r\n            v-for=\"msg in filteredMessages\"\r\n            :key=\"msg.id || msg.tempId\"\r\n            :class=\"['message', msg.fromUserId === Number(userId) ? 'mine' : 'other']\"\r\n        >\r\n          <span class=\"from\">\r\n            {{ msg.fromUserId === Number(userId) ? '我' : getUsername(msg.fromUserId) }}\r\n          </span>\r\n          <div class=\"bubble\">\r\n            <span class=\"content\">{{ msg.content }}</span>\r\n          </div>\r\n          <span class=\"time\">{{ formatTime(msg.createTime) }}</span>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 输入框区域 -->\r\n      <div class=\"input-area\">\r\n        <el-input\r\n            v-model=\"inputMessage\"\r\n            placeholder=\"请输入消息\"\r\n            @keyup.enter=\"sendChatMessage\"\r\n            class=\"input-box\"\r\n            clearable\r\n        ></el-input>\r\n        <el-button type=\"primary\" @click=\"sendChatMessage\">发送</el-button>\r\n      </div>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { connect, sendMessage } from '@/utils/chat'\r\nimport egg from '@/utils/egg'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'ChatRoom',\r\n  data() {\r\n    return {\r\n      userId: null,\r\n      users: [],\r\n      selectedUserId: null,\r\n      messages: [],\r\n      inputMessage: ''\r\n    }\r\n  },\r\n  computed: {\r\n    filteredMessages() {\r\n      return this.messages.filter(msg => {\r\n        if (this.selectedUserId === null) return !msg.toUserId\r\n        return (\r\n            (msg.fromUserId === this.selectedUserId && msg.toUserId === Number(this.userId)) ||\r\n            (msg.fromUserId === Number(this.userId) && msg.toUserId === this.selectedUserId)\r\n        )\r\n      })\r\n    }\r\n  },\r\n  async mounted() {\r\n    this.userId = sessionStorage.getItem('userId')\r\n    if (!this.userId) {\r\n      ElMessage.error('请先登录')\r\n      this.$router.push('/login')\r\n      return\r\n    }\r\n\r\n    // 1️⃣ 拉取全部用户并标记在线状态\r\n    await this.fetchAllUsers()\r\n\r\n    // 2️⃣ 拉取群聊消息\r\n    try {\r\n      const groupRes = await egg.get('/chat/group-msg')\r\n      this.messages.push(...groupRes.data)\r\n    } catch (e) {\r\n      console.error('拉取群聊消息失败', e)\r\n    }\r\n\r\n    // 3️⃣ 拉取私聊离线消息\r\n    try {\r\n      const offlineRes = await egg.get('/user/offline-msg', { params: { userId: this.userId } })\r\n      this.messages.push(...offlineRes.data)\r\n    } catch (e) {\r\n      console.error('拉取离线消息失败', e)\r\n    }\r\n\r\n    // 4️⃣ 保存 localStorage\r\n    this.saveMessagesToLocal()\r\n\r\n    // 5️⃣ 连接 WebSocket\r\n    connect(Number(this.userId), this.onMessageReceived)\r\n\r\n    // 6️⃣ 滚动到底部\r\n    this.scrollToBottom()\r\n  },\r\n  methods: {\r\n    getStorageKey() {\r\n      return `chat_messages_user_${this.userId}`\r\n    },\r\n\r\n    saveMessagesToLocal() {\r\n      const grouped = {}\r\n      this.messages.forEach(msg => {\r\n        const sessionId =\r\n            msg.toUserId === null\r\n                ? 'group'\r\n                : msg.fromUserId === Number(this.userId)\r\n                    ? msg.toUserId\r\n                    : msg.fromUserId\r\n        if (!grouped[sessionId]) grouped[sessionId] = []\r\n        grouped[sessionId].push(msg)\r\n      })\r\n      localStorage.setItem(this.getStorageKey(), JSON.stringify(grouped))\r\n    },\r\n\r\n    scrollToBottom() {\r\n      this.$nextTick(() => {\r\n        const container = this.$refs.messageContainer\r\n        if (container) container.scrollTop = container.scrollHeight\r\n      })\r\n    },\r\n\r\n    onMessageReceived(msg) {\r\n      this.messages.push(msg)\r\n      this.saveMessagesToLocal()\r\n      this.scrollToBottom()\r\n    },\r\n\r\n    selectUser(userId) {\r\n      this.selectedUserId = userId\r\n      this.scrollToBottom()\r\n    },\r\n\r\n    sendChatMessage() {\r\n      const content = this.inputMessage.trim()\r\n      if (!content) return\r\n\r\n      const payload = {\r\n        fromUserId: Number(this.userId),\r\n        toUserId: this.selectedUserId,\r\n        content\r\n      }\r\n\r\n      // 临时消息显示\r\n      const tempMsg = { ...payload, tempId: Date.now(), createTime: new Date().toISOString() }\r\n      this.messages.push(tempMsg)\r\n      this.saveMessagesToLocal()\r\n      this.scrollToBottom()\r\n\r\n      this.inputMessage = ''\r\n      sendMessage(payload.fromUserId, payload.toUserId, payload.content, payload.tempId)\r\n    },\r\n\r\n    formatTime(datetime) {\r\n      return datetime ? new Date(datetime).toLocaleTimeString() : ''\r\n    },\r\n\r\n    // ✅ 改好的方法：拉取所有用户并标记在线\r\n    async fetchAllUsers() {\r\n      try {\r\n        const res = await egg.get('/user') // ✅ 注意：这里改成 /user\r\n        this.users = res.data.map(u => ({ ...u, online: false }))\r\n\r\n        const onlineRes = await egg.get('/user/online')\r\n        const onlineSet = new Set(onlineRes.data)\r\n        this.users.forEach(u => (u.online = onlineSet.has(String(u.id))))\r\n      } catch (err) {\r\n        console.error('获取用户列表失败', err)\r\n        ElMessage.error('获取用户列表失败')\r\n      }\r\n    },\r\n\r\n    getUsername(id) {\r\n      const user = this.users.find(u => u.id === id)\r\n      return user ? user.username : '未知'\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container { display: flex; height: 100vh; width: 100vw; }\r\n\r\n/* 左侧用户列表 */\r\n.user-list { width: 20%; display: flex; flex-direction: column; padding: 10px; background-color: #fafafa; box-sizing: border-box; height: 100%; }\r\n.user-card { display: flex; flex-direction: column; flex: 1; height: 100%; }\r\n.user-scroll { flex: 1; overflow-y: auto; margin-top: 10px; }\r\n.user-item { padding: 10px; border: 1px solid #ddd; border-radius: 6px; cursor: pointer; background-color: #fff; margin-bottom: 6px; display: flex; align-items: center; justify-content: space-between; }\r\n.user-item.active { background-color: #bae7ff; border-color: #91d5ff; }\r\n.status-dot { width: 10px; height: 10px; border-radius: 50%; display: inline-block; }\r\n.status-dot.online { background-color: #52c41a; }\r\n.status-dot.offline { background-color: #f5222d; }\r\n\r\n/* 右侧聊天区 */\r\n.chat-main { width: 80%; display: flex; flex-direction: column; padding: 10px; box-sizing: border-box; background-color: #f0f2f5; height: 100%; }\r\n.messages { flex: 1; overflow-y: auto; padding: 10px; background-color: #ffffff; border-radius: 8px; display: flex; flex-direction: column; gap: 10px; }\r\n.input-area { display: flex; gap: 10px; padding-top: 10px; height: 50px; border-top: 1px solid #ddd; }\r\n.input-box { flex: 1; }\r\n.message { display: flex; flex-direction: column; }\r\n.message.mine { align-items: flex-end; }\r\n.message.other { align-items: flex-start; }\r\n.bubble { max-width: 70%; padding: 10px 14px; border-radius: 16px; word-wrap: break-word; position: relative; background-color: #e6f7ff; }\r\n.message.mine .bubble { background-color: #91d5ff; color: #000; }\r\n.message.mine .bubble::after { content: \"\"; position: absolute; right: -8px; top: 10px; border-width: 8px 0 8px 8px; border-style: solid; border-color: transparent transparent transparent #91d5ff; }\r\n.message.other .bubble::after { content: \"\"; position: absolute; left: -8px; top: 10px; border-width: 8px 8px 8px 0; border-style: solid; border-color: transparent #e6f7ff transparent transparent; }\r\n.time { font-size: 12px; color: #999; margin-top: 2px; }\r\n.message.mine .time { text-align: right; }\r\n.message.other .time { text-align: left; }\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}