{"ast":null,"code":"// // src/utils/egg.js\n// import axios from 'axios'\n//\n// // 创建 axios 实例，并命名为 egg\n// const egg = axios.create({\n//     baseURL: 'http://localhost:8090', // ✅ 改成你的局域网 IP + 端口\n//     timeout: 10000\n// })\n//\n// // 请求拦截器\n// egg.interceptors.request.use(\n//     config => {\n//         // 从 localStorage 获取 token\n//         const token = localStorage.getItem('token')\n//         console.log('[Axios] token:', token)  // ✅ 打印 token\n//         if (token) {\n//             config.headers['Authorization'] = 'Bearer ' + token\n//         }\n//         console.log('[Axios] request headers:', config.headers) // ✅ 打印最终请求头\n//         return config\n//     },\n//     error => {\n//         return Promise.reject(error)\n//     }\n// )\n//\n// // 响应拦截器\n// egg.interceptors.response.use(\n//     response => {\n//         // return response.data\n//         return response\n//     },\n//     error => {\n//         console.error('API Error:', error)\n//         return Promise.reject(error)\n//     }\n// )\n//\n// export default egg\n\n// src/utils/egg.js\nimport axios from 'axios';\n\n// 创建 axios 实例\nconst egg = axios.create({\n  baseURL: 'http://localhost:8090',\n  timeout: 10000\n});\n\n// 请求拦截器：自动带 token\negg.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = 'Bearer ' + token;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// 响应拦截器：自动解封装 Result\negg.interceptors.response.use(response => {\n  // response.data 是 Result 对象\n  const res = response.data;\n  if (res.success) {\n    // 成功直接返回 data\n    return res.data;\n  } else {\n    // 可以统一提示错误信息\n    console.error('[API Error]', res.message);\n    // 也可以抛出去让业务代码 catch\n    return Promise.reject(new Error(res.message || 'Error'));\n  }\n}, error => {\n  console.error('[API Network/Error]', error);\n  return Promise.reject(error);\n});\nexport default egg;","map":{"version":3,"names":["axios","egg","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","response","res","data","success","console","message","Error"],"sources":["D:/Final/springboot_egg/egg-web/src/utils/egg.js"],"sourcesContent":["// // src/utils/egg.js\r\n// import axios from 'axios'\r\n//\r\n// // 创建 axios 实例，并命名为 egg\r\n// const egg = axios.create({\r\n//     baseURL: 'http://localhost:8090', // ✅ 改成你的局域网 IP + 端口\r\n//     timeout: 10000\r\n// })\r\n//\r\n// // 请求拦截器\r\n// egg.interceptors.request.use(\r\n//     config => {\r\n//         // 从 localStorage 获取 token\r\n//         const token = localStorage.getItem('token')\r\n//         console.log('[Axios] token:', token)  // ✅ 打印 token\r\n//         if (token) {\r\n//             config.headers['Authorization'] = 'Bearer ' + token\r\n//         }\r\n//         console.log('[Axios] request headers:', config.headers) // ✅ 打印最终请求头\r\n//         return config\r\n//     },\r\n//     error => {\r\n//         return Promise.reject(error)\r\n//     }\r\n// )\r\n//\r\n// // 响应拦截器\r\n// egg.interceptors.response.use(\r\n//     response => {\r\n//         // return response.data\r\n//         return response\r\n//     },\r\n//     error => {\r\n//         console.error('API Error:', error)\r\n//         return Promise.reject(error)\r\n//     }\r\n// )\r\n//\r\n// export default egg\r\n\r\n\r\n// src/utils/egg.js\r\nimport axios from 'axios'\r\n\r\n// 创建 axios 实例\r\nconst egg = axios.create({\r\n    baseURL: 'http://localhost:8090',\r\n    timeout: 10000\r\n})\r\n\r\n// 请求拦截器：自动带 token\r\negg.interceptors.request.use(\r\n    config => {\r\n        const token = localStorage.getItem('token')\r\n        if (token) {\r\n            config.headers['Authorization'] = 'Bearer ' + token\r\n        }\r\n        return config\r\n    },\r\n    error => Promise.reject(error)\r\n)\r\n\r\n// 响应拦截器：自动解封装 Result\r\negg.interceptors.response.use(\r\n    response => {\r\n        // response.data 是 Result 对象\r\n        const res = response.data\r\n        if (res.success) {\r\n            // 成功直接返回 data\r\n            return res.data\r\n        } else {\r\n            // 可以统一提示错误信息\r\n            console.error('[API Error]', res.message)\r\n            // 也可以抛出去让业务代码 catch\r\n            return Promise.reject(new Error(res.message || 'Error'))\r\n        }\r\n    },\r\n    error => {\r\n        console.error('[API Network/Error]', error)\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\nexport default egg\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACxBC,MAAM,IAAI;EACN,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGH,KAAK;EACvD;EACA,OAAOD,MAAM;AACjB,CAAC,EACDK,KAAK,IAAIC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CACzBS,QAAQ,IAAI;EACR;EACA,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACzB,IAAID,GAAG,CAACE,OAAO,EAAE;IACb;IACA,OAAOF,GAAG,CAACC,IAAI;EACnB,CAAC,MAAM;IACH;IACAE,OAAO,CAACP,KAAK,CAAC,aAAa,EAAEI,GAAG,CAACI,OAAO,CAAC;IACzC;IACA,OAAOP,OAAO,CAACC,MAAM,CAAC,IAAIO,KAAK,CAACL,GAAG,CAACI,OAAO,IAAI,OAAO,CAAC,CAAC;EAC5D;AACJ,CAAC,EACDR,KAAK,IAAI;EACLO,OAAO,CAACP,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;EAC3C,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeZ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}