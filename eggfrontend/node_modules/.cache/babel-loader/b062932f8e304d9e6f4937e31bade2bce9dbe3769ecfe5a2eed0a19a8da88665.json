{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, normalizeClass as _normalizeClass, withCtx as _withCtx, createBlock as _createBlock, createVNode as _createVNode, withKeys as _withKeys } from \"vue\";\nconst _hoisted_1 = {\n  class: \"messages\",\n  ref: \"messageContainer\"\n};\nconst _hoisted_2 = {\n  class: \"from\"\n};\nconst _hoisted_3 = {\n  class: \"content\"\n};\nconst _hoisted_4 = {\n  class: \"time\"\n};\nconst _hoisted_5 = {\n  class: \"input-area\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_list_item = _resolveComponent(\"el-list-item\");\n  const _component_el_list = _resolveComponent(\"el-list\");\n  const _component_el_scrollbar = _resolveComponent(\"el-scrollbar\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_card = _resolveComponent(\"el-card\");\n  const _component_el_aside = _resolveComponent(\"el-aside\");\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_main = _resolveComponent(\"el-main\");\n  const _component_el_container = _resolveComponent(\"el-container\");\n  return _openBlock(), _createBlock(_component_el_container, {\n    class: \"chat-container\"\n  }, {\n    default: _withCtx(() => [_createCommentVNode(\" 左侧用户列表 \"), _createVNode(_component_el_aside, {\n      width: \"220px\",\n      class: \"user-list\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_card, {\n        class: \"user-card\"\n      }, {\n        default: _withCtx(() => [_cache[3] || (_cache[3] = _createElementVNode(\"h3\", null, \"在线用户\", -1 /* CACHED */)), _createVNode(_component_el_scrollbar, {\n          class: \"user-scroll\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_list, null, {\n            default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.users, user => {\n              return _openBlock(), _createBlock(_component_el_list_item, {\n                key: user.id,\n                class: _normalizeClass({\n                  active: $data.selectedUserId === user.id\n                }),\n                onClick: $event => $options.selectUser(user.id)\n              }, {\n                default: _withCtx(() => [_createTextVNode(_toDisplayString(user.username), 1 /* TEXT */)]),\n                _: 2 /* DYNAMIC */\n              }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"class\", \"onClick\"]);\n            }), 128 /* KEYED_FRAGMENT */))]),\n            _: 1 /* STABLE */\n          })]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_el_button, {\n          type: \"primary\",\n          size: \"small\",\n          onClick: _cache[0] || (_cache[0] = $event => $options.selectUser(null)),\n          class: \"group-btn\"\n        }, {\n          default: _withCtx(() => _cache[2] || (_cache[2] = [_createTextVNode(\" 群聊 \", -1 /* CACHED */)])),\n          _: 1 /* STABLE */,\n          __: [2]\n        })]),\n        _: 1 /* STABLE */,\n        __: [3]\n      })]),\n      _: 1 /* STABLE */\n    }), _createCommentVNode(\" 右侧聊天框 \"), _createVNode(_component_el_main, {\n      class: \"chat-main\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_card, {\n        class: \"chat-card\"\n      }, {\n        default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, msg => {\n          return _openBlock(), _createElementBlock(\"div\", {\n            key: msg.id || msg.tempId,\n            class: _normalizeClass(['message', msg.fromUserId === Number($data.userId) ? 'mine' : 'other'])\n          }, [_createElementVNode(\"span\", _hoisted_2, _toDisplayString(msg.fromUserId === Number($data.userId) ? '我' : $options.getUsername(msg.fromUserId)), 1 /* TEXT */), _cache[4] || (_cache[4] = _createTextVNode(\"： \", -1 /* CACHED */)), _createElementVNode(\"span\", _hoisted_3, _toDisplayString(msg.content), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_4, _toDisplayString($options.formatTime(msg.createTime)), 1 /* TEXT */)], 2 /* CLASS */);\n        }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), _createElementVNode(\"div\", _hoisted_5, [_createVNode(_component_el_input, {\n          modelValue: $data.inputMessage,\n          \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.inputMessage = $event),\n          placeholder: \"请输入消息\",\n          onKeyup: _withKeys($options.sendChatMessage, [\"enter\"]),\n          clearable: \"\"\n        }, null, 8 /* PROPS */, [\"modelValue\", \"onKeyup\"]), _createVNode(_component_el_button, {\n          type: \"primary\",\n          onClick: $options.sendChatMessage\n        }, {\n          default: _withCtx(() => _cache[5] || (_cache[5] = [_createTextVNode(\"发送\", -1 /* CACHED */)])),\n          _: 1 /* STABLE */,\n          __: [5]\n        }, 8 /* PROPS */, [\"onClick\"])])]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["class","ref","_createBlock","_component_el_container","_createCommentVNode","_createVNode","_component_el_aside","width","_component_el_card","_createElementVNode","_component_el_scrollbar","_component_el_list","_createElementBlock","_Fragment","_renderList","$data","users","user","_component_el_list_item","key","id","_normalizeClass","active","selectedUserId","onClick","$event","$options","selectUser","username","_component_el_button","type","size","_cache","_component_el_main","_hoisted_1","messages","msg","tempId","fromUserId","Number","userId","_hoisted_2","_toDisplayString","getUsername","_hoisted_3","content","_hoisted_4","formatTime","createTime","_hoisted_5","_component_el_input","inputMessage","placeholder","onKeyup","_withKeys","sendChatMessage","clearable"],"sources":["D:\\Final\\springboot_egg\\egg-web\\src\\user\\ChatRoom.vue"],"sourcesContent":["<template>\r\n  <el-container class=\"chat-container\">\r\n    <!-- 左侧用户列表 -->\r\n    <el-aside width=\"220px\" class=\"user-list\">\r\n      <el-card class=\"user-card\">\r\n        <h3>在线用户</h3>\r\n        <el-scrollbar class=\"user-scroll\">\r\n          <el-list>\r\n            <el-list-item\r\n                v-for=\"user in users\"\r\n                :key=\"user.id\"\r\n                :class=\"{ active: selectedUserId === user.id }\"\r\n                @click=\"selectUser(user.id)\"\r\n            >\r\n              {{ user.username }}\r\n            </el-list-item>\r\n          </el-list>\r\n        </el-scrollbar>\r\n        <el-button\r\n            type=\"primary\"\r\n            size=\"small\"\r\n            @click=\"selectUser(null)\"\r\n            class=\"group-btn\"\r\n        >\r\n          群聊\r\n        </el-button>\r\n      </el-card>\r\n    </el-aside>\r\n\r\n    <!-- 右侧聊天框 -->\r\n    <el-main class=\"chat-main\">\r\n      <el-card class=\"chat-card\">\r\n        <div class=\"messages\" ref=\"messageContainer\">\r\n          <div\r\n              v-for=\"msg in messages\"\r\n              :key=\"msg.id || msg.tempId\"\r\n              :class=\"['message', msg.fromUserId === Number(userId) ? 'mine' : 'other']\"\r\n          >\r\n            <span class=\"from\">\r\n              {{ msg.fromUserId === Number(userId) ? '我' : getUsername(msg.fromUserId) }}\r\n            </span>：\r\n            <span class=\"content\">{{ msg.content }}</span>\r\n            <span class=\"time\">{{ formatTime(msg.createTime) }}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"input-area\">\r\n          <el-input\r\n              v-model=\"inputMessage\"\r\n              placeholder=\"请输入消息\"\r\n              @keyup.enter=\"sendChatMessage\"\r\n              clearable\r\n          ></el-input>\r\n          <el-button type=\"primary\" @click=\"sendChatMessage\">发送</el-button>\r\n        </div>\r\n      </el-card>\r\n    </el-main>\r\n  </el-container>\r\n</template>\r\n\r\n<script>\r\nimport { connect, sendMessage } from '@/utils/chat'\r\nimport egg from '@/utils/egg'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'ChatRoom',\r\n  data() {\r\n    return {\r\n      userId: null,\r\n      users: [],\r\n      selectedUserId: null,\r\n      messages: [],\r\n      inputMessage: ''\r\n    }\r\n  },\r\n  mounted() {\r\n    this.userId = sessionStorage.getItem('userId')\r\n    if (!this.userId) {\r\n      ElMessage.error('请先登录')\r\n      this.$router.push('/login')\r\n      return\r\n    }\r\n\r\n    // 建立 WebSocket 连接\r\n    connect(Number(this.userId), this.onMessageReceived)\r\n\r\n    // 获取在线用户列表\r\n    this.fetchOnlineUsers()\r\n  },\r\n  methods: {\r\n    // 收到消息\r\n    onMessageReceived(msg) {\r\n      this.messages.push(msg)\r\n      this.$nextTick(() => {\r\n        const container = this.$refs.messageContainer\r\n        container.scrollTop = container.scrollHeight\r\n      })\r\n      if (msg.fromUserId === Number(this.userId)) {\r\n        ElMessage.success('消息发送成功')\r\n      } else {\r\n        ElMessage.info(`${this.getUsername(msg.fromUserId)}: ${msg.content}`)\r\n      }\r\n    },\r\n\r\n    // 选择聊天对象\r\n    selectUser(userId) {\r\n      this.selectedUserId = userId\r\n    },\r\n\r\n    // 发送消息\r\n    sendChatMessage() {\r\n      const content = this.inputMessage.trim()\r\n      if (!content) return\r\n\r\n      const payload = {\r\n        fromUserId: Number(this.userId),\r\n        toUserId: this.selectedUserId ? Number(this.selectedUserId) : null,\r\n        content,\r\n        tempId: Date.now() // 临时 id，前端展示用\r\n      }\r\n\r\n      sendMessage(payload.fromUserId, payload.toUserId, payload.content)\r\n      this.messages.push(payload) // 前端立即显示\r\n      this.inputMessage = ''\r\n    },\r\n\r\n    // 格式化时间\r\n    formatTime(datetime) {\r\n      if (!datetime) return ''\r\n      const d = new Date(datetime)\r\n      return d.toLocaleTimeString()\r\n    },\r\n\r\n    // 获取在线用户\r\n    fetchOnlineUsers() {\r\n      egg.get('/user')\r\n          .then(res => {\r\n            // 不过滤自己\r\n            this.users = res.data\r\n          })\r\n          .catch(err => {\r\n            console.error(err)\r\n            ElMessage.error('获取用户列表失败')\r\n          })\r\n    },\r\n\r\n    // 根据 userId 获取用户名\r\n    getUsername(id) {\r\n      const user = this.users.find(u => u.id === id)\r\n      return user ? user.username : '未知'\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container {\r\n  height: 90vh;\r\n}\r\n\r\n.user-list {\r\n  padding: 10px;\r\n}\r\n\r\n.user-card {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n}\r\n\r\n.user-scroll {\r\n  max-height: 70vh;\r\n  margin-top: 10px;\r\n}\r\n\r\n.el-list-item {\r\n  padding: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.el-list-item.active {\r\n  background-color: #e6f7ff;\r\n}\r\n\r\n.group-btn {\r\n  margin-top: 10px;\r\n  width: 100%;\r\n}\r\n\r\n.chat-main {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n}\r\n\r\n.chat-card {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n}\r\n\r\n.messages {\r\n  flex: 1;\r\n  padding: 10px;\r\n  overflow-y: auto;\r\n  background-color: #f9f9f9;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.message {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.message.mine {\r\n  text-align: right;\r\n}\r\n\r\n.message .from {\r\n  font-weight: bold;\r\n  margin-right: 5px;\r\n}\r\n\r\n.message .time {\r\n  font-size: 12px;\r\n  color: #888;\r\n  margin-left: 5px;\r\n}\r\n\r\n.input-area {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}