{"ast":null,"code":"import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nlet stompClient = null;\nlet isConnected = false; // 新增标记\n\nexport function connect(userId, onMessageReceived) {\n  const socket = new SockJS('http://localhost:8080/ws-chat');\n  stompClient = new Client({\n    webSocketFactory: () => socket,\n    debug: str => console.log(str)\n  });\n  stompClient.onConnect = () => {\n    console.log('STOMP connected');\n    isConnected = true;\n\n    // 群聊\n    stompClient.subscribe('/topic/group', msg => onMessageReceived(JSON.parse(msg.body)));\n    // 私聊\n    stompClient.subscribe(`/user/${userId}/queue/private`, msg => onMessageReceived(JSON.parse(msg.body)));\n  };\n  stompClient.onStompError = frame => {\n    console.error('Broker reported error: ' + frame.headers['message']);\n    console.error('Additional details: ' + frame.body);\n  };\n  stompClient.activate();\n}\n\n// 发送消息前检查连接状态\nexport function sendMessage(fromUserId, toUserId, content) {\n  if (!stompClient || !isConnected) {\n    console.error('STOMP not connected yet!');\n    return;\n  }\n  stompClient.publish({\n    destination: '/app/chat.send',\n    body: JSON.stringify({\n      fromUserId,\n      toUserId,\n      content\n    })\n  });\n}","map":{"version":3,"names":["Client","SockJS","stompClient","isConnected","connect","userId","onMessageReceived","socket","webSocketFactory","debug","str","console","log","onConnect","subscribe","msg","JSON","parse","body","onStompError","frame","error","headers","activate","sendMessage","fromUserId","toUserId","content","publish","destination","stringify"],"sources":["D:/Final/springboot_egg/egg-web/src/utils/chat.js"],"sourcesContent":["import { Client } from '@stomp/stompjs'\r\nimport SockJS from 'sockjs-client'\r\n\r\nlet stompClient = null\r\nlet isConnected = false // 新增标记\r\n\r\nexport function connect(userId, onMessageReceived) {\r\n    const socket = new SockJS('http://localhost:8080/ws-chat')\r\n    stompClient = new Client({\r\n        webSocketFactory: () => socket,\r\n        debug: (str) => console.log(str)\r\n    })\r\n\r\n    stompClient.onConnect = () => {\r\n        console.log('STOMP connected')\r\n        isConnected = true\r\n\r\n        // 群聊\r\n        stompClient.subscribe('/topic/group', msg => onMessageReceived(JSON.parse(msg.body)))\r\n        // 私聊\r\n        stompClient.subscribe(`/user/${userId}/queue/private`, msg => onMessageReceived(JSON.parse(msg.body)))\r\n    }\r\n\r\n    stompClient.onStompError = (frame) => {\r\n        console.error('Broker reported error: ' + frame.headers['message'])\r\n        console.error('Additional details: ' + frame.body)\r\n    }\r\n\r\n    stompClient.activate()\r\n}\r\n\r\n// 发送消息前检查连接状态\r\nexport function sendMessage(fromUserId, toUserId, content) {\r\n    if (!stompClient || !isConnected) {\r\n        console.error('STOMP not connected yet!')\r\n        return\r\n    }\r\n    stompClient.publish({\r\n        destination: '/app/chat.send',\r\n        body: JSON.stringify({ fromUserId, toUserId, content })\r\n    })\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,OAAOC,MAAM,MAAM,eAAe;AAElC,IAAIC,WAAW,GAAG,IAAI;AACtB,IAAIC,WAAW,GAAG,KAAK,EAAC;;AAExB,OAAO,SAASC,OAAOA,CAACC,MAAM,EAAEC,iBAAiB,EAAE;EAC/C,MAAMC,MAAM,GAAG,IAAIN,MAAM,CAAC,+BAA+B,CAAC;EAC1DC,WAAW,GAAG,IAAIF,MAAM,CAAC;IACrBQ,gBAAgB,EAAEA,CAAA,KAAMD,MAAM;IAC9BE,KAAK,EAAGC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG;EACnC,CAAC,CAAC;EAEFR,WAAW,CAACW,SAAS,GAAG,MAAM;IAC1BF,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9BT,WAAW,GAAG,IAAI;;IAElB;IACAD,WAAW,CAACY,SAAS,CAAC,cAAc,EAAEC,GAAG,IAAIT,iBAAiB,CAACU,IAAI,CAACC,KAAK,CAACF,GAAG,CAACG,IAAI,CAAC,CAAC,CAAC;IACrF;IACAhB,WAAW,CAACY,SAAS,CAAC,SAAST,MAAM,gBAAgB,EAAEU,GAAG,IAAIT,iBAAiB,CAACU,IAAI,CAACC,KAAK,CAACF,GAAG,CAACG,IAAI,CAAC,CAAC,CAAC;EAC1G,CAAC;EAEDhB,WAAW,CAACiB,YAAY,GAAIC,KAAK,IAAK;IAClCT,OAAO,CAACU,KAAK,CAAC,yBAAyB,GAAGD,KAAK,CAACE,OAAO,CAAC,SAAS,CAAC,CAAC;IACnEX,OAAO,CAACU,KAAK,CAAC,sBAAsB,GAAGD,KAAK,CAACF,IAAI,CAAC;EACtD,CAAC;EAEDhB,WAAW,CAACqB,QAAQ,CAAC,CAAC;AAC1B;;AAEA;AACA,OAAO,SAASC,WAAWA,CAACC,UAAU,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EACvD,IAAI,CAACzB,WAAW,IAAI,CAACC,WAAW,EAAE;IAC9BQ,OAAO,CAACU,KAAK,CAAC,0BAA0B,CAAC;IACzC;EACJ;EACAnB,WAAW,CAAC0B,OAAO,CAAC;IAChBC,WAAW,EAAE,gBAAgB;IAC7BX,IAAI,EAAEF,IAAI,CAACc,SAAS,CAAC;MAAEL,UAAU;MAAEC,QAAQ;MAAEC;IAAQ,CAAC;EAC1D,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}