{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { connect, sendMessage } from '@/utils/chat';\nimport egg from '@/utils/egg';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'ChatRoom',\n  data() {\n    return {\n      userId: null,\n      users: [],\n      selectedUserId: null,\n      messages: [],\n      inputMessage: ''\n    };\n  },\n  computed: {\n    filteredMessages() {\n      return this.messages.filter(msg => {\n        if (this.selectedUserId === null) return !msg.toUserId;\n        return msg.fromUserId === this.selectedUserId && msg.toUserId === Number(this.userId) || msg.fromUserId === Number(this.userId) && msg.toUserId === this.selectedUserId;\n      }).sort((a, b) => new Date(a.createTime) - new Date(b.createTime));\n    }\n  },\n  async mounted() {\n    this.userId = sessionStorage.getItem('userId');\n    if (!this.userId) {\n      ElMessage.error('请先登录');\n      this.$router.push('/login');\n      return;\n    }\n\n    // 1️⃣ 拉取全部用户并标记在线状态\n    await this.fetchAllUsers();\n\n    // 2️⃣ 加载本地缓存\n    this.loadMessagesFromLocal();\n\n    // 3️⃣ 拉取群聊消息（最近 100 条）\n    try {\n      const groupRes = await egg.get('/chat/group-msg');\n      this.mergeMessages(groupRes.data);\n    } catch (e) {\n      console.error('拉取群聊消息失败', e);\n    }\n\n    // 4️⃣ 拉取私聊离线消息\n    try {\n      const offlineRes = await egg.get('/user/offline-msg', {\n        params: {\n          userId: this.userId\n        }\n      });\n      this.mergeMessages(offlineRes.data);\n    } catch (e) {\n      console.error('拉取离线消息失败', e);\n    }\n\n    // 5️⃣ 保存合并后的消息到 localStorage\n    this.saveMessagesToLocal();\n\n    // 6️⃣ 连接 WebSocket\n    connect(Number(this.userId), this.onMessageReceived);\n\n    // 7️⃣ 滚动到底部\n    this.scrollToBottom();\n  },\n  methods: {\n    getStorageKey() {\n      return `chat_messages_user_${this.userId}`;\n    },\n    saveMessagesToLocal() {\n      const grouped = {};\n      this.messages.forEach(msg => {\n        const sessionId = msg.toUserId === null ? 'group' : msg.fromUserId === Number(this.userId) ? msg.toUserId : msg.fromUserId;\n        if (!grouped[sessionId]) grouped[sessionId] = [];\n        grouped[sessionId].push(msg);\n      });\n      localStorage.setItem(this.getStorageKey(), JSON.stringify(grouped));\n    },\n    loadMessagesFromLocal() {\n      const key = this.getStorageKey();\n      const grouped = JSON.parse(localStorage.getItem(key) || '{}');\n      const loaded = [];\n      Object.values(grouped).forEach(arr => loaded.push(...arr));\n      this.messages = loaded;\n    },\n    // ✅ 核心去重方法\n    mergeMessages(newMsgs) {\n      newMsgs.forEach(msg => {\n        if (msg.id) {\n          // 查找是否有临时消息匹配 content + fromUserId\n          const tempIndex = this.messages.findIndex(m => !m.id && m.fromUserId === msg.fromUserId && m.content === msg.content);\n          if (tempIndex !== -1) {\n            this.$set(this.messages, tempIndex, {\n              ...msg\n            });\n            return;\n          }\n\n          // 再检查是否已有同样 id 的消息\n          const exists = this.messages.find(m => m.id === msg.id);\n          if (!exists) this.messages.push(msg);\n        } else if (msg.tempId) {\n          // 临时消息直接去重\n          const exists = this.messages.find(m => m.tempId === msg.tempId);\n          if (!exists) this.messages.push(msg);\n        }\n      });\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const container = this.$refs.messageContainer;\n        if (container) container.scrollTop = container.scrollHeight;\n      });\n    },\n    onMessageReceived(msg) {\n      this.mergeMessages([msg]);\n      this.saveMessagesToLocal();\n      this.scrollToBottom();\n    },\n    selectUser(userId) {\n      this.selectedUserId = userId;\n      this.scrollToBottom();\n    },\n    sendChatMessage() {\n      const content = this.inputMessage.trim();\n      if (!content) return;\n      const tempId = Date.now();\n      const payload = {\n        fromUserId: Number(this.userId),\n        toUserId: this.selectedUserId,\n        content,\n        tempId\n      };\n\n      // 临时消息显示\n      const tempMsg = {\n        ...payload,\n        createTime: new Date().toISOString()\n      };\n      this.messages.push(tempMsg);\n      this.saveMessagesToLocal();\n      this.scrollToBottom();\n      this.inputMessage = '';\n      sendMessage(payload.fromUserId, payload.toUserId, payload.content, tempId);\n    },\n    formatTime(datetime) {\n      return datetime ? new Date(datetime).toLocaleTimeString() : '';\n    },\n    async fetchAllUsers() {\n      try {\n        const res = await egg.get('/user');\n        this.users = res.data.map(u => ({\n          ...u,\n          online: false\n        }));\n        const onlineRes = await egg.get('/user/online');\n        const onlineSet = new Set(onlineRes.data);\n        this.users.forEach(u => u.online = onlineSet.has(String(u.id)));\n      } catch (err) {\n        console.error('获取用户列表失败', err);\n        ElMessage.error('获取用户列表失败');\n      }\n    },\n    getUsername(id) {\n      const user = this.users.find(u => u.id === id);\n      return user ? user.username : '未知';\n    }\n  }\n};","map":{"version":3,"names":["connect","sendMessage","egg","ElMessage","name","data","userId","users","selectedUserId","messages","inputMessage","computed","filteredMessages","filter","msg","toUserId","fromUserId","Number","sort","a","b","Date","createTime","mounted","sessionStorage","getItem","error","$router","push","fetchAllUsers","loadMessagesFromLocal","groupRes","get","mergeMessages","e","console","offlineRes","params","saveMessagesToLocal","onMessageReceived","scrollToBottom","methods","getStorageKey","grouped","forEach","sessionId","localStorage","setItem","JSON","stringify","key","parse","loaded","Object","values","arr","newMsgs","id","tempIndex","findIndex","m","content","$set","exists","find","tempId","$nextTick","container","$refs","messageContainer","scrollTop","scrollHeight","selectUser","sendChatMessage","trim","now","payload","tempMsg","toISOString","formatTime","datetime","toLocaleTimeString","res","map","u","online","onlineRes","onlineSet","Set","has","String","err","getUsername","user","username"],"sources":["D:\\Final\\springboot_egg\\egg-web\\src\\user\\ChatRoom.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <!-- 左侧用户列表 -->\r\n    <aside class=\"user-list\">\r\n      <div class=\"user-card\">\r\n        <h3>聊天列表</h3>\r\n        <el-scrollbar class=\"user-scroll\">\r\n          <!-- 群聊 -->\r\n          <div\r\n              class=\"user-item\"\r\n              :class=\"{ active: selectedUserId === null }\"\r\n              @click=\"selectUser(null)\"\r\n          >\r\n            群聊\r\n            <span class=\"status-dot online\"></span>\r\n          </div>\r\n\r\n          <!-- 用户列表 -->\r\n          <div\r\n              class=\"user-item\"\r\n              v-for=\"user in users\"\r\n              :key=\"user.id\"\r\n              :class=\"{ active: selectedUserId === user.id }\"\r\n              @click=\"selectUser(user.id)\"\r\n          >\r\n            {{ user.username }}\r\n            <span class=\"status-dot\" :class=\"user.online ? 'online' : 'offline'\"></span>\r\n          </div>\r\n        </el-scrollbar>\r\n      </div>\r\n    </aside>\r\n\r\n    <!-- 右侧聊天区 -->\r\n    <main class=\"chat-main\">\r\n      <div class=\"messages\" ref=\"messageContainer\">\r\n        <div\r\n            v-for=\"msg in filteredMessages\"\r\n            :key=\"msg.id || msg.tempId\"\r\n            :class=\"['message', msg.fromUserId === Number(userId) ? 'mine' : 'other']\"\r\n        >\r\n          <span class=\"from\">\r\n            {{ msg.fromUserId === Number(userId) ? '我' : getUsername(msg.fromUserId) }}\r\n          </span>\r\n          <div class=\"bubble\">\r\n            <span class=\"content\">{{ msg.content }}</span>\r\n          </div>\r\n          <span class=\"time\">{{ formatTime(msg.createTime) }}</span>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 输入框区域 -->\r\n      <div class=\"input-area\">\r\n        <el-input\r\n            v-model=\"inputMessage\"\r\n            placeholder=\"请输入消息\"\r\n            @keyup.enter=\"sendChatMessage\"\r\n            class=\"input-box\"\r\n            clearable\r\n        ></el-input>\r\n        <el-button type=\"primary\" @click=\"sendChatMessage\">发送</el-button>\r\n      </div>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { connect, sendMessage } from '@/utils/chat'\r\nimport egg from '@/utils/egg'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'ChatRoom',\r\n  data() {\r\n    return {\r\n      userId: null,\r\n      users: [],\r\n      selectedUserId: null,\r\n      messages: [],\r\n      inputMessage: ''\r\n    }\r\n  },\r\n  computed: {\r\n    filteredMessages() {\r\n      return this.messages\r\n          .filter(msg => {\r\n            if (this.selectedUserId === null) return !msg.toUserId\r\n            return (\r\n                (msg.fromUserId === this.selectedUserId && msg.toUserId === Number(this.userId)) ||\r\n                (msg.fromUserId === Number(this.userId) && msg.toUserId === this.selectedUserId)\r\n            )\r\n          })\r\n          .sort((a, b) => new Date(a.createTime) - new Date(b.createTime))\r\n    }\r\n  },\r\n  async mounted() {\r\n    this.userId = sessionStorage.getItem('userId')\r\n    if (!this.userId) {\r\n      ElMessage.error('请先登录')\r\n      this.$router.push('/login')\r\n      return\r\n    }\r\n\r\n    // 1️⃣ 拉取全部用户并标记在线状态\r\n    await this.fetchAllUsers()\r\n\r\n    // 2️⃣ 加载本地缓存\r\n    this.loadMessagesFromLocal()\r\n\r\n    // 3️⃣ 拉取群聊消息（最近 100 条）\r\n    try {\r\n      const groupRes = await egg.get('/chat/group-msg')\r\n      this.mergeMessages(groupRes.data)\r\n    } catch (e) {\r\n      console.error('拉取群聊消息失败', e)\r\n    }\r\n\r\n    // 4️⃣ 拉取私聊离线消息\r\n    try {\r\n      const offlineRes = await egg.get('/user/offline-msg', { params: { userId: this.userId } })\r\n      this.mergeMessages(offlineRes.data)\r\n    } catch (e) {\r\n      console.error('拉取离线消息失败', e)\r\n    }\r\n\r\n    // 5️⃣ 保存合并后的消息到 localStorage\r\n    this.saveMessagesToLocal()\r\n\r\n    // 6️⃣ 连接 WebSocket\r\n    connect(Number(this.userId), this.onMessageReceived)\r\n\r\n    // 7️⃣ 滚动到底部\r\n    this.scrollToBottom()\r\n  },\r\n  methods: {\r\n    getStorageKey() {\r\n      return `chat_messages_user_${this.userId}`\r\n    },\r\n\r\n    saveMessagesToLocal() {\r\n      const grouped = {}\r\n      this.messages.forEach(msg => {\r\n        const sessionId =\r\n            msg.toUserId === null\r\n                ? 'group'\r\n                : msg.fromUserId === Number(this.userId)\r\n                    ? msg.toUserId\r\n                    : msg.fromUserId\r\n        if (!grouped[sessionId]) grouped[sessionId] = []\r\n        grouped[sessionId].push(msg)\r\n      })\r\n      localStorage.setItem(this.getStorageKey(), JSON.stringify(grouped))\r\n    },\r\n\r\n    loadMessagesFromLocal() {\r\n      const key = this.getStorageKey()\r\n      const grouped = JSON.parse(localStorage.getItem(key) || '{}')\r\n      const loaded = []\r\n      Object.values(grouped).forEach(arr => loaded.push(...arr))\r\n      this.messages = loaded\r\n    },\r\n\r\n    // ✅ 核心去重方法\r\n    mergeMessages(newMsgs) {\r\n      newMsgs.forEach(msg => {\r\n        if (msg.id) {\r\n          // 查找是否有临时消息匹配 content + fromUserId\r\n          const tempIndex = this.messages.findIndex(m =>\r\n              !m.id &&\r\n              m.fromUserId === msg.fromUserId &&\r\n              m.content === msg.content\r\n          );\r\n          if (tempIndex !== -1) {\r\n            this.$set(this.messages, tempIndex, { ...msg });\r\n            return;\r\n          }\r\n\r\n          // 再检查是否已有同样 id 的消息\r\n          const exists = this.messages.find(m => m.id === msg.id);\r\n          if (!exists) this.messages.push(msg);\r\n        } else if (msg.tempId) {\r\n          // 临时消息直接去重\r\n          const exists = this.messages.find(m => m.tempId === msg.tempId);\r\n          if (!exists) this.messages.push(msg);\r\n        }\r\n      });\r\n    },\r\n\r\n    scrollToBottom() {\r\n      this.$nextTick(() => {\r\n        const container = this.$refs.messageContainer\r\n        if (container) container.scrollTop = container.scrollHeight\r\n      })\r\n    },\r\n\r\n    onMessageReceived(msg) {\r\n      this.mergeMessages([msg])\r\n      this.saveMessagesToLocal()\r\n      this.scrollToBottom()\r\n    },\r\n\r\n    selectUser(userId) {\r\n      this.selectedUserId = userId\r\n      this.scrollToBottom()\r\n    },\r\n\r\n    sendChatMessage() {\r\n      const content = this.inputMessage.trim()\r\n      if (!content) return\r\n\r\n      const tempId = Date.now()\r\n      const payload = {\r\n        fromUserId: Number(this.userId),\r\n        toUserId: this.selectedUserId,\r\n        content,\r\n        tempId\r\n      }\r\n\r\n      // 临时消息显示\r\n      const tempMsg = { ...payload, createTime: new Date().toISOString() }\r\n      this.messages.push(tempMsg)\r\n      this.saveMessagesToLocal()\r\n      this.scrollToBottom()\r\n\r\n      this.inputMessage = ''\r\n      sendMessage(payload.fromUserId, payload.toUserId, payload.content, tempId)\r\n    },\r\n\r\n    formatTime(datetime) {\r\n      return datetime ? new Date(datetime).toLocaleTimeString() : ''\r\n    },\r\n\r\n    async fetchAllUsers() {\r\n      try {\r\n        const res = await egg.get('/user')\r\n        this.users = res.data.map(u => ({ ...u, online: false }))\r\n\r\n        const onlineRes = await egg.get('/user/online')\r\n        const onlineSet = new Set(onlineRes.data)\r\n        this.users.forEach(u => (u.online = onlineSet.has(String(u.id))))\r\n      } catch (err) {\r\n        console.error('获取用户列表失败', err)\r\n        ElMessage.error('获取用户列表失败')\r\n      }\r\n    },\r\n\r\n    getUsername(id) {\r\n      const user = this.users.find(u => u.id === id)\r\n      return user ? user.username : '未知'\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container { display: flex; height: 100vh; width: 100vw; }\r\n\r\n/* 左侧用户列表 */\r\n.user-list { width: 20%; display: flex; flex-direction: column; padding: 10px; background-color: #fafafa; box-sizing: border-box; height: 100%; }\r\n.user-card { display: flex; flex-direction: column; flex: 1; height: 100%; }\r\n.user-scroll { flex: 1; overflow-y: auto; margin-top: 10px; }\r\n.user-item { padding: 10px; border: 1px solid #ddd; border-radius: 6px; cursor: pointer; background-color: #fff; margin-bottom: 6px; display: flex; align-items: center; justify-content: space-between; }\r\n.user-item.active { background-color: #bae7ff; border-color: #91d5ff; }\r\n.status-dot { width: 10px; height: 10px; border-radius: 50%; display: inline-block; }\r\n.status-dot.online { background-color: #52c41a; }\r\n.status-dot.offline { background-color: #f5222d; }\r\n\r\n/* 右侧聊天区 */\r\n.chat-main { width: 80%; display: flex; flex-direction: column; padding: 10px; box-sizing: border-box; background-color: #f0f2f5; height: 100%; }\r\n.messages { flex: 1; overflow-y: auto; padding: 10px; background-color: #ffffff; border-radius: 8px; display: flex; flex-direction: column; gap: 10px; }\r\n.input-area { display: flex; gap: 10px; padding-top: 10px; height: 50px; border-top: 1px solid #ddd; }\r\n.input-box { flex: 1; }\r\n.message { display: flex; flex-direction: column; }\r\n.message.mine { align-items: flex-end; }\r\n.message.other { align-items: flex-start; }\r\n.bubble { max-width: 70%; padding: 10px 14px; border-radius: 16px; word-wrap: break-word; position: relative; background-color: #e6f7ff; }\r\n.message.mine .bubble { background-color: #91d5ff; color: #000; }\r\n.message.mine .bubble::after { content: \"\"; position: absolute; right: -8px; top: 10px; border-width: 8px 0 8px 8px; border-style: solid; border-color: transparent transparent transparent #91d5ff; }\r\n.message.other .bubble::after { content: \"\"; position: absolute; left: -8px; top: 10px; border-width: 8px 8px 8px 0; border-style: solid; border-color: transparent #e6f7ff transparent transparent; }\r\n.time { font-size: 12px; color: #999; margin-top: 2px; }\r\n.message.mine .time { text-align: right; }\r\n.message.other .time { text-align: left; }\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}