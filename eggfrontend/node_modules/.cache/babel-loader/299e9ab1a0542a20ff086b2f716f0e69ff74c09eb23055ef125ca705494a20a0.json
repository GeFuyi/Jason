{"ast":null,"code":"import { ref, reactive, onMounted } from 'vue';\nimport axios from 'axios';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nconst BASE_URL = 'http://localhost:8090';\nexport default {\n  name: 'UserList',\n  setup() {\n    // 筛选条件 — 使用 null 代表未选择\n    const criteria = reactive({\n      username: null,\n      email: null,\n      age: null,\n      gender: null\n    });\n    const usernameList = ref([]);\n    const emailList = ref([]);\n    const ageList = ref([]);\n    const genderList = ref([true, false]);\n\n    // 全量用户（仅在页面初次加载时请求并缓存一次）\n    const allUsers = ref([]); // 只读一次，用于首次显示\n    const pagedUsers = ref([]); // 当前页显示的数据（由后端分页或首次本地切片提供）\n    const page = ref(1);\n    const pageSize = ref(10);\n    const total = ref(0);\n    const totalPages = ref(1);\n\n    // 弹窗 & 表单（reactive 方便模板中直接使用属性）\n    const dialogVisible = ref(false);\n    const dialogTitle = ref('新增用户');\n    const formUser = reactive({\n      id: null,\n      username: '',\n      email: '',\n      password: '',\n      age: null,\n      gender: true\n    });\n\n    // ---------- helper: 构建后端查询参数（只包含非空项） ----------\n    const buildQueryParams = () => {\n      const params = {\n        page: page.value,\n        pageSize: pageSize.value\n      };\n      if (criteria.username !== null && criteria.username !== '') params.username = criteria.username;\n      if (criteria.email !== null && criteria.email !== '') params.email = criteria.email;\n      if (criteria.age !== null && criteria.age !== '') params.age = criteria.age;\n      if (criteria.gender !== null && criteria.gender !== '') params.gender = criteria.gender;\n      return params;\n    };\n\n    // ---------- 获取下拉选项 ----------\n    const fetchOptions = async () => {\n      try {\n        const [uRes, eRes, aRes] = await Promise.all([axios.get(`${BASE_URL}/user/options/username`), axios.get(`${BASE_URL}/user/options/email`), axios.get(`${BASE_URL}/user/options/age`)]);\n        usernameList.value = Array.isArray(uRes.data) ? uRes.data : [];\n        emailList.value = Array.isArray(eRes.data) ? eRes.data : [];\n        ageList.value = Array.isArray(aRes.data) ? aRes.data : [];\n      } catch (err) {\n        ElMessage.error('获取下拉选项失败: ' + (err && err.message ? err.message : err));\n      }\n    };\n\n    // ---------- 页面初次加载：仅调用一次，尽量获取所有用户（有回退逻辑） ----------\n    const fetchAllOnce = async () => {\n      try {\n        // 尝试几个常见的全量接口（按优先级）：/user/all -> /user -> /user/query?page=1&pageSize=100000\n        let res;\n        try {\n          res = await axios.get(`${BASE_URL}/user/all`);\n        } catch (e1) {\n          try {\n            res = await axios.get(`${BASE_URL}/user`);\n          } catch (e2) {\n            // 回退：用分页接口拿很大的 pageSize（后端若有限制可能仍失败）\n            res = await axios.get(`${BASE_URL}/user/query`, {\n              params: {\n                page: 1,\n                pageSize: 100000\n              }\n            });\n          }\n        }\n        // 解析返回数据（兼容 /user 查询返回数组 或 /user/query 返回 {data, total}）\n        if (Array.isArray(res.data)) {\n          allUsers.value = res.data;\n        } else if (res.data && Array.isArray(res.data.data)) {\n          allUsers.value = res.data.data;\n        } else {\n          allUsers.value = [];\n        }\n        // 使用 allUsers 填充首次页面（第一页）\n        total.value = allUsers.value.length;\n        totalPages.value = Math.max(1, Math.ceil(total.value / pageSize.value));\n        page.value = 1;\n        const start = 0;\n        const end = Math.min(pageSize.value, total.value);\n        pagedUsers.value = allUsers.value.slice(start, end);\n      } catch (err) {\n        // 若全量拿失败，也不阻断页面：初始化为空，提示信息\n        allUsers.value = [];\n        pagedUsers.value = [];\n        total.value = 0;\n        totalPages.value = 1;\n        ElMessage.error('首次加载用户失败：' + (err && err.message ? err.message : err));\n      }\n    };\n\n    // ---------- 查询用户（后端分页） - 用于“查询按钮”和“分页切换” ----------\n    const fetchUsers = async () => {\n      try {\n        const params = buildQueryParams();\n        const res = await axios.get(`${BASE_URL}/user/query`, {\n          params\n        });\n        // 期望后端返回 { data: [...], total: N }\n        pagedUsers.value = Array.isArray(res.data.data) ? res.data.data : [];\n        total.value = typeof res.data.total === 'number' ? res.data.total : Array.isArray(res.data) ? res.data.length : 0;\n        totalPages.value = Math.max(1, Math.ceil(total.value / pageSize.value));\n      } catch (err) {\n        ElMessage.error('查询用户失败: ' + (err && err.message ? err.message : err));\n      }\n    };\n\n    // ---------- UI 事件：点击“查询” ----------\n    const onQuery = async () => {\n      // 点击查询后：走后端分页接口（不再请求全量）\n      page.value = 1;\n      await fetchUsers();\n    };\n\n    // ---------- 分页切换 ----------\n    const changePage = async p => {\n      page.value = p;\n      // 切页也走后端分页接口（保持与查询一致）\n      await fetchUsers();\n    };\n\n    // ---------- 新增/编辑弹窗 ----------\n    const openDialog = (type, user = null) => {\n      dialogTitle.value = type === 'add' ? '新增用户' : '编辑用户';\n      if (user) {\n        // 将用户属性拷贝到 formUser（确保 reactive 对象被更新）\n        formUser.id = user.id ?? null;\n        formUser.username = user.username ?? '';\n        formUser.email = user.email ?? '';\n        formUser.password = ''; // 编辑时通常不回显密码\n        formUser.age = user.age ?? null;\n        formUser.gender = user.gender ?? true;\n      } else {\n        formUser.id = null;\n        formUser.username = '';\n        formUser.email = '';\n        formUser.password = '';\n        formUser.age = null;\n        formUser.gender = true;\n      }\n      dialogVisible.value = true;\n    };\n\n    // ---------- 保存（新增/更新） ----------\n    const saveUser = async () => {\n      try {\n        if (formUser.id) {\n          await axios.put(`${BASE_URL}/user/${formUser.id}`, {\n            ...formUser\n          });\n          ElMessage.success('更新成功');\n        } else {\n          await axios.post(`${BASE_URL}/user`, {\n            ...formUser\n          });\n          ElMessage.success('新增成功');\n        }\n        dialogVisible.value = false;\n        // 新增/更新后刷新下拉选项 & 当前分页（但不要重新请求全量）\n        await fetchOptions();\n        await fetchUsers();\n      } catch (err) {\n        ElMessage.error('保存失败: ' + (err && err.message ? err.message : err));\n      }\n    };\n\n    // ---------- 删除（带确认） ----------\n    const confirmDelete = async id => {\n      try {\n        await ElMessageBox.confirm('确定要删除该用户吗？', '删除确认', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        });\n        await axios.delete(`${BASE_URL}/user/${id}`);\n        ElMessage.success('删除成功');\n        // 删除后刷新下拉选项 & 当前分页（保持不请求全量）\n        await fetchOptions();\n        await fetchUsers();\n      } catch (err) {\n        // 如果用户取消 confirm，ElMessageBox 会抛出，忽略取消\n        if (err && err !== 'cancel') {\n          ElMessage.error('删除失败: ' + (err && err.message ? err.message : err));\n        }\n      }\n    };\n\n    // ---------- mounted: 获取下拉 & 初次全量加载一次（只在页面加载时） ----------\n    onMounted(async () => {\n      await fetchOptions();\n      await fetchAllOnce(); // 仅此一次请求所有用户\n      // 注意：之后的查询/分页都会走 fetchUsers()，不会再调用 fetchAllOnce()\n    });\n    return {\n      criteria,\n      usernameList,\n      emailList,\n      ageList,\n      genderList,\n      pagedUsers,\n      page,\n      pageSize,\n      total,\n      totalPages,\n      dialogVisible,\n      dialogTitle,\n      formUser,\n      onQuery,\n      changePage,\n      openDialog,\n      saveUser,\n      confirmDelete\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","axios","ElMessage","ElMessageBox","BASE_URL","name","setup","criteria","username","email","age","gender","usernameList","emailList","ageList","genderList","allUsers","pagedUsers","page","pageSize","total","totalPages","dialogVisible","dialogTitle","formUser","id","password","buildQueryParams","params","value","fetchOptions","uRes","eRes","aRes","Promise","all","get","Array","isArray","data","err","error","message","fetchAllOnce","res","e1","e2","length","Math","max","ceil","start","end","min","slice","fetchUsers","onQuery","changePage","p","openDialog","type","user","saveUser","put","success","post","confirmDelete","confirm","confirmButtonText","cancelButtonText","delete"],"sources":["D:\\Final\\springboot_egg\\egg-web\\src\\user\\UserList.vue"],"sourcesContent":["<template>\r\n  <div class=\"user-list\">\r\n    <el-card shadow=\"hover\">\r\n      <h2>用户管理</h2>\r\n\r\n      <!-- 条件筛选 -->\r\n      <div class=\"filters\">\r\n        <el-select class=\"filter-item\" v-model=\"criteria.username\" placeholder=\"全部用户名\" clearable>\r\n          <el-option v-for=\"u in usernameList\" :key=\"u\" :label=\"u\" :value=\"u\"></el-option>\r\n        </el-select>\r\n\r\n        <el-select class=\"filter-item\" v-model=\"criteria.email\" placeholder=\"全部邮箱\" clearable>\r\n          <el-option v-for=\"e in emailList\" :key=\"e\" :label=\"e\" :value=\"e\"></el-option>\r\n        </el-select>\r\n\r\n        <el-select class=\"filter-item\" v-model=\"criteria.age\" placeholder=\"全部年龄\" clearable>\r\n          <el-option v-for=\"a in ageList\" :key=\"a\" :label=\"a\" :value=\"a\"></el-option>\r\n        </el-select>\r\n\r\n        <el-select class=\"filter-item\" v-model=\"criteria.gender\" placeholder=\"全部性别\" clearable>\r\n          <el-option v-for=\"g in genderList\" :key=\"String(g)\" :label=\"g ? '男' : '女'\" :value=\"g\"></el-option>\r\n        </el-select>\r\n\r\n        <el-button class=\"filter-item\" type=\"primary\" @click=\"onQuery\">查询</el-button>\r\n        <el-button class=\"filter-item\" type=\"success\" @click=\"openDialog('add')\">新增用户</el-button>\r\n      </div>\r\n\r\n      <!-- 用户表格 -->\r\n      <el-table :data=\"pagedUsers\" style=\"width: 100%\" stripe>\r\n        <el-table-column prop=\"id\" label=\"ID\" width=\"60\" />\r\n        <el-table-column prop=\"username\" label=\"用户名\" />\r\n        <el-table-column prop=\"email\" label=\"邮箱\" />\r\n        <el-table-column prop=\"age\" label=\"年龄\" width=\"80\" />\r\n        <el-table-column prop=\"gender\" label=\"性别\" width=\"80\">\r\n          <template #default=\"scope\">\r\n            {{ scope.row.gender ? '男' : '女' }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\" width=\"220\">\r\n          <template #default=\"scope\">\r\n            <el-button type=\"primary\" size=\"mini\" @click=\"openDialog('edit', scope.row)\">编辑</el-button>\r\n            <el-button type=\"danger\" size=\"mini\" @click=\"confirmDelete(scope.row.id)\">删除</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n      <!-- 分页 -->\r\n      <div class=\"pagination-info\">\r\n        当前页: {{ page }} / {{ totalPages }} ，总条数: {{ total }}\r\n      </div>\r\n      <el-pagination\r\n          background\r\n          layout=\"prev, pager, next\"\r\n          :page-size=\"pageSize\"\r\n          :current-page=\"page\"\r\n          :total=\"total\"\r\n          @current-change=\"changePage\"\r\n      ></el-pagination>\r\n    </el-card>\r\n\r\n    <!-- 新增/编辑用户弹窗 -->\r\n    <el-dialog :title=\"dialogTitle\" v-model=\"dialogVisible\">\r\n      <el-form :model=\"formUser\" label-width=\"80px\">\r\n        <el-form-item label=\"用户名\">\r\n          <el-input v-model=\"formUser.username\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"邮箱\">\r\n          <el-input v-model=\"formUser.email\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"密码\">\r\n          <el-input v-model=\"formUser.password\" type=\"password\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"年龄\">\r\n          <el-input v-model.number=\"formUser.age\" type=\"number\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"性别\">\r\n          <el-select v-model=\"formUser.gender\">\r\n            <el-option label=\"男\" :value=\"true\"></el-option>\r\n            <el-option label=\"女\" :value=\"false\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n      </el-form>\r\n\r\n      <template #footer>\r\n        <el-button @click=\"dialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"saveUser\">保存</el-button>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, onMounted } from 'vue';\r\nimport axios from 'axios';\r\nimport { ElMessage, ElMessageBox } from 'element-plus';\r\n\r\nconst BASE_URL = 'http://localhost:8090';\r\n\r\nexport default {\r\n  name: 'UserList',\r\n  setup() {\r\n    // 筛选条件 — 使用 null 代表未选择\r\n    const criteria = reactive({ username: null, email: null, age: null, gender: null });\r\n    const usernameList = ref([]);\r\n    const emailList = ref([]);\r\n    const ageList = ref([]);\r\n    const genderList = ref([true, false]);\r\n\r\n    // 全量用户（仅在页面初次加载时请求并缓存一次）\r\n    const allUsers = ref([]); // 只读一次，用于首次显示\r\n    const pagedUsers = ref([]); // 当前页显示的数据（由后端分页或首次本地切片提供）\r\n    const page = ref(1);\r\n    const pageSize = ref(10);\r\n    const total = ref(0);\r\n    const totalPages = ref(1);\r\n\r\n    // 弹窗 & 表单（reactive 方便模板中直接使用属性）\r\n    const dialogVisible = ref(false);\r\n    const dialogTitle = ref('新增用户');\r\n    const formUser = reactive({ id: null, username: '', email: '', password: '', age: null, gender: true });\r\n\r\n    // ---------- helper: 构建后端查询参数（只包含非空项） ----------\r\n    const buildQueryParams = () => {\r\n      const params = {\r\n        page: page.value,\r\n        pageSize: pageSize.value\r\n      };\r\n      if (criteria.username !== null && criteria.username !== '') params.username = criteria.username;\r\n      if (criteria.email !== null && criteria.email !== '') params.email = criteria.email;\r\n      if (criteria.age !== null && criteria.age !== '') params.age = criteria.age;\r\n      if (criteria.gender !== null && criteria.gender !== '') params.gender = criteria.gender;\r\n      return params;\r\n    };\r\n\r\n    // ---------- 获取下拉选项 ----------\r\n    const fetchOptions = async () => {\r\n      try {\r\n        const [uRes, eRes, aRes] = await Promise.all([\r\n          axios.get(`${BASE_URL}/user/options/username`),\r\n          axios.get(`${BASE_URL}/user/options/email`),\r\n          axios.get(`${BASE_URL}/user/options/age`)\r\n        ]);\r\n        usernameList.value = Array.isArray(uRes.data) ? uRes.data : [];\r\n        emailList.value = Array.isArray(eRes.data) ? eRes.data : [];\r\n        ageList.value = Array.isArray(aRes.data) ? aRes.data : [];\r\n      } catch (err) {\r\n        ElMessage.error('获取下拉选项失败: ' + (err && err.message ? err.message : err));\r\n      }\r\n    };\r\n\r\n    // ---------- 页面初次加载：仅调用一次，尽量获取所有用户（有回退逻辑） ----------\r\n    const fetchAllOnce = async () => {\r\n      try {\r\n        // 尝试几个常见的全量接口（按优先级）：/user/all -> /user -> /user/query?page=1&pageSize=100000\r\n        let res;\r\n        try {\r\n          res = await axios.get(`${BASE_URL}/user/all`);\r\n        } catch (e1) {\r\n          try {\r\n            res = await axios.get(`${BASE_URL}/user`);\r\n          } catch (e2) {\r\n            // 回退：用分页接口拿很大的 pageSize（后端若有限制可能仍失败）\r\n            res = await axios.get(`${BASE_URL}/user/query`, { params: { page: 1, pageSize: 100000 } });\r\n          }\r\n        }\r\n        // 解析返回数据（兼容 /user 查询返回数组 或 /user/query 返回 {data, total}）\r\n        if (Array.isArray(res.data)) {\r\n          allUsers.value = res.data;\r\n        } else if (res.data && Array.isArray(res.data.data)) {\r\n          allUsers.value = res.data.data;\r\n        } else {\r\n          allUsers.value = [];\r\n        }\r\n        // 使用 allUsers 填充首次页面（第一页）\r\n        total.value = allUsers.value.length;\r\n        totalPages.value = Math.max(1, Math.ceil(total.value / pageSize.value));\r\n        page.value = 1;\r\n        const start = 0;\r\n        const end = Math.min(pageSize.value, total.value);\r\n        pagedUsers.value = allUsers.value.slice(start, end);\r\n      } catch (err) {\r\n        // 若全量拿失败，也不阻断页面：初始化为空，提示信息\r\n        allUsers.value = [];\r\n        pagedUsers.value = [];\r\n        total.value = 0;\r\n        totalPages.value = 1;\r\n        ElMessage.error('首次加载用户失败：' + (err && err.message ? err.message : err));\r\n      }\r\n    };\r\n\r\n    // ---------- 查询用户（后端分页） - 用于“查询按钮”和“分页切换” ----------\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const params = buildQueryParams();\r\n        const res = await axios.get(`${BASE_URL}/user/query`, { params });\r\n        // 期望后端返回 { data: [...], total: N }\r\n        pagedUsers.value = Array.isArray(res.data.data) ? res.data.data : [];\r\n        total.value = typeof res.data.total === 'number' ? res.data.total : (Array.isArray(res.data) ? res.data.length : 0);\r\n        totalPages.value = Math.max(1, Math.ceil(total.value / pageSize.value));\r\n      } catch (err) {\r\n        ElMessage.error('查询用户失败: ' + (err && err.message ? err.message : err));\r\n      }\r\n    };\r\n\r\n    // ---------- UI 事件：点击“查询” ----------\r\n    const onQuery = async () => {\r\n      // 点击查询后：走后端分页接口（不再请求全量）\r\n      page.value = 1;\r\n      await fetchUsers();\r\n    };\r\n\r\n    // ---------- 分页切换 ----------\r\n    const changePage = async (p) => {\r\n      page.value = p;\r\n      // 切页也走后端分页接口（保持与查询一致）\r\n      await fetchUsers();\r\n    };\r\n\r\n    // ---------- 新增/编辑弹窗 ----------\r\n    const openDialog = (type, user = null) => {\r\n      dialogTitle.value = type === 'add' ? '新增用户' : '编辑用户';\r\n      if (user) {\r\n        // 将用户属性拷贝到 formUser（确保 reactive 对象被更新）\r\n        formUser.id = user.id ?? null;\r\n        formUser.username = user.username ?? '';\r\n        formUser.email = user.email ?? '';\r\n        formUser.password = ''; // 编辑时通常不回显密码\r\n        formUser.age = user.age ?? null;\r\n        formUser.gender = user.gender ?? true;\r\n      } else {\r\n        formUser.id = null;\r\n        formUser.username = '';\r\n        formUser.email = '';\r\n        formUser.password = '';\r\n        formUser.age = null;\r\n        formUser.gender = true;\r\n      }\r\n      dialogVisible.value = true;\r\n    };\r\n\r\n    // ---------- 保存（新增/更新） ----------\r\n    const saveUser = async () => {\r\n      try {\r\n        if (formUser.id) {\r\n          await axios.put(`${BASE_URL}/user/${formUser.id}`, { ...formUser });\r\n          ElMessage.success('更新成功');\r\n        } else {\r\n          await axios.post(`${BASE_URL}/user`, { ...formUser });\r\n          ElMessage.success('新增成功');\r\n        }\r\n        dialogVisible.value = false;\r\n        // 新增/更新后刷新下拉选项 & 当前分页（但不要重新请求全量）\r\n        await fetchOptions();\r\n        await fetchUsers();\r\n      } catch (err) {\r\n        ElMessage.error('保存失败: ' + (err && err.message ? err.message : err));\r\n      }\r\n    };\r\n\r\n    // ---------- 删除（带确认） ----------\r\n    const confirmDelete = async (id) => {\r\n      try {\r\n        await ElMessageBox.confirm('确定要删除该用户吗？', '删除确认', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        });\r\n        await axios.delete(`${BASE_URL}/user/${id}`);\r\n        ElMessage.success('删除成功');\r\n        // 删除后刷新下拉选项 & 当前分页（保持不请求全量）\r\n        await fetchOptions();\r\n        await fetchUsers();\r\n      } catch (err) {\r\n        // 如果用户取消 confirm，ElMessageBox 会抛出，忽略取消\r\n        if (err && err !== 'cancel') {\r\n          ElMessage.error('删除失败: ' + (err && err.message ? err.message : err));\r\n        }\r\n      }\r\n    };\r\n\r\n    // ---------- mounted: 获取下拉 & 初次全量加载一次（只在页面加载时） ----------\r\n    onMounted(async () => {\r\n      await fetchOptions();\r\n      await fetchAllOnce(); // 仅此一次请求所有用户\r\n      // 注意：之后的查询/分页都会走 fetchUsers()，不会再调用 fetchAllOnce()\r\n    });\r\n\r\n    return {\r\n      criteria,\r\n      usernameList,\r\n      emailList,\r\n      ageList,\r\n      genderList,\r\n      pagedUsers,\r\n      page,\r\n      pageSize,\r\n      total,\r\n      totalPages,\r\n      dialogVisible,\r\n      dialogTitle,\r\n      formUser,\r\n      onQuery,\r\n      changePage,\r\n      openDialog,\r\n      saveUser,\r\n      confirmDelete\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.user-list {\r\n  padding: 20px;\r\n}\r\n\r\n/* 过滤区域整体横向排列，支持换行 */\r\n.filters {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 16px;  /* 控件之间间距 */\r\n  align-items: center;\r\n}\r\n\r\n/* 统一下拉和输入框的大小 */\r\n.filter-item {\r\n  flex: 1 1 220px;   /* 最小宽度220px，可以自适应撑开 */\r\n  max-width: 300px;  /* 防止太长 */\r\n}\r\n\r\n/* 下拉框强制全宽 */\r\n.el-select,\r\n.el-input {\r\n  width: 100% !important;\r\n  height: 40px;\r\n}\r\n\r\n/* 让 el-table 内容居中 */\r\n.el-table th,\r\n.el-table td {\r\n  text-align: center;\r\n}\r\n\r\n/* 分页信息靠右显示 */\r\n.pagination-info {\r\n  margin: 10px 0;\r\n  text-align: right;\r\n  font-weight: bold;\r\n}\r\n</style>\r\n"],"mappings":"AA4FA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAQ,QAAS,KAAK;AAC9C,OAAOC,KAAI,MAAO,OAAO;AACzB,SAASC,SAAS,EAAEC,YAAW,QAAS,cAAc;AAEtD,MAAMC,QAAO,GAAI,uBAAuB;AAExC,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,KAAKA,CAAA,EAAG;IACN;IACA,MAAMC,QAAO,GAAIR,QAAQ,CAAC;MAAES,QAAQ,EAAE,IAAI;MAAEC,KAAK,EAAE,IAAI;MAAEC,GAAG,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAK,CAAC,CAAC;IACnF,MAAMC,YAAW,GAAId,GAAG,CAAC,EAAE,CAAC;IAC5B,MAAMe,SAAQ,GAAIf,GAAG,CAAC,EAAE,CAAC;IACzB,MAAMgB,OAAM,GAAIhB,GAAG,CAAC,EAAE,CAAC;IACvB,MAAMiB,UAAS,GAAIjB,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;;IAErC;IACA,MAAMkB,QAAO,GAAIlB,GAAG,CAAC,EAAE,CAAC,EAAE;IAC1B,MAAMmB,UAAS,GAAInB,GAAG,CAAC,EAAE,CAAC,EAAE;IAC5B,MAAMoB,IAAG,GAAIpB,GAAG,CAAC,CAAC,CAAC;IACnB,MAAMqB,QAAO,GAAIrB,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMsB,KAAI,GAAItB,GAAG,CAAC,CAAC,CAAC;IACpB,MAAMuB,UAAS,GAAIvB,GAAG,CAAC,CAAC,CAAC;;IAEzB;IACA,MAAMwB,aAAY,GAAIxB,GAAG,CAAC,KAAK,CAAC;IAChC,MAAMyB,WAAU,GAAIzB,GAAG,CAAC,MAAM,CAAC;IAC/B,MAAM0B,QAAO,GAAIzB,QAAQ,CAAC;MAAE0B,EAAE,EAAE,IAAI;MAAEjB,QAAQ,EAAE,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEiB,QAAQ,EAAE,EAAE;MAAEhB,GAAG,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAK,CAAC,CAAC;;IAEvG;IACA,MAAMgB,gBAAe,GAAIA,CAAA,KAAM;MAC7B,MAAMC,MAAK,GAAI;QACbV,IAAI,EAAEA,IAAI,CAACW,KAAK;QAChBV,QAAQ,EAAEA,QAAQ,CAACU;MACrB,CAAC;MACD,IAAItB,QAAQ,CAACC,QAAO,KAAM,IAAG,IAAKD,QAAQ,CAACC,QAAO,KAAM,EAAE,EAAEoB,MAAM,CAACpB,QAAO,GAAID,QAAQ,CAACC,QAAQ;MAC/F,IAAID,QAAQ,CAACE,KAAI,KAAM,IAAG,IAAKF,QAAQ,CAACE,KAAI,KAAM,EAAE,EAAEmB,MAAM,CAACnB,KAAI,GAAIF,QAAQ,CAACE,KAAK;MACnF,IAAIF,QAAQ,CAACG,GAAE,KAAM,IAAG,IAAKH,QAAQ,CAACG,GAAE,KAAM,EAAE,EAAEkB,MAAM,CAAClB,GAAE,GAAIH,QAAQ,CAACG,GAAG;MAC3E,IAAIH,QAAQ,CAACI,MAAK,KAAM,IAAG,IAAKJ,QAAQ,CAACI,MAAK,KAAM,EAAE,EAAEiB,MAAM,CAACjB,MAAK,GAAIJ,QAAQ,CAACI,MAAM;MACvF,OAAOiB,MAAM;IACf,CAAC;;IAED;IACA,MAAME,YAAW,GAAI,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAM,CAACC,IAAI,EAAEC,IAAI,EAAEC,IAAI,IAAI,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC3ClC,KAAK,CAACmC,GAAG,CAAC,GAAGhC,QAAQ,wBAAwB,CAAC,EAC9CH,KAAK,CAACmC,GAAG,CAAC,GAAGhC,QAAQ,qBAAqB,CAAC,EAC3CH,KAAK,CAACmC,GAAG,CAAC,GAAGhC,QAAQ,mBAAmB,EACzC,CAAC;QACFQ,YAAY,CAACiB,KAAI,GAAIQ,KAAK,CAACC,OAAO,CAACP,IAAI,CAACQ,IAAI,IAAIR,IAAI,CAACQ,IAAG,GAAI,EAAE;QAC9D1B,SAAS,CAACgB,KAAI,GAAIQ,KAAK,CAACC,OAAO,CAACN,IAAI,CAACO,IAAI,IAAIP,IAAI,CAACO,IAAG,GAAI,EAAE;QAC3DzB,OAAO,CAACe,KAAI,GAAIQ,KAAK,CAACC,OAAO,CAACL,IAAI,CAACM,IAAI,IAAIN,IAAI,CAACM,IAAG,GAAI,EAAE;MAC3D,EAAE,OAAOC,GAAG,EAAE;QACZtC,SAAS,CAACuC,KAAK,CAAC,YAAW,IAAKD,GAAE,IAAKA,GAAG,CAACE,OAAM,GAAIF,GAAG,CAACE,OAAM,GAAIF,GAAG,CAAC,CAAC;MAC1E;IACF,CAAC;;IAED;IACA,MAAMG,YAAW,GAAI,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF;QACA,IAAIC,GAAG;QACP,IAAI;UACFA,GAAE,GAAI,MAAM3C,KAAK,CAACmC,GAAG,CAAC,GAAGhC,QAAQ,WAAW,CAAC;QAC/C,EAAE,OAAOyC,EAAE,EAAE;UACX,IAAI;YACFD,GAAE,GAAI,MAAM3C,KAAK,CAACmC,GAAG,CAAC,GAAGhC,QAAQ,OAAO,CAAC;UAC3C,EAAE,OAAO0C,EAAE,EAAE;YACX;YACAF,GAAE,GAAI,MAAM3C,KAAK,CAACmC,GAAG,CAAC,GAAGhC,QAAQ,aAAa,EAAE;cAAEwB,MAAM,EAAE;gBAAEV,IAAI,EAAE,CAAC;gBAAEC,QAAQ,EAAE;cAAO;YAAE,CAAC,CAAC;UAC5F;QACF;QACA;QACA,IAAIkB,KAAK,CAACC,OAAO,CAACM,GAAG,CAACL,IAAI,CAAC,EAAE;UAC3BvB,QAAQ,CAACa,KAAI,GAAIe,GAAG,CAACL,IAAI;QAC3B,OAAO,IAAIK,GAAG,CAACL,IAAG,IAAKF,KAAK,CAACC,OAAO,CAACM,GAAG,CAACL,IAAI,CAACA,IAAI,CAAC,EAAE;UACnDvB,QAAQ,CAACa,KAAI,GAAIe,GAAG,CAACL,IAAI,CAACA,IAAI;QAChC,OAAO;UACLvB,QAAQ,CAACa,KAAI,GAAI,EAAE;QACrB;QACA;QACAT,KAAK,CAACS,KAAI,GAAIb,QAAQ,CAACa,KAAK,CAACkB,MAAM;QACnC1B,UAAU,CAACQ,KAAI,GAAImB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,IAAI,CAAC9B,KAAK,CAACS,KAAI,GAAIV,QAAQ,CAACU,KAAK,CAAC,CAAC;QACvEX,IAAI,CAACW,KAAI,GAAI,CAAC;QACd,MAAMsB,KAAI,GAAI,CAAC;QACf,MAAMC,GAAE,GAAIJ,IAAI,CAACK,GAAG,CAAClC,QAAQ,CAACU,KAAK,EAAET,KAAK,CAACS,KAAK,CAAC;QACjDZ,UAAU,CAACY,KAAI,GAAIb,QAAQ,CAACa,KAAK,CAACyB,KAAK,CAACH,KAAK,EAAEC,GAAG,CAAC;MACrD,EAAE,OAAOZ,GAAG,EAAE;QACZ;QACAxB,QAAQ,CAACa,KAAI,GAAI,EAAE;QACnBZ,UAAU,CAACY,KAAI,GAAI,EAAE;QACrBT,KAAK,CAACS,KAAI,GAAI,CAAC;QACfR,UAAU,CAACQ,KAAI,GAAI,CAAC;QACpB3B,SAAS,CAACuC,KAAK,CAAC,WAAU,IAAKD,GAAE,IAAKA,GAAG,CAACE,OAAM,GAAIF,GAAG,CAACE,OAAM,GAAIF,GAAG,CAAC,CAAC;MACzE;IACF,CAAC;;IAED;IACA,MAAMe,UAAS,GAAI,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAM3B,MAAK,GAAID,gBAAgB,CAAC,CAAC;QACjC,MAAMiB,GAAE,GAAI,MAAM3C,KAAK,CAACmC,GAAG,CAAC,GAAGhC,QAAQ,aAAa,EAAE;UAAEwB;QAAO,CAAC,CAAC;QACjE;QACAX,UAAU,CAACY,KAAI,GAAIQ,KAAK,CAACC,OAAO,CAACM,GAAG,CAACL,IAAI,CAACA,IAAI,IAAIK,GAAG,CAACL,IAAI,CAACA,IAAG,GAAI,EAAE;QACpEnB,KAAK,CAACS,KAAI,GAAI,OAAOe,GAAG,CAACL,IAAI,CAACnB,KAAI,KAAM,QAAO,GAAIwB,GAAG,CAACL,IAAI,CAACnB,KAAI,GAAKiB,KAAK,CAACC,OAAO,CAACM,GAAG,CAACL,IAAI,IAAIK,GAAG,CAACL,IAAI,CAACQ,MAAK,GAAI,CAAE;QACnH1B,UAAU,CAACQ,KAAI,GAAImB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,IAAI,CAAC9B,KAAK,CAACS,KAAI,GAAIV,QAAQ,CAACU,KAAK,CAAC,CAAC;MACzE,EAAE,OAAOW,GAAG,EAAE;QACZtC,SAAS,CAACuC,KAAK,CAAC,UAAS,IAAKD,GAAE,IAAKA,GAAG,CAACE,OAAM,GAAIF,GAAG,CAACE,OAAM,GAAIF,GAAG,CAAC,CAAC;MACxE;IACF,CAAC;;IAED;IACA,MAAMgB,OAAM,GAAI,MAAAA,CAAA,KAAY;MAC1B;MACAtC,IAAI,CAACW,KAAI,GAAI,CAAC;MACd,MAAM0B,UAAU,CAAC,CAAC;IACpB,CAAC;;IAED;IACA,MAAME,UAAS,GAAI,MAAOC,CAAC,IAAK;MAC9BxC,IAAI,CAACW,KAAI,GAAI6B,CAAC;MACd;MACA,MAAMH,UAAU,CAAC,CAAC;IACpB,CAAC;;IAED;IACA,MAAMI,UAAS,GAAIA,CAACC,IAAI,EAAEC,IAAG,GAAI,IAAI,KAAK;MACxCtC,WAAW,CAACM,KAAI,GAAI+B,IAAG,KAAM,KAAI,GAAI,MAAK,GAAI,MAAM;MACpD,IAAIC,IAAI,EAAE;QACR;QACArC,QAAQ,CAACC,EAAC,GAAIoC,IAAI,CAACpC,EAAC,IAAK,IAAI;QAC7BD,QAAQ,CAAChB,QAAO,GAAIqD,IAAI,CAACrD,QAAO,IAAK,EAAE;QACvCgB,QAAQ,CAACf,KAAI,GAAIoD,IAAI,CAACpD,KAAI,IAAK,EAAE;QACjCe,QAAQ,CAACE,QAAO,GAAI,EAAE,EAAE;QACxBF,QAAQ,CAACd,GAAE,GAAImD,IAAI,CAACnD,GAAE,IAAK,IAAI;QAC/Bc,QAAQ,CAACb,MAAK,GAAIkD,IAAI,CAAClD,MAAK,IAAK,IAAI;MACvC,OAAO;QACLa,QAAQ,CAACC,EAAC,GAAI,IAAI;QAClBD,QAAQ,CAAChB,QAAO,GAAI,EAAE;QACtBgB,QAAQ,CAACf,KAAI,GAAI,EAAE;QACnBe,QAAQ,CAACE,QAAO,GAAI,EAAE;QACtBF,QAAQ,CAACd,GAAE,GAAI,IAAI;QACnBc,QAAQ,CAACb,MAAK,GAAI,IAAI;MACxB;MACAW,aAAa,CAACO,KAAI,GAAI,IAAI;IAC5B,CAAC;;IAED;IACA,MAAMiC,QAAO,GAAI,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACF,IAAItC,QAAQ,CAACC,EAAE,EAAE;UACf,MAAMxB,KAAK,CAAC8D,GAAG,CAAC,GAAG3D,QAAQ,SAASoB,QAAQ,CAACC,EAAE,EAAE,EAAE;YAAE,GAAGD;UAAS,CAAC,CAAC;UACnEtB,SAAS,CAAC8D,OAAO,CAAC,MAAM,CAAC;QAC3B,OAAO;UACL,MAAM/D,KAAK,CAACgE,IAAI,CAAC,GAAG7D,QAAQ,OAAO,EAAE;YAAE,GAAGoB;UAAS,CAAC,CAAC;UACrDtB,SAAS,CAAC8D,OAAO,CAAC,MAAM,CAAC;QAC3B;QACA1C,aAAa,CAACO,KAAI,GAAI,KAAK;QAC3B;QACA,MAAMC,YAAY,CAAC,CAAC;QACpB,MAAMyB,UAAU,CAAC,CAAC;MACpB,EAAE,OAAOf,GAAG,EAAE;QACZtC,SAAS,CAACuC,KAAK,CAAC,QAAO,IAAKD,GAAE,IAAKA,GAAG,CAACE,OAAM,GAAIF,GAAG,CAACE,OAAM,GAAIF,GAAG,CAAC,CAAC;MACtE;IACF,CAAC;;IAED;IACA,MAAM0B,aAAY,GAAI,MAAOzC,EAAE,IAAK;MAClC,IAAI;QACF,MAAMtB,YAAY,CAACgE,OAAO,CAAC,YAAY,EAAE,MAAM,EAAE;UAC/CC,iBAAiB,EAAE,IAAI;UACvBC,gBAAgB,EAAE,IAAI;UACtBT,IAAI,EAAE;QACR,CAAC,CAAC;QACF,MAAM3D,KAAK,CAACqE,MAAM,CAAC,GAAGlE,QAAQ,SAASqB,EAAE,EAAE,CAAC;QAC5CvB,SAAS,CAAC8D,OAAO,CAAC,MAAM,CAAC;QACzB;QACA,MAAMlC,YAAY,CAAC,CAAC;QACpB,MAAMyB,UAAU,CAAC,CAAC;MACpB,EAAE,OAAOf,GAAG,EAAE;QACZ;QACA,IAAIA,GAAE,IAAKA,GAAE,KAAM,QAAQ,EAAE;UAC3BtC,SAAS,CAACuC,KAAK,CAAC,QAAO,IAAKD,GAAE,IAAKA,GAAG,CAACE,OAAM,GAAIF,GAAG,CAACE,OAAM,GAAIF,GAAG,CAAC,CAAC;QACtE;MACF;IACF,CAAC;;IAED;IACAxC,SAAS,CAAC,YAAY;MACpB,MAAM8B,YAAY,CAAC,CAAC;MACpB,MAAMa,YAAY,CAAC,CAAC,EAAE;MACtB;IACF,CAAC,CAAC;IAEF,OAAO;MACLpC,QAAQ;MACRK,YAAY;MACZC,SAAS;MACTC,OAAO;MACPC,UAAU;MACVE,UAAU;MACVC,IAAI;MACJC,QAAQ;MACRC,KAAK;MACLC,UAAU;MACVC,aAAa;MACbC,WAAW;MACXC,QAAQ;MACRgC,OAAO;MACPC,UAAU;MACVE,UAAU;MACVG,QAAQ;MACRI;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}