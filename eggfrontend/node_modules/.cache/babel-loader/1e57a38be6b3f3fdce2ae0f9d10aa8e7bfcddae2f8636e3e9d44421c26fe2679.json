{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { connect, sendMessage } from '@/utils/chat';\nimport egg from '@/utils/egg';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'ChatRoom',\n  data() {\n    return {\n      userId: null,\n      users: [],\n      selectedUserId: null,\n      messages: [],\n      inputMessage: ''\n    };\n  },\n  computed: {\n    filteredMessages() {\n      return this.messages.filter(msg => {\n        if (this.selectedUserId === null) return !msg.toUserId;\n        return msg.fromUserId === this.selectedUserId && msg.toUserId === Number(this.userId) || msg.fromUserId === Number(this.userId) && msg.toUserId === this.selectedUserId;\n      }).sort((a, b) => new Date(a.createTime) - new Date(b.createTime));\n    }\n  },\n  async mounted() {\n    this.userId = Number(sessionStorage.getItem('userId'));\n    if (!this.userId) {\n      ElMessage.error('请先登录');\n      this.$router.push('/login');\n      return;\n    }\n\n    // 拉取用户列表和在线状态\n    const usersRes = await egg.get('/user');\n    this.users = usersRes.map(u => ({\n      ...u,\n      online: false\n    }));\n    const onlineRes = await egg.get('/user/online');\n    const onlineSet = new Set(onlineRes.map(id => Number(id)));\n    this.users.forEach(u => {\n      u.online = u.id === this.userId || onlineSet.has(u.id);\n    });\n\n    // 加载本地缓存（仅私聊消息）\n    this.loadMessagesFromLocal();\n\n    // 拉取群聊消息\n    const groupRes = await egg.get('/chat/group-msg');\n    this.mergeMessages(groupRes);\n\n    // 拉取私聊离线消息\n    const offlineRes = await egg.get('/user/offline-msg', {\n      params: {\n        userId: this.userId\n      }\n    });\n    this.mergeMessages(offlineRes);\n\n    // 保存私聊消息到 localStorage\n    this.saveMessagesToLocal();\n\n    // 连接 WebSocket\n    connect(this.userId, this.onMessageReceived);\n    this.scrollToBottom();\n  },\n  methods: {\n    getStorageKey() {\n      return `chat_messages_user_${this.userId}`;\n    },\n    saveMessagesToLocal() {\n      const grouped = {};\n      this.messages.forEach(msg => {\n        if (!msg.toUserId) return; // 群聊不存\n        const sessionId = msg.fromUserId === this.userId ? msg.toUserId : msg.fromUserId;\n        if (!grouped[sessionId]) grouped[sessionId] = [];\n        if (!grouped[sessionId].some(m => m.id && m.id === msg.id || m.tempId && m.tempId === msg.tempId)) {\n          grouped[sessionId].push(msg);\n        }\n      });\n      localStorage.setItem(this.getStorageKey(), JSON.stringify(grouped));\n    },\n    loadMessagesFromLocal() {\n      const key = this.getStorageKey();\n      const grouped = JSON.parse(localStorage.getItem(key) || '{}');\n      const loaded = [];\n      Object.values(grouped).forEach(arr => {\n        arr.forEach(msg => {\n          const exists = loaded.find(m => m.id && m.id === msg.id || m.tempId && m.tempId === msg.tempId);\n          if (!exists) loaded.push(msg);\n        });\n      });\n      this.messages = loaded;\n    },\n    mergeMessages(newMsgs) {\n      newMsgs.forEach(msg => {\n        const key = msg.id ? `id_${msg.id}` : msg.tempId ? `temp_${msg.tempId}` : `key_${msg.fromUserId}_${msg.toUserId || 'group'}_${msg.content}`;\n        const exists = this.messages.find(m => {\n          const mKey = m.id ? `id_${m.id}` : m.tempId ? `temp_${m.tempId}` : `key_${m.fromUserId}_${m.toUserId || 'group'}_${m.content}`;\n          return mKey === key;\n        });\n        if (!exists) {\n          this.messages.push(msg);\n        } else if (!exists.id && msg.id) {\n          const index = this.messages.indexOf(exists);\n          this.$set(this.messages, index, {\n            ...msg\n          });\n        }\n      });\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const container = this.$refs.messageContainer;\n        if (container) container.scrollTop = container.scrollHeight;\n      });\n    },\n    pushMessageLocally(msg) {\n      const exists = this.messages.find(m => m.tempId && m.tempId === msg.tempId || m.id && m.id === msg.id);\n      if (!exists) {\n        this.messages.push(msg);\n        if (msg.toUserId) this.saveMessagesToLocal(); // 私聊才存\n        this.scrollToBottom();\n      }\n    },\n    onMessageReceived(msg) {\n      const existing = this.messages.find(m => m.tempId && m.tempId === msg.tempId || m.id && m.id === msg.id);\n      if (existing) {\n        const index = this.messages.indexOf(existing);\n        this.$set(this.messages, index, {\n          ...existing,\n          ...msg\n        });\n      } else {\n        this.messages.push(msg);\n      }\n      if (msg.toUserId) this.saveMessagesToLocal();\n      this.scrollToBottom();\n    },\n    selectUser(userId) {\n      this.selectedUserId = userId;\n      this.scrollToBottom();\n    },\n    sendChatMessage() {\n      const content = this.inputMessage.trim();\n      if (!content) return;\n      const tempId = Date.now() + '_' + Math.random().toString(16).slice(2);\n      const payload = {\n        fromUserId: this.userId,\n        toUserId: this.selectedUserId,\n        content,\n        tempId,\n        createTime: new Date().toISOString()\n      };\n      const isSelfMessage = payload.toUserId === this.userId;\n      const isGroupMessage = payload.toUserId === null && payload.fromUserId === this.userId;\n      if (!isSelfMessage && !isGroupMessage) {\n        this.pushMessageLocally(payload);\n      }\n      this.inputMessage = '';\n      sendMessage(payload.fromUserId, payload.toUserId, payload.content, tempId);\n    },\n    formatTime(datetime) {\n      return datetime ? new Date(datetime).toLocaleTimeString() : '';\n    },\n    getUsername(id) {\n      const user = this.users.find(u => u.id === id);\n      return user ? user.username : '未知';\n    }\n  }\n};","map":{"version":3,"names":["connect","sendMessage","egg","ElMessage","name","data","userId","users","selectedUserId","messages","inputMessage","computed","filteredMessages","filter","msg","toUserId","fromUserId","Number","sort","a","b","Date","createTime","mounted","sessionStorage","getItem","error","$router","push","usersRes","get","map","u","online","onlineRes","onlineSet","Set","id","forEach","has","loadMessagesFromLocal","groupRes","mergeMessages","offlineRes","params","saveMessagesToLocal","onMessageReceived","scrollToBottom","methods","getStorageKey","grouped","sessionId","some","m","tempId","localStorage","setItem","JSON","stringify","key","parse","loaded","Object","values","arr","exists","find","newMsgs","content","mKey","index","indexOf","$set","$nextTick","container","$refs","messageContainer","scrollTop","scrollHeight","pushMessageLocally","existing","selectUser","sendChatMessage","trim","now","Math","random","toString","slice","payload","toISOString","isSelfMessage","isGroupMessage","formatTime","datetime","toLocaleTimeString","getUsername","user","username"],"sources":["D:\\Final\\springboot_egg\\egg-web\\src\\user\\ChatRoom.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <!-- 左侧用户列表 -->\r\n    <aside class=\"user-list\">\r\n      <div class=\"user-card\">\r\n        <h3>聊天列表</h3>\r\n\r\n        <el-scrollbar class=\"user-scroll\">\r\n          <!-- 群聊 -->\r\n          <div\r\n              class=\"user-item\"\r\n              :class=\"{ active: selectedUserId === null }\"\r\n              @click=\"selectUser(null)\"\r\n          >\r\n            群聊\r\n            <span class=\"status-dot online\"></span>\r\n          </div>\r\n\r\n          <!-- 用户列表 -->\r\n          <div\r\n              class=\"user-item\"\r\n              v-for=\"user in users\"\r\n              :key=\"user.id\"\r\n              :class=\"{ active: selectedUserId === user.id }\"\r\n              @click=\"selectUser(user.id)\"\r\n          >\r\n            {{ user.username }}\r\n            <span class=\"status-dot\" :class=\"user.online ? 'online' : 'offline'\"></span>\r\n          </div>\r\n        </el-scrollbar>\r\n      </div>\r\n    </aside>\r\n\r\n    <el-button style=\"float: right; margin-bottom: 10px;\" type=\"primary\" @click=\"$router.push('/userlist')\">\r\n      用户管理\r\n    </el-button>\r\n    <!-- 右侧聊天区 -->\r\n    <main class=\"chat-main\">\r\n      <div class=\"messages\" ref=\"messageContainer\">\r\n        <div\r\n            v-for=\"msg in filteredMessages\"\r\n            :key=\"msg.id || msg.tempId\"\r\n            :class=\"['message', msg.fromUserId === Number(userId) ? 'mine' : 'other']\"\r\n        >\r\n          <span class=\"from\">\r\n            {{ msg.fromUserId === Number(userId) ? '我' : getUsername(msg.fromUserId) }}\r\n          </span>\r\n          <div class=\"bubble\">\r\n            <span class=\"content\">{{ msg.content }}</span>\r\n          </div>\r\n          <span class=\"time\">{{ formatTime(msg.createTime) }}</span>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 输入框区域 -->\r\n      <div class=\"input-area\">\r\n        <el-input\r\n            v-model=\"inputMessage\"\r\n            placeholder=\"请输入消息\"\r\n            @keyup.enter=\"sendChatMessage\"\r\n            class=\"input-box\"\r\n            clearable\r\n        ></el-input>\r\n        <el-button type=\"primary\" @click=\"sendChatMessage\">发送</el-button>\r\n      </div>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { connect, sendMessage } from '@/utils/chat'\r\nimport egg from '@/utils/egg'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'ChatRoom',\r\n  data() {\r\n    return {\r\n      userId: null,\r\n      users: [],\r\n      selectedUserId: null,\r\n      messages: [],\r\n      inputMessage: ''\r\n    }\r\n  },\r\n  computed: {\r\n    filteredMessages() {\r\n      return this.messages\r\n          .filter(msg => {\r\n            if (this.selectedUserId === null) return !msg.toUserId\r\n            return (\r\n                (msg.fromUserId === this.selectedUserId && msg.toUserId === Number(this.userId)) ||\r\n                (msg.fromUserId === Number(this.userId) && msg.toUserId === this.selectedUserId)\r\n            )\r\n          })\r\n          .sort((a, b) => new Date(a.createTime) - new Date(b.createTime))\r\n    }\r\n  },\r\n  async mounted() {\r\n    this.userId = Number(sessionStorage.getItem('userId'))\r\n    if (!this.userId) {\r\n      ElMessage.error('请先登录')\r\n      this.$router.push('/login')\r\n      return\r\n    }\r\n\r\n    // 拉取用户列表和在线状态\r\n    const usersRes = await egg.get('/user')\r\n    this.users = usersRes.map(u => ({ ...u, online: false }))\r\n\r\n    const onlineRes = await egg.get('/user/online')\r\n    const onlineSet = new Set(onlineRes.map(id => Number(id)))\r\n    this.users.forEach(u => {\r\n      u.online = u.id === this.userId || onlineSet.has(u.id)\r\n    })\r\n\r\n    // 加载本地缓存（仅私聊消息）\r\n    this.loadMessagesFromLocal()\r\n\r\n    // 拉取群聊消息\r\n    const groupRes = await egg.get('/chat/group-msg')\r\n    this.mergeMessages(groupRes)\r\n\r\n    // 拉取私聊离线消息\r\n    const offlineRes = await egg.get('/user/offline-msg', { params: { userId: this.userId } })\r\n    this.mergeMessages(offlineRes)\r\n\r\n    // 保存私聊消息到 localStorage\r\n    this.saveMessagesToLocal()\r\n\r\n    // 连接 WebSocket\r\n    connect(this.userId, this.onMessageReceived)\r\n\r\n    this.scrollToBottom()\r\n  },\r\n  methods: {\r\n    getStorageKey() {\r\n      return `chat_messages_user_${this.userId}`\r\n    },\r\n\r\n    saveMessagesToLocal() {\r\n      const grouped = {}\r\n      this.messages.forEach(msg => {\r\n        if (!msg.toUserId) return // 群聊不存\r\n        const sessionId = msg.fromUserId === this.userId ? msg.toUserId : msg.fromUserId\r\n        if (!grouped[sessionId]) grouped[sessionId] = []\r\n        if (!grouped[sessionId].some(m => (m.id && m.id === msg.id) || (m.tempId && m.tempId === msg.tempId))) {\r\n          grouped[sessionId].push(msg)\r\n        }\r\n      })\r\n      localStorage.setItem(this.getStorageKey(), JSON.stringify(grouped))\r\n    },\r\n\r\n    loadMessagesFromLocal() {\r\n      const key = this.getStorageKey()\r\n      const grouped = JSON.parse(localStorage.getItem(key) || '{}')\r\n      const loaded = []\r\n      Object.values(grouped).forEach(arr => {\r\n        arr.forEach(msg => {\r\n          const exists = loaded.find(\r\n              m => (m.id && m.id === msg.id) || (m.tempId && m.tempId === msg.tempId)\r\n          )\r\n          if (!exists) loaded.push(msg)\r\n        })\r\n      })\r\n      this.messages = loaded\r\n    },\r\n\r\n    mergeMessages(newMsgs) {\r\n      newMsgs.forEach(msg => {\r\n        const key = msg.id\r\n            ? `id_${msg.id}`\r\n            : msg.tempId\r\n                ? `temp_${msg.tempId}`\r\n                : `key_${msg.fromUserId}_${msg.toUserId || 'group'}_${msg.content}`\r\n\r\n        const exists = this.messages.find(m => {\r\n          const mKey = m.id\r\n              ? `id_${m.id}`\r\n              : m.tempId\r\n                  ? `temp_${m.tempId}`\r\n                  : `key_${m.fromUserId}_${m.toUserId || 'group'}_${m.content}`\r\n          return mKey === key\r\n        })\r\n\r\n        if (!exists) {\r\n          this.messages.push(msg)\r\n        } else if (!exists.id && msg.id) {\r\n          const index = this.messages.indexOf(exists)\r\n          this.$set(this.messages, index, { ...msg })\r\n        }\r\n      })\r\n    },\r\n\r\n    scrollToBottom() {\r\n      this.$nextTick(() => {\r\n        const container = this.$refs.messageContainer\r\n        if (container) container.scrollTop = container.scrollHeight\r\n      })\r\n    },\r\n\r\n    pushMessageLocally(msg) {\r\n      const exists = this.messages.find(\r\n          m => (m.tempId && m.tempId === msg.tempId) || (m.id && m.id === msg.id)\r\n      )\r\n      if (!exists) {\r\n        this.messages.push(msg)\r\n        if (msg.toUserId) this.saveMessagesToLocal() // 私聊才存\r\n        this.scrollToBottom()\r\n      }\r\n    },\r\n\r\n    onMessageReceived(msg) {\r\n      const existing = this.messages.find(\r\n          m => (m.tempId && m.tempId === msg.tempId) || (m.id && m.id === msg.id)\r\n      )\r\n      if (existing) {\r\n        const index = this.messages.indexOf(existing)\r\n        this.$set(this.messages, index, { ...existing, ...msg })\r\n      } else {\r\n        this.messages.push(msg)\r\n      }\r\n      if (msg.toUserId) this.saveMessagesToLocal()\r\n      this.scrollToBottom()\r\n    },\r\n\r\n    selectUser(userId) {\r\n      this.selectedUserId = userId\r\n      this.scrollToBottom()\r\n    },\r\n\r\n    sendChatMessage() {\r\n      const content = this.inputMessage.trim()\r\n      if (!content) return\r\n\r\n      const tempId = Date.now() + '_' + Math.random().toString(16).slice(2)\r\n      const payload = {\r\n        fromUserId: this.userId,\r\n        toUserId: this.selectedUserId,\r\n        content,\r\n        tempId,\r\n        createTime: new Date().toISOString()\r\n      }\r\n\r\n      const isSelfMessage = payload.toUserId === this.userId\r\n      const isGroupMessage = payload.toUserId === null && payload.fromUserId === this.userId\r\n\r\n      if (!isSelfMessage && !isGroupMessage) {\r\n        this.pushMessageLocally(payload)\r\n      }\r\n\r\n      this.inputMessage = ''\r\n      sendMessage(payload.fromUserId, payload.toUserId, payload.content, tempId)\r\n    },\r\n\r\n    formatTime(datetime) {\r\n      return datetime ? new Date(datetime).toLocaleTimeString() : ''\r\n    },\r\n\r\n    getUsername(id) {\r\n      const user = this.users.find(u => u.id === id)\r\n      return user ? user.username : '未知'\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 样式保持原样 */\r\n.chat-container {\r\n  display: flex;\r\n  height: 100vh;\r\n  width: 100vw;\r\n}\r\n/* 左侧用户列表 */\r\n.user-list { width: 20%; display: flex; flex-direction: column; padding: 10px; background-color: #fafafa; box-sizing: border-box; height: 100%; }\r\n.user-card { display: flex; flex-direction: column; flex: 1; height: 100%; }\r\n.user-scroll { flex: 1; overflow-y: auto; margin-top: 10px; }\r\n.user-item { padding: 10px; border: 1px solid #ddd; border-radius: 6px; cursor: pointer; background-color: #fff; margin-bottom: 6px; display: flex; align-items: center; justify-content: space-between; }\r\n.user-item.active { background-color: #bae7ff; border-color: #91d5ff; }\r\n.status-dot { width: 10px; height: 10px; border-radius: 50%; display: inline-block; }\r\n.status-dot.online { background-color: #52c41a; }\r\n.status-dot.offline { background-color: #f5222d; }\r\n/* 右侧聊天区 */\r\n.chat-main { width: 80%; display: flex; flex-direction: column; padding: 10px; box-sizing: border-box; background-color: #f0f2f5; height: 100%; }\r\n.messages { flex: 1; overflow-y: auto; padding: 10px; background-color: #ffffff; border-radius: 8px; display: flex; flex-direction: column; gap: 10px; }\r\n.input-area { display: flex; gap: 10px; padding-top: 10px; height: 50px; border-top: 1px solid #ddd; }\r\n.input-box { flex: 1; }\r\n.message { display: flex; flex-direction: column; }\r\n.message.mine { align-items: flex-end; }\r\n.message.other { align-items: flex-start; }\r\n.bubble { max-width: 70%; padding: 10px 14px; border-radius: 16px; word-wrap: break-word; position: relative; background-color: #e6f7ff; }\r\n.message.mine .bubble { background-color: #91d5ff; color: #000; }\r\n.message.mine .bubble::after { content: \"\"; position: absolute; right: -8px; top: 10px; border-width: 8px 0 8px 8px; border-style: solid; border-color: transparent transparent transparent #91d5ff; }\r\n.message.other .bubble::after { content: \"\"; position: absolute; left: -8px; top: 10px; border-width: 8px 8px 8px 0; border-style: solid; border-color: transparent #e6f7ff transparent transparent; }\r\n.time { font-size: 12px; color: #999; margin-top: 2px; }\r\n.message.mine .time { text-align: right; }\r\n.message.other .time { text-align: left; }\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}