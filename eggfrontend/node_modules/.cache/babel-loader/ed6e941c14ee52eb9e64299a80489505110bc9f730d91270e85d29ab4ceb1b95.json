{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport { connect, sendMessage } from '@/utils/chat';\nimport egg from '@/utils/egg';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'ChatRoom',\n  data() {\n    return {\n      userId: null,\n      users: [],\n      selectedUserId: null,\n      messages: [],\n      inputMessage: ''\n    };\n  },\n  computed: {\n    filteredMessages() {\n      return this.messages.filter(msg => {\n        if (this.selectedUserId === null) {\n          return !msg.toUserId;\n        }\n        return msg.fromUserId === this.selectedUserId && msg.toUserId === Number(this.userId) || msg.fromUserId === Number(this.userId) && msg.toUserId === this.selectedUserId;\n      });\n    }\n  },\n  mounted() {\n    this.userId = sessionStorage.getItem('userId');\n    if (!this.userId) {\n      ElMessage.error('请先登录');\n      this.$router.push('/login');\n      return;\n    }\n\n    // 建立 WebSocket 连接\n    connect(Number(this.userId), this.onMessageReceived);\n\n    // 获取在线用户列表\n    this.fetchOnlineUsers();\n  },\n  methods: {\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const container = this.$refs.messageContainer;\n        if (container) {\n          container.scrollTop = container.scrollHeight;\n        }\n      });\n    },\n    onMessageReceived(msg) {\n      // 避免自己发的消息重复显示\n      const exists = msg.tempId && this.messages.some(m => m.tempId === msg.tempId);\n      if (!exists) {\n        this.messages.push(msg);\n        this.scrollToBottom();\n      }\n    },\n    selectUser(userId) {\n      this.selectedUserId = userId;\n      this.$nextTick(() => {\n        const container = this.$refs.messageContainer;\n        if (container) container.scrollTop = container.scrollHeight;\n      });\n    },\n    sendChatMessage() {\n      const content = this.inputMessage.trim();\n      if (!content) return;\n      const tempId = Date.now();\n      const payload = {\n        fromUserId: Number(this.userId),\n        toUserId: this.selectedUserId,\n        // null = 群聊\n        content\n      };\n\n      // 前端立即显示\n      const tempMsg = {\n        ...payload,\n        tempId,\n        createTime: new Date().toISOString()\n      };\n      this.messages.push(tempMsg);\n      this.inputMessage = '';\n      this.scrollToBottom();\n\n      // 发送到后端\n      sendMessage(payload.fromUserId, payload.toUserId, payload.content, tempId);\n    },\n    formatTime(datetime) {\n      if (!datetime) return '';\n      const d = new Date(datetime);\n      return d.toLocaleTimeString();\n    },\n    fetchOnlineUsers() {\n      egg.get('/user').then(res => {\n        this.users = res.data;\n      }).catch(err => {\n        console.error(err);\n        ElMessage.error('获取用户列表失败');\n      });\n    },\n    getUsername(id) {\n      const user = this.users.find(u => u.id === id);\n      return user ? user.username : '未知';\n    }\n  }\n};","map":{"version":3,"names":["connect","sendMessage","egg","ElMessage","name","data","userId","users","selectedUserId","messages","inputMessage","computed","filteredMessages","filter","msg","toUserId","fromUserId","Number","mounted","sessionStorage","getItem","error","$router","push","onMessageReceived","fetchOnlineUsers","methods","scrollToBottom","$nextTick","container","$refs","messageContainer","scrollTop","scrollHeight","exists","tempId","some","m","selectUser","sendChatMessage","content","trim","Date","now","payload","tempMsg","createTime","toISOString","formatTime","datetime","d","toLocaleTimeString","get","then","res","catch","err","console","getUsername","id","user","find","u","username"],"sources":["D:\\Final\\springboot_egg\\egg-web\\src\\user\\ChatRoom.vue"],"sourcesContent":["<template>\r\n  <el-container class=\"chat-container\">\r\n    <!-- 左侧用户列表 -->\r\n    <el-aside width=\"220px\" class=\"user-list\">\r\n      <el-card class=\"user-card\">\r\n        <h3>聊天列表</h3>\r\n\r\n        <!-- 群聊 -->\r\n        <div class=\"user-item\"\r\n             :class=\"{ active: selectedUserId === null }\"\r\n             @click=\"selectUser(null)\">\r\n          群聊\r\n        </div>\r\n\r\n        <!-- 在线用户 -->\r\n        <el-scrollbar class=\"user-scroll\">\r\n          <div class=\"user-item\"\r\n               v-for=\"user in users\"\r\n               :key=\"user.id\"\r\n               :class=\"{ active: selectedUserId === user.id }\"\r\n               @click=\"selectUser(user.id)\">\r\n            {{ user.username }}\r\n          </div>\r\n        </el-scrollbar>\r\n      </el-card>\r\n    </el-aside>\r\n\r\n    <!-- 右侧聊天框 -->\r\n    <el-main class=\"chat-main\">\r\n      <el-card class=\"chat-card\">\r\n        <div class=\"messages\" ref=\"messageContainer\">\r\n          <div\r\n              v-for=\"msg in filteredMessages\"\r\n              :key=\"msg.id || msg.tempId\"\r\n              :class=\"['message', msg.fromUserId === Number(userId) ? 'mine' : 'other']\"\r\n          >\r\n            <span class=\"from\">\r\n              {{ msg.fromUserId === Number(userId) ? '我' : getUsername(msg.fromUserId) }}\r\n            </span>：\r\n            <span class=\"content\">{{ msg.content }}</span>\r\n            <span class=\"time\">{{ formatTime(msg.createTime) }}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"input-area\">\r\n          <el-input\r\n              v-model=\"inputMessage\"\r\n              placeholder=\"请输入消息\"\r\n              @keyup.enter=\"sendChatMessage\"\r\n              clearable\r\n          ></el-input>\r\n          <el-button type=\"primary\" @click=\"sendChatMessage\">发送</el-button>\r\n        </div>\r\n      </el-card>\r\n    </el-main>\r\n  </el-container>\r\n</template>\r\n\r\n<script>\r\nimport { connect, sendMessage } from '@/utils/chat'\r\nimport egg from '@/utils/egg'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'ChatRoom',\r\n  data() {\r\n    return {\r\n      userId: null,\r\n      users: [],\r\n      selectedUserId: null,\r\n      messages: [],\r\n      inputMessage: ''\r\n    }\r\n  },\r\n  computed: {\r\n    filteredMessages() {\r\n      return this.messages.filter(msg => {\r\n        if (this.selectedUserId === null) {\r\n          return !msg.toUserId\r\n        }\r\n        return (msg.fromUserId === this.selectedUserId && msg.toUserId === Number(this.userId)) ||\r\n            (msg.fromUserId === Number(this.userId) && msg.toUserId === this.selectedUserId)\r\n      })\r\n    }\r\n  },\r\n  mounted() {\r\n    this.userId = sessionStorage.getItem('userId')\r\n    if (!this.userId) {\r\n      ElMessage.error('请先登录')\r\n      this.$router.push('/login')\r\n      return\r\n    }\r\n\r\n    // 建立 WebSocket 连接\r\n    connect(Number(this.userId), this.onMessageReceived)\r\n\r\n    // 获取在线用户列表\r\n    this.fetchOnlineUsers()\r\n  },\r\n  methods: {\r\n    scrollToBottom() {\r\n      this.$nextTick(() => {\r\n        const container = this.$refs.messageContainer\r\n        if (container) {\r\n          container.scrollTop = container.scrollHeight\r\n        }\r\n      })\r\n    },\r\n\r\n    onMessageReceived(msg) {\r\n      // 避免自己发的消息重复显示\r\n      const exists = msg.tempId && this.messages.some(m => m.tempId === msg.tempId)\r\n      if (!exists) {\r\n        this.messages.push(msg)\r\n        this.scrollToBottom()\r\n      }\r\n    },\r\n\r\n    selectUser(userId) {\r\n      this.selectedUserId = userId\r\n      this.$nextTick(() => {\r\n        const container = this.$refs.messageContainer\r\n        if (container) container.scrollTop = container.scrollHeight\r\n      })\r\n    },\r\n\r\n    sendChatMessage() {\r\n      const content = this.inputMessage.trim()\r\n      if (!content) return\r\n\r\n      const tempId = Date.now()\r\n      const payload = {\r\n        fromUserId: Number(this.userId),\r\n        toUserId: this.selectedUserId, // null = 群聊\r\n        content\r\n      }\r\n\r\n      // 前端立即显示\r\n      const tempMsg = { ...payload, tempId, createTime: new Date().toISOString() }\r\n      this.messages.push(tempMsg)\r\n      this.inputMessage = ''\r\n      this.scrollToBottom()\r\n\r\n      // 发送到后端\r\n      sendMessage(payload.fromUserId, payload.toUserId, payload.content, tempId)\r\n    },\r\n\r\n    formatTime(datetime) {\r\n      if (!datetime) return ''\r\n      const d = new Date(datetime)\r\n      return d.toLocaleTimeString()\r\n    },\r\n\r\n    fetchOnlineUsers() {\r\n      egg.get('/user')\r\n          .then(res => {\r\n            this.users = res.data\r\n          })\r\n          .catch(err => {\r\n            console.error(err)\r\n            ElMessage.error('获取用户列表失败')\r\n          })\r\n    },\r\n\r\n    getUsername(id) {\r\n      const user = this.users.find(u => u.id === id)\r\n      return user ? user.username : '未知'\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container {\r\n  height: 90vh;\r\n  display: flex;\r\n}\r\n\r\n.user-list {\r\n  padding: 10px;\r\n}\r\n\r\n.user-card {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n  padding: 10px;\r\n  height: 100%;\r\n}\r\n\r\n.user-scroll {\r\n  max-height: 400px; /* 限制滚动区域高度 */\r\n  overflow-y: auto;\r\n}\r\n\r\n.user-item {\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  background-color: #fff;\r\n  transition: all 0.2s;\r\n  margin-bottom: 6px;\r\n}\r\n\r\n.user-item:hover {\r\n  background-color: #f0f9ff;\r\n}\r\n\r\n.user-item.active {\r\n  background-color: #bae7ff;\r\n  border-color: #91d5ff;\r\n}\r\n\r\n.chat-main {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n  flex: 1;\r\n}\r\n\r\n.chat-card {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n}\r\n\r\n.messages {\r\n  flex: 1;\r\n  padding: 10px;\r\n  overflow-y: auto;\r\n  background-color: #f9f9f9;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.message {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.message.mine {\r\n  text-align: right;\r\n}\r\n\r\n.message .from {\r\n  font-weight: bold;\r\n  margin-right: 5px;\r\n}\r\n\r\n.message .time {\r\n  font-size: 12px;\r\n  color: #888;\r\n  margin-left: 5px;\r\n}\r\n\r\n.input-area {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}