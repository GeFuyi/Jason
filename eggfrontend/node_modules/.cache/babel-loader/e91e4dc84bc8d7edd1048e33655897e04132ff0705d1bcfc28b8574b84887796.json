{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"filters\"\n};\nconst _hoisted_2 = [\"value\"];\nconst _hoisted_3 = [\"value\"];\nconst _hoisted_4 = [\"value\"];\nconst _hoisted_5 = [\"value\"];\nconst _hoisted_6 = {\n  class: \"pagination\"\n};\nconst _hoisted_7 = [\"disabled\"];\nconst _hoisted_8 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[12] || (_cache[12] = _createElementVNode(\"h2\", null, \"用户列表\", -1 /* CACHED */)), _createCommentVNode(\" 条件筛选 \"), _createElementVNode(\"div\", _hoisted_1, [_withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.criteria.username = $event)\n  }, [_cache[7] || (_cache[7] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"全部用户名\", -1 /* CACHED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.usernameList, u => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: u,\n      value: u\n    }, _toDisplayString(u), 9 /* TEXT, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $setup.criteria.username]]), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.criteria.email = $event)\n  }, [_cache[8] || (_cache[8] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"全部邮箱\", -1 /* CACHED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.emailList, e => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: e,\n      value: e\n    }, _toDisplayString(e), 9 /* TEXT, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $setup.criteria.email]]), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.criteria.age = $event)\n  }, [_cache[9] || (_cache[9] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"全部年龄\", -1 /* CACHED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.ageList, a => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: a,\n      value: a\n    }, _toDisplayString(a), 9 /* TEXT, PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $setup.criteria.age]]), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.criteria.gender = $event)\n  }, [_cache[10] || (_cache[10] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"全部性别\", -1 /* CACHED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.genderList, g => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: g,\n      value: g\n    }, _toDisplayString(g ? '男' : '女'), 9 /* TEXT, PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $setup.criteria.gender]]), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $setup.fetchUsers && $setup.fetchUsers(...args))\n  }, \"查询\")]), _createCommentVNode(\" 用户表 \"), _createElementVNode(\"table\", null, [_cache[11] || (_cache[11] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"ID\"), _createElementVNode(\"th\", null, \"用户名\"), _createElementVNode(\"th\", null, \"邮箱\"), _createElementVNode(\"th\", null, \"年龄\"), _createElementVNode(\"th\", null, \"性别\")])], -1 /* CACHED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.pagedUsers, user => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: user.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString(user.id), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(user.username), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(user.email), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(user.age), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(user.gender ? '男' : '女'), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" 分页 \"), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = $event => $setup.changePage($setup.page - 1)),\n    disabled: $setup.page === 1\n  }, \"上一页\", 8 /* PROPS */, _hoisted_7), _createElementVNode(\"span\", null, _toDisplayString($setup.page) + \" / \" + _toDisplayString($setup.totalPages), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = $event => $setup.changePage($setup.page + 1)),\n    disabled: $setup.page === $setup.totalPages\n  }, \"下一页\", 8 /* PROPS */, _hoisted_8)])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createElementVNode","_createCommentVNode","_hoisted_1","$setup","criteria","username","$event","value","_Fragment","_renderList","usernameList","u","key","_hoisted_2","email","emailList","e","_hoisted_3","age","ageList","a","_hoisted_4","gender","genderList","g","_hoisted_5","onClick","_cache","args","fetchUsers","pagedUsers","user","id","_toDisplayString","_hoisted_6","changePage","page","disabled","_hoisted_7","totalPages","_hoisted_8"],"sources":["D:\\Final\\springboot_egg\\egg-web\\src\\user\\UserList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>用户列表</h2>\r\n\r\n    <!-- 条件筛选 -->\r\n    <div class=\"filters\">\r\n      <select v-model=\"criteria.username\">\r\n        <option value=\"\">全部用户名</option>\r\n        <option v-for=\"u in usernameList\" :key=\"u\" :value=\"u\">{{ u }}</option>\r\n      </select>\r\n\r\n      <select v-model=\"criteria.email\">\r\n        <option value=\"\">全部邮箱</option>\r\n        <option v-for=\"e in emailList\" :key=\"e\" :value=\"e\">{{ e }}</option>\r\n      </select>\r\n\r\n      <select v-model=\"criteria.age\">\r\n        <option value=\"\">全部年龄</option>\r\n        <option v-for=\"a in ageList\" :key=\"a\" :value=\"a\">{{ a }}</option>\r\n      </select>\r\n\r\n      <select v-model=\"criteria.gender\">\r\n        <option value=\"\">全部性别</option>\r\n        <option v-for=\"g in genderList\" :key=\"g\" :value=\"g\">{{ g ? '男' : '女' }}</option>\r\n      </select>\r\n\r\n      <button @click=\"fetchUsers\">查询</button>\r\n    </div>\r\n\r\n    <!-- 用户表 -->\r\n    <table>\r\n      <thead>\r\n      <tr>\r\n        <th>ID</th>\r\n        <th>用户名</th>\r\n        <th>邮箱</th>\r\n        <th>年龄</th>\r\n        <th>性别</th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr v-for=\"user in pagedUsers\" :key=\"user.id\">\r\n        <td>{{ user.id }}</td>\r\n        <td>{{ user.username }}</td>\r\n        <td>{{ user.email }}</td>\r\n        <td>{{ user.age }}</td>\r\n        <td>{{ user.gender ? '男' : '女' }}</td>\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- 分页 -->\r\n    <div class=\"pagination\">\r\n      <button @click=\"changePage(page - 1)\" :disabled=\"page === 1\">上一页</button>\r\n      <span>{{ page }} / {{ totalPages }}</span>\r\n      <button @click=\"changePage(page + 1)\" :disabled=\"page === totalPages\">下一页</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from 'vue';\r\nimport axios from 'axios';\r\n\r\nconst BASE_URL = 'http://localhost:8090'; // 后端完整地址\r\n\r\nexport default {\r\n  name: 'UserList',\r\n  setup() {\r\n    const criteria = ref({\r\n      username: '',\r\n      email: '',\r\n      age: '',\r\n      gender: ''\r\n    });\r\n\r\n    const usernameList = ref([]);\r\n    const emailList = ref([]);\r\n    const ageList = ref([]);\r\n    const genderList = ref([true, false]);\r\n\r\n    const pagedUsers = ref([]);\r\n    const users = ref([]); // 全量用户\r\n    const page = ref(1);\r\n    const pageSize = ref(10);\r\n    const totalPages = ref(1);\r\n\r\n    // ---------- 预加载所有用户，初始化缓存 ----------\r\n    const fetchAllUsers = async () => {\r\n      try {\r\n        const res = await axios.get(`${BASE_URL}/user`);\r\n        users.value = res.data;\r\n      } catch (err) {\r\n        alert('获取全部用户失败: ' + err);\r\n      }\r\n    };\r\n\r\n    // ---------- 获取下拉选项 ----------\r\n    const fetchOptions = async () => {\r\n      try {\r\n        const [uRes, eRes, aRes] = await Promise.all([\r\n          axios.get(`${BASE_URL}/user/options/username`),\r\n          axios.get(`${BASE_URL}/user/options/email`),\r\n          axios.get(`${BASE_URL}/user/options/age`)\r\n        ]);\r\n        usernameList.value = uRes.data;\r\n        emailList.value = eRes.data;\r\n        ageList.value = aRes.data;\r\n        // genderList 固定 [true,false]\r\n      } catch (err) {\r\n        alert('获取下拉选项失败: ' + err);\r\n      }\r\n    };\r\n\r\n    // ---------- 条件查询 + 分页 ----------\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const params = {\r\n          username: criteria.value.username,\r\n          email: criteria.value.email,\r\n          age: criteria.value.age,\r\n          gender: criteria.value.gender,\r\n          page: page.value,\r\n          pageSize: pageSize.value\r\n        };\r\n        const res = await axios.get(`${BASE_URL}/user/query`, { params });\r\n        pagedUsers.value = res.data.data;\r\n        totalPages.value = Math.ceil(res.data.total / pageSize.value);\r\n      } catch (err) {\r\n        alert('查询用户失败: ' + err);\r\n      }\r\n    };\r\n\r\n    const changePage = (p) => {\r\n      if (p < 1 || p > totalPages.value) return;\r\n      page.value = p;\r\n      fetchUsers();\r\n    };\r\n\r\n    onMounted(async () => {\r\n      await fetchAllUsers(); // 先加载全部用户，保证缓存\r\n      await fetchOptions();  // 再加载下拉选项\r\n      await fetchUsers();    // 默认展示第一页\r\n    });\r\n\r\n    return {\r\n      criteria,\r\n      usernameList,\r\n      emailList,\r\n      ageList,\r\n      genderList,\r\n      pagedUsers,\r\n      page,\r\n      pageSize,\r\n      totalPages,\r\n      fetchUsers,\r\n      changePage\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.filters select {\r\n  margin-right: 10px;\r\n}\r\n.pagination {\r\n  margin-top: 10px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}