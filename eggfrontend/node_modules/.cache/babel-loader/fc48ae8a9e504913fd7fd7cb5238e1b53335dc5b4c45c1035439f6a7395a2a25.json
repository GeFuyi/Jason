{"ast":null,"code":"import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nlet stompClient = null;\nlet isConnected = false;\nexport function connect(userId, onMessageReceived) {\n  console.log('[chat.js] 开始连接 STOMP，userId=', userId);\n  const socket = new SockJS('http://192.168.1.104:8090/ws-chat');\n  stompClient = new Client({\n    webSocketFactory: () => socket,\n    connectHeaders: {\n      userId: String(userId)\n    },\n    // 确保是字符串\n    debug: str => console.log('[STOMP DEBUG]', str),\n    reconnectDelay: 5000\n  });\n  stompClient.onConnect = () => {\n    console.log('[chat.js] STOMP connected');\n    isConnected = true;\n\n    // 群聊\n    stompClient.subscribe('/topic/group', msg => {\n      const message = JSON.parse(msg.body);\n      console.log('[STOMP] 收到群聊消息:', message);\n      onMessageReceived(message);\n    });\n\n    // 私聊\n    stompClient.subscribe(`/user/${String(userId)}/queue/private`, msg => {\n      const message = JSON.parse(msg.body);\n      console.log('[STOMP] 收到私聊消息:', message);\n      onMessageReceived(message);\n    });\n  };\n  stompClient.onStompError = frame => {\n    console.error('[STOMP ERROR] broker error: ' + frame.headers['message']);\n    console.error('[STOMP ERROR] details: ' + frame.body);\n  };\n  stompClient.onWebSocketError = ev => {\n    console.error('[STOMP ERROR] WebSocket error', ev);\n  };\n  stompClient.onWebSocketClose = ev => {\n    console.warn('[STOMP] WebSocket closed', ev);\n    isConnected = false;\n  };\n  stompClient.activate();\n}\nexport function sendMessage(fromUserId, toUserId, content, tempId) {\n  if (!stompClient || !isConnected) {\n    console.error('[chat.js] STOMP not connected yet!');\n    return;\n  }\n  const payload = {\n    fromUserId,\n    toUserId,\n    content,\n    tempId\n  };\n  console.log('[chat.js] 发送消息 payload:', payload);\n  stompClient.publish({\n    destination: '/app/chat.send',\n    body: JSON.stringify(payload)\n  });\n}\nexport function disconnect() {\n  if (stompClient) {\n    stompClient.deactivate();\n    console.log('[chat.js] STOMP disconnected');\n    isConnected = false;\n  }\n}","map":{"version":3,"names":["Client","SockJS","stompClient","isConnected","connect","userId","onMessageReceived","console","log","socket","webSocketFactory","connectHeaders","String","debug","str","reconnectDelay","onConnect","subscribe","msg","message","JSON","parse","body","onStompError","frame","error","headers","onWebSocketError","ev","onWebSocketClose","warn","activate","sendMessage","fromUserId","toUserId","content","tempId","payload","publish","destination","stringify","disconnect","deactivate"],"sources":["D:/Final/springboot_egg/egg-web/src/utils/chat.js"],"sourcesContent":["import { Client } from '@stomp/stompjs';\r\nimport SockJS from 'sockjs-client';\r\n\r\nlet stompClient = null;\r\nlet isConnected = false;\r\n\r\nexport function connect(userId, onMessageReceived) {\r\n    console.log('[chat.js] 开始连接 STOMP，userId=', userId);\r\n\r\n    const socket = new SockJS('http://192.168.1.104:8090/ws-chat');\r\n    stompClient = new Client({\r\n        webSocketFactory: () => socket,\r\n        connectHeaders: { userId: String(userId) }, // 确保是字符串\r\n        debug: str => console.log('[STOMP DEBUG]', str),\r\n        reconnectDelay: 5000\r\n    });\r\n\r\n    stompClient.onConnect = () => {\r\n        console.log('[chat.js] STOMP connected');\r\n        isConnected = true;\r\n\r\n        // 群聊\r\n        stompClient.subscribe('/topic/group', msg => {\r\n            const message = JSON.parse(msg.body);\r\n            console.log('[STOMP] 收到群聊消息:', message);\r\n            onMessageReceived(message);\r\n        });\r\n\r\n        // 私聊\r\n        stompClient.subscribe(`/user/${String(userId)}/queue/private`, msg => {\r\n            const message = JSON.parse(msg.body);\r\n            console.log('[STOMP] 收到私聊消息:', message);\r\n            onMessageReceived(message);\r\n        });\r\n    };\r\n\r\n    stompClient.onStompError = frame => {\r\n        console.error('[STOMP ERROR] broker error: ' + frame.headers['message']);\r\n        console.error('[STOMP ERROR] details: ' + frame.body);\r\n    };\r\n\r\n    stompClient.onWebSocketError = ev => {\r\n        console.error('[STOMP ERROR] WebSocket error', ev);\r\n    };\r\n\r\n    stompClient.onWebSocketClose = ev => {\r\n        console.warn('[STOMP] WebSocket closed', ev);\r\n        isConnected = false;\r\n    };\r\n\r\n    stompClient.activate();\r\n}\r\n\r\nexport function sendMessage(fromUserId, toUserId, content, tempId) {\r\n    if (!stompClient || !isConnected) {\r\n        console.error('[chat.js] STOMP not connected yet!');\r\n        return;\r\n    }\r\n\r\n    const payload = { fromUserId, toUserId, content, tempId };\r\n    console.log('[chat.js] 发送消息 payload:', payload);\r\n\r\n    stompClient.publish({\r\n        destination: '/app/chat.send',\r\n        body: JSON.stringify(payload)\r\n    });\r\n}\r\n\r\nexport function disconnect() {\r\n    if (stompClient) {\r\n        stompClient.deactivate();\r\n        console.log('[chat.js] STOMP disconnected');\r\n        isConnected = false;\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}