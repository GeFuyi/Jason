{"ast":null,"code":"import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nlet stompClient = null;\nlet isConnected = false;\n\n/**\r\n * 建立 STOMP 连接\r\n * @param {Number} userId 当前登录用户 ID，用于绑定 Principal\r\n * @param {Function} onMessageReceived 消息回调\r\n */\nexport function connect(userId, onMessageReceived) {\n  console.log('[chat.js] 开始连接 STOMP，userId=', userId);\n  const socket = new SockJS('http://192.168.1.104:8090/ws-chat');\n  stompClient = new Client({\n    webSocketFactory: () => socket,\n    connectHeaders: {\n      userId\n    },\n    // ✅ 绑定 Principal\n    debug: str => console.log('[STOMP DEBUG]', str),\n    reconnectDelay: 5000 // 自动重连\n  });\n  stompClient.onConnect = () => {\n    console.log('[chat.js] STOMP connected');\n    isConnected = true;\n\n    // ✅ 订阅群聊消息\n    stompClient.subscribe('/topic/group', msg => {\n      const message = JSON.parse(msg.body);\n      console.log('[STOMP] 收到群聊消息:', message);\n      onMessageReceived(message);\n    });\n\n    // ✅ 订阅私聊消息\n    stompClient.subscribe(`/user/${userId}/queue/private`, msg => {\n      const message = JSON.parse(msg.body);\n      console.log('[STOMP] 收到私聊消息:', message);\n      onMessageReceived(message);\n    });\n  };\n  stompClient.onStompError = frame => {\n    console.error('[STOMP ERROR] broker error: ' + frame.headers['message']);\n    console.error('[STOMP ERROR] details: ' + frame.body);\n  };\n  stompClient.onWebSocketError = ev => {\n    console.error('[STOMP ERROR] WebSocket error', ev);\n  };\n  stompClient.onWebSocketClose = ev => {\n    console.warn('[STOMP] WebSocket closed', ev);\n    isConnected = false;\n  };\n  stompClient.activate();\n}\n\n/**\r\n * 发送消息\r\n * @param {Number} fromUserId 发送者 ID\r\n * @param {Number|null} toUserId 接收者 ID，null = 群聊\r\n * @param {String} content 消息内容\r\n * @param {Number} tempId 临时消息 ID，用于前端临时消息替换\r\n */\nexport function sendMessage(fromUserId, toUserId, content, tempId) {\n  if (!stompClient || !isConnected) {\n    console.error('[chat.js] STOMP not connected yet!');\n    return;\n  }\n  const payload = {\n    fromUserId,\n    toUserId,\n    content,\n    tempId\n  };\n  console.log('[chat.js] 发送消息 payload:', payload);\n  stompClient.publish({\n    destination: '/app/chat.send',\n    body: JSON.stringify(payload)\n  });\n}\n\n/**\r\n * 判断当前是否已连接\r\n */\nexport function isStompConnected() {\n  return isConnected;\n}\n\n/**\r\n * 断开连接\r\n */\nexport function disconnect() {\n  if (stompClient) {\n    stompClient.deactivate();\n    console.log('[chat.js] STOMP disconnected');\n    isConnected = false;\n  }\n}","map":{"version":3,"names":["Client","SockJS","stompClient","isConnected","connect","userId","onMessageReceived","console","log","socket","webSocketFactory","connectHeaders","debug","str","reconnectDelay","onConnect","subscribe","msg","message","JSON","parse","body","onStompError","frame","error","headers","onWebSocketError","ev","onWebSocketClose","warn","activate","sendMessage","fromUserId","toUserId","content","tempId","payload","publish","destination","stringify","isStompConnected","disconnect","deactivate"],"sources":["D:/Final/springboot_egg/egg-web/src/utils/chat.js"],"sourcesContent":["import { Client } from '@stomp/stompjs'\r\nimport SockJS from 'sockjs-client'\r\n\r\nlet stompClient = null\r\nlet isConnected = false\r\n\r\n/**\r\n * 建立 STOMP 连接\r\n * @param {Number} userId 当前登录用户 ID，用于绑定 Principal\r\n * @param {Function} onMessageReceived 消息回调\r\n */\r\nexport function connect(userId, onMessageReceived) {\r\n    console.log('[chat.js] 开始连接 STOMP，userId=', userId)\r\n\r\n    const socket = new SockJS('http://192.168.1.104:8090/ws-chat')\r\n    stompClient = new Client({\r\n        webSocketFactory: () => socket,\r\n        connectHeaders: { userId }, // ✅ 绑定 Principal\r\n        debug: str => console.log('[STOMP DEBUG]', str),\r\n        reconnectDelay: 5000 // 自动重连\r\n    })\r\n\r\n    stompClient.onConnect = () => {\r\n        console.log('[chat.js] STOMP connected')\r\n        isConnected = true\r\n\r\n        // ✅ 订阅群聊消息\r\n        stompClient.subscribe('/topic/group', msg => {\r\n            const message = JSON.parse(msg.body)\r\n            console.log('[STOMP] 收到群聊消息:', message)\r\n            onMessageReceived(message)\r\n        })\r\n\r\n        // ✅ 订阅私聊消息\r\n        stompClient.subscribe(`/user/${userId}/queue/private`, msg => {\r\n            const message = JSON.parse(msg.body)\r\n            console.log('[STOMP] 收到私聊消息:', message)\r\n            onMessageReceived(message)\r\n        })\r\n    }\r\n\r\n    stompClient.onStompError = frame => {\r\n        console.error('[STOMP ERROR] broker error: ' + frame.headers['message'])\r\n        console.error('[STOMP ERROR] details: ' + frame.body)\r\n    }\r\n\r\n    stompClient.onWebSocketError = ev => {\r\n        console.error('[STOMP ERROR] WebSocket error', ev)\r\n    }\r\n\r\n    stompClient.onWebSocketClose = ev => {\r\n        console.warn('[STOMP] WebSocket closed', ev)\r\n        isConnected = false\r\n    }\r\n\r\n    stompClient.activate()\r\n}\r\n\r\n/**\r\n * 发送消息\r\n * @param {Number} fromUserId 发送者 ID\r\n * @param {Number|null} toUserId 接收者 ID，null = 群聊\r\n * @param {String} content 消息内容\r\n * @param {Number} tempId 临时消息 ID，用于前端临时消息替换\r\n */\r\nexport function sendMessage(fromUserId, toUserId, content, tempId) {\r\n    if (!stompClient || !isConnected) {\r\n        console.error('[chat.js] STOMP not connected yet!')\r\n        return\r\n    }\r\n\r\n    const payload = { fromUserId, toUserId, content, tempId }\r\n    console.log('[chat.js] 发送消息 payload:', payload)\r\n\r\n    stompClient.publish({\r\n        destination: '/app/chat.send',\r\n        body: JSON.stringify(payload)\r\n    })\r\n}\r\n\r\n/**\r\n * 判断当前是否已连接\r\n */\r\nexport function isStompConnected() {\r\n    return isConnected\r\n}\r\n\r\n/**\r\n * 断开连接\r\n */\r\nexport function disconnect() {\r\n    if (stompClient) {\r\n        stompClient.deactivate()\r\n        console.log('[chat.js] STOMP disconnected')\r\n        isConnected = false\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,OAAOC,MAAM,MAAM,eAAe;AAElC,IAAIC,WAAW,GAAG,IAAI;AACtB,IAAIC,WAAW,GAAG,KAAK;;AAEvB;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACC,MAAM,EAAEC,iBAAiB,EAAE;EAC/CC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEH,MAAM,CAAC;EAEnD,MAAMI,MAAM,GAAG,IAAIR,MAAM,CAAC,mCAAmC,CAAC;EAC9DC,WAAW,GAAG,IAAIF,MAAM,CAAC;IACrBU,gBAAgB,EAAEA,CAAA,KAAMD,MAAM;IAC9BE,cAAc,EAAE;MAAEN;IAAO,CAAC;IAAE;IAC5BO,KAAK,EAAEC,GAAG,IAAIN,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEK,GAAG,CAAC;IAC/CC,cAAc,EAAE,IAAI,CAAC;EACzB,CAAC,CAAC;EAEFZ,WAAW,CAACa,SAAS,GAAG,MAAM;IAC1BR,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IACxCL,WAAW,GAAG,IAAI;;IAElB;IACAD,WAAW,CAACc,SAAS,CAAC,cAAc,EAAEC,GAAG,IAAI;MACzC,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,GAAG,CAACI,IAAI,CAAC;MACpCd,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEU,OAAO,CAAC;MACvCZ,iBAAiB,CAACY,OAAO,CAAC;IAC9B,CAAC,CAAC;;IAEF;IACAhB,WAAW,CAACc,SAAS,CAAC,SAASX,MAAM,gBAAgB,EAAEY,GAAG,IAAI;MAC1D,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,GAAG,CAACI,IAAI,CAAC;MACpCd,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEU,OAAO,CAAC;MACvCZ,iBAAiB,CAACY,OAAO,CAAC;IAC9B,CAAC,CAAC;EACN,CAAC;EAEDhB,WAAW,CAACoB,YAAY,GAAGC,KAAK,IAAI;IAChChB,OAAO,CAACiB,KAAK,CAAC,8BAA8B,GAAGD,KAAK,CAACE,OAAO,CAAC,SAAS,CAAC,CAAC;IACxElB,OAAO,CAACiB,KAAK,CAAC,yBAAyB,GAAGD,KAAK,CAACF,IAAI,CAAC;EACzD,CAAC;EAEDnB,WAAW,CAACwB,gBAAgB,GAAGC,EAAE,IAAI;IACjCpB,OAAO,CAACiB,KAAK,CAAC,+BAA+B,EAAEG,EAAE,CAAC;EACtD,CAAC;EAEDzB,WAAW,CAAC0B,gBAAgB,GAAGD,EAAE,IAAI;IACjCpB,OAAO,CAACsB,IAAI,CAAC,0BAA0B,EAAEF,EAAE,CAAC;IAC5CxB,WAAW,GAAG,KAAK;EACvB,CAAC;EAEDD,WAAW,CAAC4B,QAAQ,CAAC,CAAC;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,UAAU,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,MAAM,EAAE;EAC/D,IAAI,CAACjC,WAAW,IAAI,CAACC,WAAW,EAAE;IAC9BI,OAAO,CAACiB,KAAK,CAAC,oCAAoC,CAAC;IACnD;EACJ;EAEA,MAAMY,OAAO,GAAG;IAAEJ,UAAU;IAAEC,QAAQ;IAAEC,OAAO;IAAEC;EAAO,CAAC;EACzD5B,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE4B,OAAO,CAAC;EAE/ClC,WAAW,CAACmC,OAAO,CAAC;IAChBC,WAAW,EAAE,gBAAgB;IAC7BjB,IAAI,EAAEF,IAAI,CAACoB,SAAS,CAACH,OAAO;EAChC,CAAC,CAAC;AACN;;AAEA;AACA;AACA;AACA,OAAO,SAASI,gBAAgBA,CAAA,EAAG;EAC/B,OAAOrC,WAAW;AACtB;;AAEA;AACA;AACA;AACA,OAAO,SAASsC,UAAUA,CAAA,EAAG;EACzB,IAAIvC,WAAW,EAAE;IACbA,WAAW,CAACwC,UAAU,CAAC,CAAC;IACxBnC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3CL,WAAW,GAAG,KAAK;EACvB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}