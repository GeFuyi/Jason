{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createTextVNode as _createTextVNode, withKeys as _withKeys, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = {\n  class: \"messages\",\n  ref: \"messageContainer\"\n};\nconst _hoisted_3 = {\n  class: \"from\"\n};\nconst _hoisted_4 = {\n  class: \"content\"\n};\nconst _hoisted_5 = {\n  class: \"time\"\n};\nconst _hoisted_6 = {\n  class: \"input-area\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_scrollbar = _resolveComponent(\"el-scrollbar\");\n  const _component_el_card = _resolveComponent(\"el-card\");\n  const _component_el_aside = _resolveComponent(\"el-aside\");\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_main = _resolveComponent(\"el-main\");\n  const _component_el_container = _resolveComponent(\"el-container\");\n  return _openBlock(), _createBlock(_component_el_container, {\n    class: \"chat-container\"\n  }, {\n    default: _withCtx(() => [_createCommentVNode(\" 左侧用户列表 \"), _createVNode(_component_el_aside, {\n      width: \"220px\",\n      class: \"user-list\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_card, {\n        class: \"user-card\"\n      }, {\n        default: _withCtx(() => [_cache[2] || (_cache[2] = _createElementVNode(\"h3\", null, \"聊天列表\", -1 /* CACHED */)), _createCommentVNode(\" 群聊 \"), _createElementVNode(\"div\", {\n          class: _normalizeClass([\"user-item\", {\n            active: $data.selectedUserId === null\n          }]),\n          onClick: _cache[0] || (_cache[0] = $event => $options.selectUser(null))\n        }, \" 群聊 \", 2 /* CLASS */), _createCommentVNode(\" 在线用户 \"), _createVNode(_component_el_scrollbar, {\n          class: \"user-scroll\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.users, user => {\n            return _openBlock(), _createElementBlock(\"div\", {\n              class: _normalizeClass([\"user-item\", {\n                active: $data.selectedUserId === user.id\n              }]),\n              key: user.id,\n              onClick: $event => $options.selectUser(user.id)\n            }, _toDisplayString(user.username), 11 /* TEXT, CLASS, PROPS */, _hoisted_1);\n          }), 128 /* KEYED_FRAGMENT */))]),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */,\n        __: [2]\n      })]),\n      _: 1 /* STABLE */\n    }), _createCommentVNode(\" 右侧聊天框 \"), _createVNode(_component_el_main, {\n      class: \"chat-main\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_card, {\n        class: \"chat-card\"\n      }, {\n        default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredMessages, msg => {\n          return _openBlock(), _createElementBlock(\"div\", {\n            key: msg.id || msg.tempId,\n            class: _normalizeClass(['message', msg.fromUserId === Number($data.userId) ? 'mine' : 'other'])\n          }, [_createElementVNode(\"span\", _hoisted_3, _toDisplayString(msg.fromUserId === Number($data.userId) ? '我' : $options.getUsername(msg.fromUserId)), 1 /* TEXT */), _cache[3] || (_cache[3] = _createTextVNode(\"： \", -1 /* CACHED */)), _createElementVNode(\"span\", _hoisted_4, _toDisplayString(msg.content), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_5, _toDisplayString($options.formatTime(msg.createTime)), 1 /* TEXT */)], 2 /* CLASS */);\n        }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), _createElementVNode(\"div\", _hoisted_6, [_createVNode(_component_el_input, {\n          modelValue: $data.inputMessage,\n          \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.inputMessage = $event),\n          placeholder: \"请输入消息\",\n          onKeyup: _withKeys($options.sendChatMessage, [\"enter\"]),\n          clearable: \"\"\n        }, null, 8 /* PROPS */, [\"modelValue\", \"onKeyup\"]), _createVNode(_component_el_button, {\n          type: \"primary\",\n          onClick: $options.sendChatMessage\n        }, {\n          default: _withCtx(() => _cache[4] || (_cache[4] = [_createTextVNode(\"发送\", -1 /* CACHED */)])),\n          _: 1 /* STABLE */,\n          __: [4]\n        }, 8 /* PROPS */, [\"onClick\"])])]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["class","ref","_createBlock","_component_el_container","_createCommentVNode","_createVNode","_component_el_aside","width","_component_el_card","_createElementVNode","_normalizeClass","active","$data","selectedUserId","onClick","_cache","$event","$options","selectUser","_component_el_scrollbar","_createElementBlock","_Fragment","_renderList","users","user","id","key","username","_hoisted_1","_component_el_main","_hoisted_2","filteredMessages","msg","tempId","fromUserId","Number","userId","_hoisted_3","_toDisplayString","getUsername","_hoisted_4","content","_hoisted_5","formatTime","createTime","_hoisted_6","_component_el_input","inputMessage","placeholder","onKeyup","_withKeys","sendChatMessage","clearable","_component_el_button","type"],"sources":["D:\\Final\\springboot_egg\\egg-web\\src\\user\\ChatRoom.vue"],"sourcesContent":["<template>\r\n  <el-container class=\"chat-container\">\r\n    <!-- 左侧用户列表 -->\r\n    <el-aside width=\"220px\" class=\"user-list\">\r\n      <el-card class=\"user-card\">\r\n        <h3>聊天列表</h3>\r\n\r\n        <!-- 群聊 -->\r\n        <div\r\n            class=\"user-item\"\r\n            :class=\"{ active: selectedUserId === null }\"\r\n            @click=\"selectUser(null)\"\r\n        >\r\n          群聊\r\n        </div>\r\n\r\n        <!-- 在线用户 -->\r\n        <el-scrollbar class=\"user-scroll\">\r\n          <div\r\n              class=\"user-item\"\r\n              v-for=\"user in users\"\r\n              :key=\"user.id\"\r\n              :class=\"{ active: selectedUserId === user.id }\"\r\n              @click=\"selectUser(user.id)\"\r\n          >\r\n            {{ user.username }}\r\n          </div>\r\n        </el-scrollbar>\r\n      </el-card>\r\n    </el-aside>\r\n\r\n    <!-- 右侧聊天框 -->\r\n    <el-main class=\"chat-main\">\r\n      <el-card class=\"chat-card\">\r\n        <div class=\"messages\" ref=\"messageContainer\">\r\n          <div\r\n              v-for=\"msg in filteredMessages\"\r\n              :key=\"msg.id || msg.tempId\"\r\n              :class=\"['message', msg.fromUserId === Number(userId) ? 'mine' : 'other']\"\r\n          >\r\n            <span class=\"from\">\r\n              {{ msg.fromUserId === Number(userId) ? '我' : getUsername(msg.fromUserId) }}\r\n            </span>：\r\n            <span class=\"content\">{{ msg.content }}</span>\r\n            <span class=\"time\">{{ formatTime(msg.createTime) }}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"input-area\">\r\n          <el-input\r\n              v-model=\"inputMessage\"\r\n              placeholder=\"请输入消息\"\r\n              @keyup.enter=\"sendChatMessage\"\r\n              clearable\r\n          ></el-input>\r\n          <el-button type=\"primary\" @click=\"sendChatMessage\">发送</el-button>\r\n        </div>\r\n      </el-card>\r\n    </el-main>\r\n  </el-container>\r\n</template>\r\n\r\n<script>\r\nimport { connect, sendMessage } from '@/utils/chat'\r\nimport egg from '@/utils/egg'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'ChatRoom',\r\n  data() {\r\n    return {\r\n      userId: null,\r\n      users: [],\r\n      selectedUserId: null, // null = 群聊\r\n      messages: [],\r\n      inputMessage: '',\r\n      pendingTempIds: new Set() // 保存前端发送的临时消息id\r\n    }\r\n  },\r\n  computed: {\r\n    filteredMessages() {\r\n      return this.messages.filter(msg => {\r\n        if (this.selectedUserId === null) {\r\n          // 群聊消息 toUserId 为 null\r\n          return !msg.toUserId\r\n        }\r\n        return (\r\n            (msg.fromUserId === this.selectedUserId && msg.toUserId === Number(this.userId)) ||\r\n            (msg.fromUserId === Number(this.userId) && msg.toUserId === this.selectedUserId)\r\n        )\r\n      })\r\n    }\r\n  },\r\n  mounted() {\r\n    this.userId = sessionStorage.getItem('userId')\r\n    if (!this.userId) {\r\n      ElMessage.error('请先登录')\r\n      this.$router.push('/login')\r\n      return\r\n    }\r\n\r\n    // 建立 WebSocket 连接\r\n    connect(Number(this.userId), this.onMessageReceived)\r\n\r\n    // 获取在线用户列表\r\n    this.fetchOnlineUsers()\r\n  },\r\n  methods: {\r\n    scrollToBottom() {\r\n      // 使用 nextTick 确保容器已经挂载\r\n      this.$nextTick(() => {\r\n        const container = this.$refs.messageContainer\r\n        if (container) {\r\n          container.scrollTop = container.scrollHeight\r\n        }\r\n      })\r\n    },\r\n\r\n    onMessageReceived(msg) {\r\n      // 自己发的消息或 tempId 已存在，忽略\r\n      if ((msg.fromUserId === Number(this.userId) && msg.tempId) ||\r\n          (msg.tempId && this.pendingTempIds.has(msg.tempId))) {\r\n        this.pendingTempIds.delete(msg.tempId)\r\n        return\r\n      }\r\n      this.messages.push(msg)\r\n      this.scrollToBottom()\r\n    },\r\n\r\n    selectUser(userId) {\r\n      this.selectedUserId = userId\r\n      // 切换聊天对象后滚动到底部\r\n      this.$nextTick(() => {\r\n        const container = this.$refs.messageContainer\r\n        if (container) container.scrollTop = container.scrollHeight\r\n      })\r\n    },\r\n\r\n    sendChatMessage() {\r\n      const content = this.inputMessage.trim()\r\n      if (!content) return\r\n\r\n      const tempId = Date.now()\r\n      const payload = {\r\n        fromUserId: Number(this.userId),\r\n        toUserId: this.selectedUserId, // null = 群聊\r\n        content\r\n      }\r\n\r\n      // 前端立即显示\r\n      const tempMsg = { ...payload, tempId, createTime: new Date().toISOString() }\r\n      this.messages.push(tempMsg)\r\n      this.pendingTempIds.add(tempId)\r\n      this.inputMessage = ''\r\n      this.scrollToBottom()\r\n\r\n      // 发送到后端\r\n      sendMessage(payload.fromUserId, payload.toUserId, payload.content, tempId)\r\n    },\r\n\r\n    formatTime(datetime) {\r\n      return datetime ? new Date(datetime).toLocaleTimeString() : ''\r\n    },\r\n\r\n    fetchOnlineUsers() {\r\n      egg.get('/user')\r\n          .then(res => {\r\n            this.users = res.data\r\n          })\r\n          .catch(err => {\r\n            console.error(err)\r\n            ElMessage.error('获取用户列表失败')\r\n          })\r\n    },\r\n\r\n    getUsername(id) {\r\n      const user = this.users.find(u => u.id === id)\r\n      return user ? user.username : '未知'\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container {\r\n  height: 90vh;\r\n  display: flex;\r\n}\r\n\r\n.user-list {\r\n  padding: 10px;\r\n}\r\n\r\n.user-card {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n  padding: 10px;\r\n  height: 100%;\r\n}\r\n\r\n.user-scroll {\r\n  max-height: 400px; /* 限制滚动区域高度 */\r\n  overflow-y: auto;\r\n}\r\n\r\n.user-item {\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  background-color: #fff;\r\n  transition: all 0.2s;\r\n  margin-bottom: 6px;\r\n}\r\n\r\n.user-item:hover {\r\n  background-color: #f0f9ff;\r\n}\r\n\r\n.user-item.active {\r\n  background-color: #bae7ff;\r\n  border-color: #91d5ff;\r\n}\r\n\r\n.chat-main {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n  flex: 1;\r\n}\r\n\r\n.chat-card {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n}\r\n\r\n.messages {\r\n  flex: 1;\r\n  padding: 10px;\r\n  overflow-y: auto;\r\n  background-color: #f9f9f9;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.message {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.message.mine {\r\n  text-align: right;\r\n}\r\n\r\n.message .from {\r\n  font-weight: bold;\r\n  margin-right: 5px;\r\n}\r\n\r\n.message .time {\r\n  font-size: 12px;\r\n  color: #888;\r\n  margin-left: 5px;\r\n}\r\n\r\n.input-area {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}