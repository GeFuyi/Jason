{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { connect, sendMessage } from '@/utils/chat';\nimport egg from '@/utils/egg';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'ChatRoom',\n  data() {\n    return {\n      userId: null,\n      users: [],\n      selectedUserId: null,\n      messages: [],\n      inputMessage: '',\n      pendingTempIds: new Set()\n    };\n  },\n  computed: {\n    filteredMessages() {\n      return this.messages.filter(msg => {\n        if (this.selectedUserId === null) return !msg.toUserId;\n        return msg.fromUserId === this.selectedUserId && msg.toUserId === Number(this.userId) || msg.fromUserId === Number(this.userId) && msg.toUserId === this.selectedUserId;\n      });\n    }\n  },\n  mounted() {\n    this.userId = sessionStorage.getItem('userId');\n    if (!this.userId) {\n      ElMessage.error('请先登录');\n      this.$router.push('/login');\n      return;\n    }\n\n    // 读取本地消息\n    this.loadMessagesFromLocal();\n    connect(Number(this.userId), this.onMessageReceived);\n    this.fetchOnlineUsers();\n    this.scrollToBottom();\n  },\n  methods: {\n    // localStorage key\n    getStorageKey() {\n      return `chat_messages_user_${this.userId}`;\n    },\n    saveMessagesToLocal() {\n      // 按会话分组存储\n      const grouped = {};\n      this.messages.forEach(msg => {\n        const sessionId = msg.toUserId === null ? 'group' : msg.fromUserId === Number(this.userId) ? msg.toUserId : msg.fromUserId;\n        if (!grouped[sessionId]) grouped[sessionId] = [];\n        grouped[sessionId].push(msg);\n      });\n      localStorage.setItem(this.getStorageKey(), JSON.stringify(grouped));\n    },\n    loadMessagesFromLocal() {\n      const stored = localStorage.getItem(this.getStorageKey());\n      if (stored) {\n        const grouped = JSON.parse(stored);\n        const allMsgs = [];\n        Object.values(grouped).forEach(arr => allMsgs.push(...arr));\n        this.messages = allMsgs;\n      }\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const container = this.$refs.messageContainer;\n        if (container) container.scrollTop = container.scrollHeight;\n      });\n    },\n    onMessageReceived(msg) {\n      if (msg.tempId && this.pendingTempIds.has(msg.tempId)) {\n        const index = this.messages.findIndex(m => m.tempId === msg.tempId);\n        if (index !== -1) this.messages.splice(index, 1, msg);\n        this.pendingTempIds.delete(msg.tempId);\n      } else {\n        this.messages.push(msg);\n      }\n      this.saveMessagesToLocal();\n      this.scrollToBottom();\n    },\n    selectUser(userId) {\n      this.selectedUserId = userId;\n      this.scrollToBottom();\n    },\n    sendChatMessage() {\n      const content = this.inputMessage.trim();\n      if (!content) return;\n      const tempId = Date.now();\n      const payload = {\n        fromUserId: Number(this.userId),\n        toUserId: this.selectedUserId,\n        content\n      };\n      if (payload.toUserId !== null) {\n        const tempMsg = {\n          ...payload,\n          tempId,\n          createTime: new Date().toISOString(),\n          failed: false\n        };\n        this.messages.push(tempMsg);\n        this.pendingTempIds.add(tempId);\n        this.saveMessagesToLocal();\n        this.scrollToBottom();\n      }\n      this.inputMessage = '';\n      try {\n        sendMessage(payload.fromUserId, payload.toUserId, payload.content, tempId);\n      } catch (e) {\n        if (payload.toUserId !== null) {\n          const index = this.messages.findIndex(m => m.tempId === tempId);\n          if (index !== -1) this.messages[index].failed = true;\n          this.pendingTempIds.delete(tempId);\n        }\n        console.error('消息发送失败', e);\n      }\n    },\n    formatTime(datetime) {\n      return datetime ? new Date(datetime).toLocaleTimeString() : '';\n    },\n    fetchOnlineUsers() {\n      egg.get('/user').then(res => this.users = res.data).catch(err => {\n        console.error(err);\n        ElMessage.error('获取用户列表失败');\n      });\n    },\n    getUsername(id) {\n      const user = this.users.find(u => u.id === id);\n      return user ? user.username : '未知';\n    }\n  }\n};","map":{"version":3,"names":["connect","sendMessage","egg","ElMessage","name","data","userId","users","selectedUserId","messages","inputMessage","pendingTempIds","Set","computed","filteredMessages","filter","msg","toUserId","fromUserId","Number","mounted","sessionStorage","getItem","error","$router","push","loadMessagesFromLocal","onMessageReceived","fetchOnlineUsers","scrollToBottom","methods","getStorageKey","saveMessagesToLocal","grouped","forEach","sessionId","localStorage","setItem","JSON","stringify","stored","parse","allMsgs","Object","values","arr","$nextTick","container","$refs","messageContainer","scrollTop","scrollHeight","tempId","has","index","findIndex","m","splice","delete","selectUser","sendChatMessage","content","trim","Date","now","payload","tempMsg","createTime","toISOString","failed","add","e","console","formatTime","datetime","toLocaleTimeString","get","then","res","catch","err","getUsername","id","user","find","u","username"],"sources":["D:\\Final\\springboot_egg\\egg-web\\src\\user\\ChatRoom.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <!-- 左侧用户列表 -->\r\n    <aside class=\"user-list\">\r\n      <div class=\"user-card\">\r\n        <h3>聊天列表</h3>\r\n        <el-scrollbar class=\"user-scroll\">\r\n          <div\r\n              class=\"user-item\"\r\n              :class=\"{ active: selectedUserId === null }\"\r\n              @click=\"selectUser(null)\"\r\n          >群聊</div>\r\n\r\n          <div\r\n              class=\"user-item\"\r\n              v-for=\"user in users\"\r\n              :key=\"user.id\"\r\n              :class=\"{ active: selectedUserId === user.id }\"\r\n              @click=\"selectUser(user.id)\"\r\n          >\r\n            {{ user.username }}\r\n          </div>\r\n        </el-scrollbar>\r\n      </div>\r\n    </aside>\r\n\r\n    <!-- 右侧聊天区 -->\r\n    <main class=\"chat-main\">\r\n      <!-- 消息显示区域 -->\r\n      <div class=\"messages\" ref=\"messageContainer\">\r\n        <div\r\n            v-for=\"msg in filteredMessages\"\r\n            :key=\"msg.id || msg.tempId\"\r\n            :class=\"['message', msg.fromUserId === Number(userId) ? 'mine' : 'other']\"\r\n        >\r\n          <span class=\"from\">\r\n            {{ msg.fromUserId === Number(userId) ? '我' : getUsername(msg.fromUserId) }}\r\n          </span>\r\n          <div class=\"bubble\">\r\n            <span class=\"content\">{{ msg.content }}</span>\r\n          </div>\r\n          <span class=\"time\">{{ formatTime(msg.createTime) }}</span>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 输入框区域 -->\r\n      <div class=\"input-area\">\r\n        <el-input\r\n            v-model=\"inputMessage\"\r\n            placeholder=\"请输入消息\"\r\n            @keyup.enter=\"sendChatMessage\"\r\n            class=\"input-box\"\r\n            clearable\r\n        ></el-input>\r\n        <el-button type=\"primary\" @click=\"sendChatMessage\">发送</el-button>\r\n      </div>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { connect, sendMessage } from '@/utils/chat'\r\nimport egg from '@/utils/egg'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'ChatRoom',\r\n  data() {\r\n    return {\r\n      userId: null,\r\n      users: [],\r\n      selectedUserId: null,\r\n      messages: [],\r\n      inputMessage: '',\r\n      pendingTempIds: new Set()\r\n    }\r\n  },\r\n  computed: {\r\n    filteredMessages() {\r\n      return this.messages.filter(msg => {\r\n        if (this.selectedUserId === null) return !msg.toUserId\r\n        return (\r\n            (msg.fromUserId === this.selectedUserId && msg.toUserId === Number(this.userId)) ||\r\n            (msg.fromUserId === Number(this.userId) && msg.toUserId === this.selectedUserId)\r\n        )\r\n      })\r\n    }\r\n  },\r\n  mounted() {\r\n    this.userId = sessionStorage.getItem('userId')\r\n    if (!this.userId) {\r\n      ElMessage.error('请先登录')\r\n      this.$router.push('/login')\r\n      return\r\n    }\r\n\r\n    // 读取本地消息\r\n    this.loadMessagesFromLocal()\r\n\r\n    connect(Number(this.userId), this.onMessageReceived)\r\n    this.fetchOnlineUsers()\r\n    this.scrollToBottom()\r\n  },\r\n  methods: {\r\n    // localStorage key\r\n    getStorageKey() {\r\n      return `chat_messages_user_${this.userId}`\r\n    },\r\n\r\n    saveMessagesToLocal() {\r\n      // 按会话分组存储\r\n      const grouped = {}\r\n      this.messages.forEach(msg => {\r\n        const sessionId = msg.toUserId === null ? 'group' : (msg.fromUserId === Number(this.userId) ? msg.toUserId : msg.fromUserId)\r\n        if (!grouped[sessionId]) grouped[sessionId] = []\r\n        grouped[sessionId].push(msg)\r\n      })\r\n      localStorage.setItem(this.getStorageKey(), JSON.stringify(grouped))\r\n    },\r\n\r\n    loadMessagesFromLocal() {\r\n      const stored = localStorage.getItem(this.getStorageKey())\r\n      if (stored) {\r\n        const grouped = JSON.parse(stored)\r\n        const allMsgs = []\r\n        Object.values(grouped).forEach(arr => allMsgs.push(...arr))\r\n        this.messages = allMsgs\r\n      }\r\n    },\r\n\r\n    scrollToBottom() {\r\n      this.$nextTick(() => {\r\n        const container = this.$refs.messageContainer\r\n        if (container) container.scrollTop = container.scrollHeight\r\n      })\r\n    },\r\n\r\n    onMessageReceived(msg) {\r\n      if (msg.tempId && this.pendingTempIds.has(msg.tempId)) {\r\n        const index = this.messages.findIndex(m => m.tempId === msg.tempId)\r\n        if (index !== -1) this.messages.splice(index, 1, msg)\r\n        this.pendingTempIds.delete(msg.tempId)\r\n      } else {\r\n        this.messages.push(msg)\r\n      }\r\n      this.saveMessagesToLocal()\r\n      this.scrollToBottom()\r\n    },\r\n\r\n    selectUser(userId) {\r\n      this.selectedUserId = userId\r\n      this.scrollToBottom()\r\n    },\r\n\r\n    sendChatMessage() {\r\n      const content = this.inputMessage.trim()\r\n      if (!content) return\r\n\r\n      const tempId = Date.now()\r\n      const payload = {\r\n        fromUserId: Number(this.userId),\r\n        toUserId: this.selectedUserId,\r\n        content\r\n      }\r\n\r\n      if (payload.toUserId !== null) {\r\n        const tempMsg = { ...payload, tempId, createTime: new Date().toISOString(), failed: false }\r\n        this.messages.push(tempMsg)\r\n        this.pendingTempIds.add(tempId)\r\n        this.saveMessagesToLocal()\r\n        this.scrollToBottom()\r\n      }\r\n\r\n      this.inputMessage = ''\r\n\r\n      try {\r\n        sendMessage(payload.fromUserId, payload.toUserId, payload.content, tempId)\r\n      } catch (e) {\r\n        if (payload.toUserId !== null) {\r\n          const index = this.messages.findIndex(m => m.tempId === tempId)\r\n          if (index !== -1) this.messages[index].failed = true\r\n          this.pendingTempIds.delete(tempId)\r\n        }\r\n        console.error('消息发送失败', e)\r\n      }\r\n    },\r\n\r\n    formatTime(datetime) {\r\n      return datetime ? new Date(datetime).toLocaleTimeString() : ''\r\n    },\r\n\r\n    fetchOnlineUsers() {\r\n      egg.get('/user')\r\n          .then(res => this.users = res.data)\r\n          .catch(err => {\r\n            console.error(err)\r\n            ElMessage.error('获取用户列表失败')\r\n          })\r\n    },\r\n\r\n    getUsername(id) {\r\n      const user = this.users.find(u => u.id === id)\r\n      return user ? user.username : '未知'\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 整个页面全屏 */\r\n.chat-container {\r\n  display: flex;\r\n  height: 100vh;\r\n  width: 100vw;\r\n}\r\n\r\n/* 左侧用户列表 */\r\n.user-list {\r\n  width: 20%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n  background-color: #fafafa;\r\n  box-sizing: border-box;\r\n  height: 100%;\r\n}\r\n\r\n.user-card {\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1;\r\n  height: 100%;\r\n}\r\n\r\n.user-scroll {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  margin-top: 10px;\r\n}\r\n\r\n.user-item {\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  background-color: #fff;\r\n  margin-bottom: 6px;\r\n}\r\n\r\n.user-item.active {\r\n  background-color: #bae7ff;\r\n  border-color: #91d5ff;\r\n}\r\n\r\n/* 右侧聊天区 */\r\n.chat-main {\r\n  width: 80%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n  box-sizing: border-box;\r\n  background-color: #f0f2f5;\r\n  height: 100%;\r\n}\r\n\r\n/* 消息显示区域固定高度 */\r\n.messages {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 10px;\r\n  background-color: #ffffff;\r\n  border-radius: 8px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\n/* 输入框固定在底部 */\r\n.input-area {\r\n  display: flex;\r\n  gap: 10px;\r\n  padding-top: 10px;\r\n  height: 50px;\r\n  border-top: 1px solid #ddd;\r\n}\r\n\r\n.input-box {\r\n  flex: 1;\r\n}\r\n\r\n/* 消息样式 */\r\n.message {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.message.mine {\r\n  align-items: flex-end;\r\n}\r\n\r\n.message.other {\r\n  align-items: flex-start;\r\n}\r\n\r\n.bubble {\r\n  max-width: 70%;\r\n  padding: 10px 14px;\r\n  border-radius: 16px;\r\n  word-wrap: break-word;\r\n  position: relative;\r\n  background-color: #e6f7ff;\r\n}\r\n\r\n.message.mine .bubble {\r\n  background-color: #91d5ff;\r\n  color: #000;\r\n}\r\n\r\n.message.mine .bubble::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  right: -8px;\r\n  top: 10px;\r\n  border-width: 8px 0 8px 8px;\r\n  border-style: solid;\r\n  border-color: transparent transparent transparent #91d5ff;\r\n}\r\n\r\n.message.other .bubble::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  left: -8px;\r\n  top: 10px;\r\n  border-width: 8px 8px 8px 0;\r\n  border-style: solid;\r\n  border-color: transparent #e6f7ff transparent transparent;\r\n}\r\n\r\n/* 时间显示在气泡下方，小字体，对齐微信风格 */\r\n.time {\r\n  font-size: 12px;\r\n  color: #999;\r\n  margin-top: 2px;\r\n}\r\n\r\n.message.mine .time {\r\n  text-align: right;\r\n}\r\n\r\n.message.other .time {\r\n  text-align: left;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}